{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","components/layout/Bold/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts","components/forms/TextAreaField/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/Buttons/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/EthAddressInput/index.tsx"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","submitting","validating","form","validate","Bold","this","React","styles","heading","justifyContent","maxHeight","boxSizing","loaderContainer","height","close","color","secondaryText","detailsContainer","backgroundColor","background","buttonRow","button","marginLeft","sm","ScanQRModal","isOpen","onClose","onScan","useState","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","Row","align","grow","Paragraph","noMargin","size","IconButton","disableRipple","onClick","Hairline","Col","layout","middle","Block","margin","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrCodeBtn","cursor","ScanQRWrapper","handleScan","qrModalOpen","setQrModalOpen","closeQrModal","Img","alt","role","src","QRIcon","Wrapper","styled","div","StyledDivider","DividerSRC","Divider","withArrow","type","StyledBlock","border","xs","SafeInfo","useSelector","currentSafeWithNames","safeAddress","address","ethBalance","safeName","nativeCurrency","getNativeCurrency","hash","explorerUrl","getExplorerInfo","showAvatar","showCopyBtn","symbol","NO_CONTRACT","ensResolver","createDecorator","field","updates","contractAddress","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","message","setMax","args","state","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","selectedMethod","setCallResults","setAbiValue","isAddress","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","test","handleSubmitError","key","hasOwnProperty","reason","FORM_ERROR","generateFormFieldKey","signatureHash","index","keyType","extractMethodArgs","JSON","parse","map","Number","isInteger","BigNumber","toString","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","inputs","methods","isReadMethod","action","getValueFromTxInputs","tx","replace","String","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","useTextFieldLabelStyle","borderRadius","fontSize","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","fieldMutator","label","setIsValidAddress","setSelectedEntry","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","addressErrorMessage","mustBeEthereumAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","logError","Errors","_101","validatedAddress","chainId","labelStyles","inputStyles","Autocomplete","closeIcon","openOnFocus","filterOptions","freeSolo","options","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","required","getOptionLabel","renderOption","PrefixedEthHashInfo","display","flexGrow","AddressBookInput","currentNetworkAddressBook","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","selectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","formContainer","md","wordBreak","outerData","minHeight","fontFamily","letterSpacing","fontStretch","gap","dataInput","selectAddress","textarea","alignItems","TextAreaField","component","Buttons","requiresMethod","useField","useFormState","Footer","cancelButtonProps","confirmButtonProps","disabled","status","ButtonStatus","LOADING","READY","EthAddressInput","isContract","isRequired","onScannedValue","validatorsList","composeValidators","filter","validator","placeholder","event","target","center","scannedAddress","startsWith"],"mappings":"8IAIeA,IAFE,SAACC,GAAD,OAAoC,cAAC,IAAD,eAAWA,M,oMCI1DC,EAAgB,CACpBC,SAAU,SACVC,MAAO,QAYHC,EAAYC,aATH,kBACbC,YAAa,CACXC,KAAM,CACJC,WAAYC,KACZC,cAAe,OACfC,WAAY,QAoFHC,IAnDG,SAACZ,GACjB,MASIA,EARFa,MAASC,EADX,EACWA,KAAMC,EADjB,EACiBA,SAAUC,EAD3B,EAC2BA,MAAUC,EADrC,iBAEEC,EAOElB,EAPFkB,eACAC,EAMEnB,EANFmB,KACAC,EAKEpB,EALFoB,UACAC,EAIErB,EAJFqB,KACAC,EAGEtB,EAHFsB,OACAC,EAEEvB,EAFFuB,KACGC,EARL,YASIxB,EATJ,GAUMyB,EAAUrB,IACVsB,EAAaV,EAAQO,OAAOI,EAC5BC,GAAaT,EAAKU,UAAYV,EAAKW,YAAcX,EAAKY,MACtDC,IAAab,EAAKc,QAAWd,EAAKe,2BAA6Bf,EAAKgB,YACpEC,EAAejB,EAAKc,OAASd,EAAKgB,YAClCE,GAAoClB,EAAKmB,SAAWnB,EAAKW,WAAaX,EAAKU,SAC3EU,EAA8C,qBAAfpB,EAAKc,QAAgCd,EAAKU,QAEzEW,EAAmBH,GAAoCE,EAEvDE,EAAYf,EAAaD,EAAQlB,KAAO,GACxCmC,EAAgBvB,EAAKY,MAAQ,UAAYC,GAAYJ,EAAY,YAAc,GAC/Ee,EAAU,2BACX1B,GADW,IAEd2B,aAAc,MACd,cAAetB,IAEXuB,EAAc,2BACf3B,GADe,IAElB4B,UAAU,GAAD,OAAKL,EAAL,YAAkBC,GAC3BF,iBAAkBA,IAGpB,OACE,cAAC,IAAD,aACEP,MAAOD,GAAYJ,EACnBF,WAAYM,GAAYJ,EAAYQ,EAAeV,GAAc,IACjEiB,WAAYA,EACZI,WAAYF,EACZzB,UAAWA,EACXN,KAAMA,EACNC,SAAUA,EACVM,KAAMA,EACN2B,MAAO/C,EACPe,MAAOA,GACHQ,M,kFC5FJyB,EAAgB,SAACC,GAAD,MAAc,CAClCA,QAAQ,KAAD,OAAOA,EAAP,KACPC,cAAe,SACfC,KAAM,aA6BOC,IA1BC,SAAC,GAAD,IACdC,EADc,EACdA,SACAC,EAFc,EAEdA,WACAC,EAHc,EAGdA,aACAC,EAJc,EAIdA,cACAC,EALc,EAKdA,SALc,IAMdR,eANc,MAMJ,EANI,EAOdS,EAPc,EAOdA,aAPc,IAQdrC,cARc,MAQL,GARK,EASdsC,EATc,EASdA,WATc,OAWd,cAAC,IAAD,CACEL,WAAYA,EACZE,cAAeA,EACfI,SAAUL,EACVE,SAAUA,EACVI,OAAQ,gBAAGC,EAAH,EAAGA,aAAiBvC,EAApB,wBACN,sBAAM,cAAaF,EAAQoC,SAAUK,EAAcf,MAAOC,EAAcC,GAAxE,SACGI,EAAS9B,EAAKwC,WAAYxC,EAAKyC,WAAYzC,EAAMA,EAAK0C,KAAKL,aAGhEF,aAAcA,EACdQ,SAAUP,M,gHC7BRQ,E,4JACJ,WACE,MAA+BC,KAAKrE,MAA5BsD,EAAR,EAAQA,SAAatD,EAArB,iBAEA,OAAO,6CAAOA,GAAP,aAAesD,S,GAJPgB,iBAQJF,O,gGCVA,MAA0B,mC,+DCG5BG,EAASjE,YAAa,CACjCkE,QAAS,CACPtB,QAASzC,KACTgE,eAAgB,gBAChBC,UAAW,OACXC,UAAW,cAEbC,gBAAiB,CACfzE,MAAO,OACP0E,OAAQ,QAEVC,MAAO,CACLD,OAAQ,OACR1E,MAAO,OACP4E,MAAOC,iBAETC,iBAAkB,CAChBC,gBAAiBC,aACjBT,UAAW,SAEbU,UAAW,CACTP,OAAQ,OACRJ,eAAgB,UAElBY,OAAQ,CACN,eAAgB,CACdC,WAAYC,S,qECZZnF,EAAYC,YAAWkE,GAQhBiB,EAAc,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,OAAQC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,OACvClE,EAAUrB,IAChB,EAAsDwF,oBAAkB,GAAxE,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAA0BF,mBAAwB,MAAlD,mBAAO3D,EAAP,KAAc8D,EAAd,KACA,EAA0CH,oBAAkB,GAA5D,mBAAOI,EAAP,KAAsBC,EAAtB,KACMC,EAAkB5B,cAClB6B,EAAkB7B,eAAkB,WACxC4B,EAAWE,QAAQD,oBAClB,CAACD,IAEJG,qBAAU,WACHR,IAAuBG,GAAkB/D,IAC5C6D,GAAuB,GACvBK,OAED,CAACH,EAAeG,EAAiBN,EAAqBC,EAAwB7D,IAEjF,IAAMqE,EAAuB,SAACrE,EAAqBsE,GACjD,GAAItE,EASF,OARAuE,QAAQvE,MAAM,gBAAiBA,QAEZ,oBAAfA,EAAMnB,MAA6C,6BAAfmB,EAAMnB,MAC5CmF,GAAiB,GACjBH,GAAuB,IAEvBC,EAAS,6BAKTQ,EACFZ,EAAOY,GACEP,GACTD,EAAS,6BAIb,OACE,eAACU,EAAA,EAAD,CAAOC,YAAY,sBAAsBC,YAAajB,EAASkB,KAAMnB,EAAQoB,MAAM,iBAAnF,UACE,eAACC,EAAA,EAAD,CAAKC,MAAM,SAASjE,UAAWrB,EAAQ+C,QAASwC,MAAI,EAApD,UACE,cAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,KAAK,KAAzB,qBAGA,cAACC,EAAA,EAAD,CAAYC,eAAa,EAACC,QAAS5B,EAAnC,SACE,cAAC,IAAD,CAAO5C,UAAWrB,EAAQqD,aAG9B,cAACyC,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAK1E,UAAWrB,EAAQwD,iBAAkBwC,OAAO,SAASC,OAAO,KAAjE,UACGzF,GACC,cAAC0F,EAAA,EAAD,CAAOzE,QAAQ,KAAK0E,OAAO,KAA3B,SACG3F,IAGL,cAAC,IAAD,CACE4F,WAAY7B,EACZ8B,QAAS,SAACC,GAAD,OAAgBzB,EAAqByB,EAAK,OACnDpC,OAAQ,SAACqC,GAAD,OAAkB1B,EAAqB,KAAM0B,IACrDC,IAAK/B,EACLlD,MAAO,CAAE7C,MAAO,QAAS0E,OAAQ,SACjCqD,WAAW,YAGf,cAACX,EAAA,EAAD,IACA,eAACT,EAAA,EAAD,CAAKC,MAAM,SAASjE,UAAWrB,EAAQ2D,UAAvC,UACE,cAAC+C,EAAA,EAAD,CAAQrF,UAAWrB,EAAQ4D,OAAQN,MAAM,YAAYqD,SAAU,IAAKd,QAAS5B,EAA7E,mBAGA,cAACyC,EAAA,EAAD,CACErF,UAAWrB,EAAQ4D,OACnBN,MAAM,UACNqD,SAAU,IACVd,QAAS,WACPrB,GAAiB,GACjBF,EAAS,MACTD,GAAuB,IAEzBuC,QAAQ,YATV,oC,SCtFFjI,EAAYC,YAAW,CAC3BiI,UAAW,CACTC,OAAQ,aASCC,EAAgB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,WAAYnH,EAAkC,EAAlCA,OACpCG,EAAUrB,IAChB,EAAsCwF,oBAAS,GAA/C,mBAAO8C,EAAP,KAAoBC,EAApB,KAMMC,EAAe,WACnBD,GAAe,IAOjB,OACE,qCACE,cAACE,EAAA,EAAD,CACEC,IAAI,UACJhG,UAAWrB,EAAQ6G,UACnBzD,OAAQ,GACRyC,QAAS,WAjBbqB,GAAe,IAkBXI,KAAK,SACLC,IAAKC,EACL3H,OAAQA,GAAU,YAEnBoH,GAAe,cAAC,EAAD,CAAajD,OAAQiD,EAAahD,QAASkD,EAAcjD,OAftD,SAAC3E,GACtByH,EAAWzH,EAAO4H,W,yEC3BhBM,EAAUC,UAAOC,IAAV,mIASPC,EAAgBF,kBAAOG,UAAPH,CAAH,4CAeJI,IAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACd,eAACN,EAAD,WACGM,GAAa,cAAC,OAAD,CAAMC,KAAK,YAAYtC,KAAK,OAC1C,cAACkC,EAAD,S,mICbEK,EAAcP,kBAAOxB,IAAPwB,CAAH,wOAIKQ,SAGNC,MA6BDC,IAxBE,WACf,MAA6DC,YAAYC,KAAxDC,EAAjB,EAAQC,QAAsBC,EAA9B,EAA8BA,WAAkBC,EAAhD,EAA0CrJ,KACpCsJ,EAAiBC,cAEvB,OACE,qCACE,cAAC,IAAD,CACEC,KAAMN,EACNlJ,KAAMqJ,EACNI,YAAaC,YAAgBR,GAC7BS,YAAU,EACVC,aAAW,IAEZR,GACC,cAACR,EAAD,UACE,eAAC,IAAD,CAAWxC,UAAQ,EAAnB,sBACW,cAAC,IAAD,CAAM,cAAY,sBAAlB,mBAA4CgD,EAA5C,YAA0DE,EAAeO,oB,slBC7BjFC,EAAc,cAEdC,EAAcC,YAAgB,CACzCC,MAAO,kBACPC,QAAS,CACPC,gBAAgB,WAAD,4BAAE,WAAOA,GAAP,eAAAC,EAAA,uEAGVC,YAAeF,IAAoBG,YAAwBH,IAHjD,qCAIJI,YAAqBJ,GAJjB,+BAEPK,EAFO,+CAOJA,GAPI,gCAUNL,GAVM,yCAYbzE,QAAQvE,MAAM,KAAEsJ,SAZH,kBAaNN,GAbM,0DAAF,mDAAC,MAmBPzH,EAA8E,CACzFgI,OAAQ,SAACC,EAAMC,EAAOC,GACpBA,EAAMC,YAAYF,EAAO,SAAS,kBAAMD,EAAK,OAE/CI,mBAAoB,SAACJ,EAAMC,EAAOC,GAChCA,EAAMC,YAAYF,EAAO,mBAAmB,kBAAMD,EAAK,OAEzDK,kBAAmB,SAACL,EAAMC,EAAOC,GAAW,IAAD,GAEvC,UAAAD,EAAMK,qBAAN,eAAqBC,OAAOC,iBAAkBP,EAAMK,cAAcC,OAAOC,eAAenL,OAAS2K,EAAK,GAAG3K,OAGzG6K,EAAMC,YAAYF,EAAO,eAAe,iBAAM,MAC9CC,EAAMC,YAAYF,EAAO,SAAS,iBAAM,OAG1CC,EAAMC,YAAYF,EAAO,kBAAkB,kBAAMD,EAAK,OAExDS,eAAgB,SAACT,EAAMC,EAAOC,GAC5BA,EAAMC,YAAYF,EAAO,eAAe,kBAAMD,EAAK,OAErDU,YAAa,SAACV,EAAMC,EAAOC,GACzBA,EAAMC,YAAYF,EAAO,OAAO,kBAAMD,EAAK,QAIlCW,EAAY,SAAC3C,GAAD,OAAuD,IAA5BA,EAAK4C,QAAQ,YACpDC,EAAY,SAAC7C,GAAD,OAAoD,IAAzBA,EAAK4C,QAAQ,SAEpDE,EAAS,SAAC9C,GAAD,OAAoD,IAAzBA,EAAK4C,QAAQ,SACjDG,EAAQ,SAAC/C,GAAD,OAAmD,IAAxBA,EAAK4C,QAAQ,QAChDI,EAAS,SAAChD,GAAD,OAAoD,IAAzBA,EAAK4C,QAAQ,SAEjDK,EAAmB,SAACC,GAAD,MAAgC,aAAaC,KAAKD,IAerEE,EAAoB,SAAC5K,EAAyB+J,GACzD,IAAK,IAAMc,KAAOd,EAChB,GAAIA,EAAOe,eAAeD,SAAkBnL,IAAVM,GAAuB+J,EAAOc,KAAS7K,EAAMjB,MAC7E,OAAO,eAAG8L,EAAM7K,EAAM+K,QAK1B,OAAO,eAAGC,IAAahL,EAAQA,EAAMsJ,aAAU5J,IAGpCuL,EAAuB,SAACzD,EAAc0D,EAAuBC,GACxE,IAAMC,EAAUX,EAAiBjD,GAAQ,aAAeA,EACxD,MAAM,eAAN,OAAsB0D,EAAtB,YAAuCC,EAAvC,YAAgDC,IAG5CC,EACJ,SAACH,EAAuBnB,GAAxB,OACA,WAAWoB,GAAW,IAAnB3D,EAAkB,EAAlBA,KACKqD,EAAMI,EAAqBzD,EAAM0D,EAAeC,GAEtD,OAnC0C,SAACT,GAC7C,IAEE,OADoBY,KAAKC,MAAMb,GACZc,KAAI,SAACzM,GACtB,OAAI0M,OAAOC,UAAU3M,GACZ,IAAI4M,YAAU5M,GAAO6M,WAEvB7M,KAET,MAAO+G,GACP,OAAO,MAyBA+F,CAA+B9B,EAAOc,KAASd,EAAOc,KAGpDiB,EAAiB,SAC5BC,EACA/C,EACAe,GACwB,IAAD,EAEjBiC,EAAW,IADJC,cACaC,IAAIC,UAAS,CAACJ,GAAS/C,GACzCoD,EAAqCL,EAArCK,OAAR,EAA6CL,EAA7BlN,YAAhB,MAAuB,GAAvB,EAA2BqM,EAAkBa,EAAlBb,cACrB1B,GAAa,OAAN4C,QAAM,IAANA,OAAA,EAAAA,EAAQZ,IAAIH,EAAkBH,EAAenB,MAAY,GAEtE,OAAO,EAAAiC,EAASK,SAAQxN,GAAjB,oBAA0B2K,KAGtB8C,EAAe,SAACP,GAAD,OAAsCA,GAA4B,SAAlBA,EAAOQ,QAEtEC,EAAuB,SAAC3B,EAAarD,EAAciF,GAC1DhC,EAAiBjD,KACnBqD,EAAMA,EAAI6B,QAAQ,KAAM,KAG1B,IAAI3N,EAAQ0N,EAAG5B,GAMf,MAJa,SAATrD,IACFzI,EAAQ4N,OAAO5N,IAGVA,I,kCCpIT,cAEI6N,EAAa,SAAUC,GACzB,QAASA,IAAuB,kBAARA,GAAmC,oBAARA,IAA2C,oBAAbA,EAAIC,MAKnFC,EAAe,SAAsB9D,EAAG+D,GAC1C,OAAO/D,IAAM+D,GAoFAnE,IAjFO,WACpB,IAAK,IAAIoE,EAAOC,UAAUC,OAAQC,EAAe,IAAIC,MAAMJ,GAAOK,EAAO,EAAGA,EAAOL,EAAMK,IACvFF,EAAaE,GAAQJ,UAAUI,GAGjC,OAAO,SAAUrL,GACf,IAAIsL,EAAiB,GAqErB,OApEkBtL,EAAKuL,WAAU,SAAUC,GACzC,IAAI1D,EAAS0D,EAAK1D,OAClB9H,EAAKyL,OAAM,WACT,IAAIC,EAAa,SAAoB7E,EAAO8E,EAAS7E,GACnD,IAAI8E,EAAO9D,GAAU+D,YAAM/D,EAAQjB,GAC/BiF,EAAWR,GAAkBO,YAAMP,EAAgBzE,GAEvD,IAAK8E,EAAQC,EAAME,GACjB,GAAuB,oBAAZhF,EAAwB,CACjC,IAAIiF,EAAUjF,EAAQ8E,EAAM/E,EAAOiB,EAAQwD,GAEvCX,EAAUoB,GACZA,EAAQlB,MAAK,SAAUmB,GACrBC,OAAOC,KAAKF,GAAUG,SAAQ,SAAUC,GACtCpM,EAAKqM,OAAOD,EAAWJ,EAASI,UAIpCH,OAAOC,KAAKH,GAASI,SAAQ,SAAUC,GACrCpM,EAAKqM,OAAOD,EAAWL,EAAQK,YAInCH,OAAOC,KAAKpF,GAASqF,SAAQ,SAAUC,GACrC,IACIE,GAASC,EADAzF,EAAQsF,IACDR,EAAM9D,EAAQwD,GAE9BX,EAAU2B,GACZA,EAAOzB,MAAK,SAAUmB,GACpBhM,EAAKqM,OAAOD,EAAWJ,MAGzBhM,EAAKqM,OAAOD,EAAWE,OAO7BE,EAASxM,EAAKyM,sBAClBtB,EAAagB,SAAQ,SAAUO,GAC7B,IAAI7F,EAAQ6F,EAAM7F,MACd8E,EAAUe,EAAMf,QAChB7E,EAAU4F,EAAM5F,QAEpB,GAAqB,kBAAVD,EACT6E,EAAW7E,EAAO8E,GAAWb,EAAchE,OACtC,CAEL,IAAI6F,EAAUvB,MAAMwB,QAAQ/F,GAAS,SAAUjK,GAC7C,OAAQiK,EAAMsB,QAAQvL,KAEd,IAFuBiK,EAAMgG,WAAU,SAAUC,GACvD,OAAOA,aAAaC,QAAUD,EAAEpE,KAAK9L,OAErC,SAAUA,GACZ,OAAOiK,EAAM6B,KAAK9L,IAEpB4P,EAAOL,SAAQ,SAAUa,GACnBL,EAAQK,IACVtB,EAAWsB,EAAWrB,GAAWb,EAAchE,UAKvDwE,EAAiBxD,OAElB,CACDA,QAAQ,O,wPCnFDmF,EAAyB9Q,YACpCC,YAAa,CACXC,KAAM,CACJL,SAAU,SACVkR,aAAc,EACdC,SAAU,OACVlR,MAAO,YAKAmR,EAAyBjR,YACpCC,YAAa,CACXC,KAAM,CACJ8Q,SAAU,OACVlR,MAAO,Y,sHCwBPoR,EAAuB,SAAC,GAQkB,IAP9CC,EAO6C,EAP7CA,mBACAC,EAM6C,EAN7CA,aAM6C,IAL7CC,aAK6C,MALrC,YAKqC,EAJ7CC,EAI6C,EAJ7CA,kBACAC,EAG6C,EAH7CA,iBACAC,EAE6C,EAF7CA,kBACAC,EAC6C,EAD7CA,eAEMC,EAAYjI,YAAYkI,KAExBC,EAAoB,SAACC,GACzBN,EAAiBM,GACjBT,EAAaS,EAAajI,UAGtBkI,EAAkB,SAACC,GACvB,IAAMC,EAAsBC,YAAsBF,GAGlD,GAFAT,GAAmBU,IAEfA,EAAJ,CAMA,IAAQpI,EAAYsI,YAAqBH,GAAjCnI,QACFuI,EAAcC,YAAgBxI,IAAYA,EAC1CyI,EAAkBC,YAAqBnB,EAAoB,CAAEoB,WAAYJ,IAC/E,OAAkC,IAA3BE,EAAgBtD,OAAesD,EAAgB,GAAKF,EARzDX,EAAkBQ,IAqBhBQ,EAAuF,uCAAG,WAC9FC,EACA9R,EACAgM,GAH8F,qBAAA9B,EAAA,2DAKtF8B,EALsF,OAMvF,UANuF,0BAOpF+F,EAAkBC,YAAWhS,GAPuD,uDAexFiS,YAAWC,WAASC,iBACnBhI,YAAe4H,KAAoB3H,YAAwB2H,GAhB4B,wBAkBpF9I,EAAU,GAlB0E,mBAoBtEoB,YAAqB0H,GApBiD,QAoBtF9I,EApBsF,yDAsBtFmJ,YAASC,IAAOC,KAAM,KAAI/H,SAtB4D,WAyBlFgI,EAAmBpB,EAAgBlI,GAzB+C,wBA4BtFwH,EAAa,IA5ByE,oCAyCxFQ,EAR8B,kBAArBsB,EACH,CACEtJ,UACAnJ,KAAMiS,EACNS,QAASzB,GAEXwB,GAvCkF,gCA8CpFA,EAAmBpB,EAAgBY,GA9CiD,wBAiDxFtB,EAAa,IAjD2E,oCA8D1FQ,EAR8B,kBAArBsB,EACH,CACEtJ,QAASsJ,EACTzS,KAAM,GACN0S,QAASzB,GAEXwB,GA5DoF,+EAAH,0DAqEvFE,EAActC,IACduC,EAAcpC,IAEpB,OACE,cAACqC,EAAA,EAAD,CACEC,UAAW,KACXC,aAAa,EACbC,cAAenB,IACfoB,UAAQ,EACRhT,SAxFkF,SAAC+R,EAAG9R,EAAOgM,GAC/F,GACO,kBADCA,EACN,CACE,MAAmChM,EAA3BiJ,EAAR,EAAQA,QAASnJ,EAAjB,EAAiBA,KAAM0S,EAAvB,EAAuBA,QACvBvB,EAAkB,CAAEhI,UAASnJ,OAAM0S,cAqFrCX,cAAeA,EACfmB,QAASxC,EACTyC,GAAG,qBACHC,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEC,WAAW,EACXnS,QAAS6P,EACTuC,WAAS,EACThM,QAAQ,SACRqJ,MAAOI,GAAkCJ,EACzC4C,gBAAiB,CAAEC,QAAQ,EAAMC,UAAU,EAAM/S,QAASgS,GAC1D1Q,WAAU,2BAAOoR,EAAOpR,YAAd,IAA0BtB,QAASiS,IAC7C/Q,WAAU,2BAAOwR,EAAOxR,YAAd,IAA0B,cAAe,2BAGvD8R,eAAgB,qBAAGxK,SACnByK,aAAc,gBAAGzK,EAAH,EAAGA,QAASnJ,EAAZ,EAAYA,KAAZ,OAAuB,cAAC6T,EAAA,EAAD,CAAqBrK,KAAML,EAASnJ,KAAMA,EAAM2J,YAAU,KAC/F1B,KAAK,UACL/F,MAAO,CAAE4R,QAAS,OAAQC,SAAU,MAK7BC,EAAmB,SAAC9U,GAC/B,IAAMwR,EAAqB1H,YAAYiL,KACvC,EAA4CnP,mBAAiB,IAA7D,mBAAOkM,EAAP,KAAuBD,EAAvB,KAQA,OANAxL,qBAAU,WACJrG,EAAMgV,UACRnD,EAAkB7R,EAAMgV,YAEzB,CAAChV,EAAMgV,WAGR,cAAC,EAAD,aACExD,mBAAoBA,EACpBK,kBAAmBA,EACnBC,eAAgBA,GACZ9R,KAKGiV,EAA4B,SAAC,GAIH,IAHrCtD,EAGoC,EAHpCA,kBACAC,EAEoC,EAFpCA,iBACG5R,EACiC,iBAC9BwR,EAAqB1H,YAAYiL,KACvC,EAA8CnP,mBAA6B,IAA3E,mBAAO8M,EAAP,KAAwBwC,EAAxB,KACA,EAA4CtP,mBAAiB,IAA7D,mBAAOkM,EAAP,KAAuBD,EAAvB,KAEAxL,qBAAU,WACR,IAAM8O,EAAuB,uCAAG,4BAAAjK,EAAA,sEACHkK,YAAiC5D,GAD9B,OACxB6D,EADwB,OAE9BH,EAAmBG,GAFW,2CAAH,qDAI7BF,MACC,CAAC3D,IAEJ,IAAM8D,EAAkB,uCAAG,WAAOC,GAAP,eAAArK,EAAA,kEACrBqK,QADqB,IACrBA,OADqB,EACrBA,EAAetL,SADM,gCAGmBuL,YAA8BD,EAActL,SAH/D,OAGjBwL,EAHiB,OAIvB9D,GAAmB8D,GACnB5D,EAAiB,OAAC4D,QAAD,IAACA,IAA+B,IACjD7D,EAAiB2D,GANM,2CAAH,sDAUxB,OACE,cAAC,EAAD,aACE/D,mBAAoBkB,EACpBf,kBAAmBA,EACnBC,iBAAkB0D,EAClBzD,kBAAmBA,EACnBC,eAAgBA,GACZ9R,M,kCChPV,uDAGauE,EAASjE,YAAa,CACjCgI,UAAW,CACTC,OAAQ,WAEVmN,cAAe,CACbxS,QAAQ,GAAD,OAAKyS,KAAL,YAAWlV,MAClBmV,UAAW,cAEb5U,MAAO,CACLsE,WAAYC,MAEdsQ,UAAW,CACTzE,aAAc,MACdzH,OAAO,aAAD,OAAeA,UACrBzG,QAAS,OACT4S,UAAW,QAEb9N,KAAM,CACJ4N,UAAW,YACX1V,SAAU,OACVmR,SAAU,OACV0E,WAAY,SACZrR,UAAW,QACXsR,cAAe,SACfC,YAAa,SACbtV,WAAY,QAEdyE,UAAW,CACTP,OAAQ,OACRJ,eAAgB,SAChByR,IAAK,QAEPC,UAAW,CACT,uBAAwB,CACtBxV,WAAY,OACZgJ,OAAQ,UAGZyM,cAAe,CACb7N,OAAQ,WAEV8L,UAAW,CACT5P,eAAgB,oB,4HCvCdF,EAASjE,YAAa,CAC1B+V,SAAU,CACR,UAAW,CACTxR,OAAQ,QACRrE,WAAY,IACZE,cAAe,IACf4V,WAAY,OACZ,eAAgB,CACdjF,SAAU,OACV2E,cAAe,SACfrV,WAAY,OACZkE,OAAQ,aAMVzE,EAAYC,YAAWkE,GAEhBgS,EAAgB,SAAC,GAAgC,IAA3BvW,EAA0B,oBACrDyB,EAAUrB,IAChB,OAAO,cAAC,IAAD,2BAAWJ,GAAX,IAAkB8C,UAAWrB,EAAQ4U,SAAUG,UAAW5V,IAAWQ,WAAS,EAACC,KAAK,S,kCC3B7F,wCA2CeoV,IAjCC,SAAC,GAAkE,IAAhE/Q,EAA+D,EAA/DA,QAASgR,EAAsD,EAAtDA,eAER1I,EACd2I,YAAS,iBAAkB,CAAEhT,aAAc,CAAE3C,OAAO,KADtDH,MAASG,MAEX,EAAgF4V,YAAa,CAC3FjT,aAAc,CACZzB,yBAAyB,EACzBC,aAAa,EACb6B,YAAY,EACZjC,OAAO,EACPkC,YAAY,KANR/B,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,YAAa6B,EAA9C,EAA8CA,WAAYjC,EAA1D,EAA0DA,MAAOkC,EAAjE,EAAiEA,WAUjE,OACE,cAAC,IAAM4S,OAAP,UACE,cAAC,IAAMA,OAAOJ,QAAd,CACEK,kBAAmB,CAAExP,QAAS5B,GAC9BqR,mBAAoB,CAClBC,SACEhT,GACAC,KACGlC,KAAWI,KAAiBD,GAC9BwU,IAAmB1I,EACtBiJ,OAAQjT,GAAcC,EAAaiT,IAAaC,QAAUD,IAAaE,MACvE9V,OAAO,GAAD,OAAKiN,YAAaP,GAAU,OAAS,SAArC,WACNzM,KAAMgN,YAAaP,GAAU,OAAS,gB,sMCjB1C5N,EAAYC,YAAWkE,KAUhB8S,EAAkB,SAAC,GAMiB,IAAD,IAL9CC,kBAK8C,aAJ9CC,kBAI8C,SAH9CzW,EAG8C,EAH9CA,KACA0W,EAE8C,EAF9CA,eACAjW,EAC8C,EAD9CA,KAEME,EAAUrB,IACVqX,EAAiB,CACrBF,GAAc/C,IACdlC,IACAgF,GAAc9B,KAEVrR,EAAWuT,IAAiB,WAAjB,cAAqBD,EAAeE,QAAO,SAACC,GAAD,OAAeA,OACnE9V,EAAa8U,YAAa,CAAEjT,aAAc,CAAE7B,UAAU,KAAtDA,SAEGd,EACP2V,YAAS,kBAAmB,CAAEhT,aAAc,CAAE3C,OAAO,KADvDH,MAASG,MAEX,EAA0C4E,mBAA4D,CACpGqE,QAASjJ,EACTF,KAAM,KAFR,mBAAOyU,EAAP,KAAsB3D,EAAtB,KAsBA,OACE,mCACE,eAAC,IAAD,CAAKhK,OAAO,KAAZ,UACE,cAAC,IAAD,CAAKgC,GAAI,GAAT,UACgB,OAAb2L,QAAa,IAAbA,OAAA,EAAAA,EAAetL,SACd,cAAC,IAAD,CACEuM,UAAW5V,IACXE,KAAMA,EACN+W,YAAatW,EACbR,SAd0D,SAAC+W,GACrE,IAAQ9W,EAAU8W,EAAMC,OAAhB/W,MACR4Q,EAAiB,CAAE3H,QAASjJ,KAalBM,OAAQR,EACRS,KAAMA,EACNkI,KAAK,OACLtF,SAAUA,IAGZ,cAAC,IAAD,CACEyN,iBAAkBA,EAClBD,kBAAmB,aACnBF,aAAc+F,EACd1V,SAAUA,EACV4P,MAAM,uBAIZ,cAAC,IAAD,CAAKsG,OAAO,KAAKlV,UAAWrB,EAASiG,OAAO,KAAKkC,GAAI,EAArD,SACE,cAAC,IAAD,CAAenB,WA3CJ,SAACzH,EAAO4H,GACzB,IAAIqP,EAAiBjX,EAEjBiX,EAAeC,WAAW,eAC5BD,EAAiBA,EAAetJ,QAAQ,YAAa,KAGvDiD,EAAiB,CAAE3H,QAASgO,IAC5BT,EAAeS,GACfrP","file":"static/js/14.0c358935.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\r\n\r\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import { ReactElement } from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any): ReactElement => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { ReactElement, useState } from 'react'\r\n\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport Img from 'src/components/layout/Img'\r\n\r\nconst useStyles = makeStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\ntype Props = {\r\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\r\n  testId?: string\r\n}\r\n\r\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const [qrModalOpen, setQrModalOpen] = useState(false)\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const onScanFinished = (value: string) => {\r\n    handleScan(value, closeQrModal)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Img\r\n        alt=\"Scan QR\"\r\n        className={classes.qrCodeBtn}\r\n        height={20}\r\n        onClick={() => openQrModal()}\r\n        role=\"button\"\r\n        src={QRIcon}\r\n        testId={testId || 'qr-icon'}\r\n      />\r\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\r\n    </>\r\n  )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\r\n  const nativeCurrency = getNativeCurrency()\r\n\r\n  return (\r\n    <>\r\n      <PrefixedEthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\r\nimport createDecorator from 'final-form-calculate'\r\nimport { ContractSendMethod } from 'web3-eth-contract'\r\n\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\r\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\nexport const NO_CONTRACT = 'no contract'\r\n\r\nexport const ensResolver = createDecorator({\r\n  field: 'contractAddress',\r\n  updates: {\r\n    contractAddress: async (contractAddress) => {\r\n      try {\r\n        const resolvedAddress =\r\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\r\n          (await getAddressFromDomain(contractAddress))\r\n\r\n        if (resolvedAddress) {\r\n          return resolvedAddress\r\n        }\r\n\r\n        return contractAddress\r\n      } catch (e) {\r\n        console.error(e.message)\r\n        return contractAddress\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'value', () => args[0])\r\n  },\r\n  setContractAddress: (args, state, utils) => {\r\n    utils.changeValue(state, 'contractAddress', () => args[0])\r\n  },\r\n  setSelectedMethod: (args, state, utils) => {\r\n    const modified =\r\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\r\n\r\n    if (modified) {\r\n      utils.changeValue(state, 'callResults', () => '')\r\n      utils.changeValue(state, 'value', () => '')\r\n    }\r\n\r\n    utils.changeValue(state, 'selectedMethod', () => args[0])\r\n  },\r\n  setCallResults: (args, state, utils) => {\r\n    utils.changeValue(state, 'callResults', () => args[0])\r\n  },\r\n  setAbiValue: (args, state, utils) => {\r\n    utils.changeValue(state, 'abi', () => args[0])\r\n  },\r\n}\r\n\r\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\r\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\r\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\r\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\r\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\r\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\r\n\r\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\r\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\r\n  try {\r\n    const arrayResult = JSON.parse(parameter)\r\n    return arrayResult.map((value) => {\r\n      if (Number.isInteger(value)) {\r\n        return new BigNumber(value).toString()\r\n      }\r\n      return value\r\n    })\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\r\n  for (const key in values) {\r\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\r\n      return { [key]: error.reason }\r\n    }\r\n  }\r\n\r\n  // .call() failed and we're logging a generic error\r\n  return { [FORM_ERROR]: error ? error.message : undefined }\r\n}\r\n\r\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\r\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\r\n  return `methodInput-${signatureHash}_${index}_${keyType}`\r\n}\r\n\r\nconst extractMethodArgs =\r\n  (signatureHash: string, values: Record<string, string>) =>\r\n  ({ type }, index) => {\r\n    const key = generateFormFieldKey(type, signatureHash, index)\r\n\r\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\r\n  }\r\n\r\nexport const createTxObject = (\r\n  method: AbiItemExtended,\r\n  contractAddress: string,\r\n  values: Record<string, string>,\r\n): ContractSendMethod => {\r\n  const web3 = getWeb3()\r\n  const contract = new web3.eth.Contract([method], contractAddress)\r\n  const { inputs, name = '', signatureHash } = method\r\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\r\n\r\n  return contract.methods[name](...args)\r\n}\r\n\r\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\r\n\r\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\r\n  if (isArrayParameter(type)) {\r\n    key = key.replace('[]', '')\r\n  }\r\n\r\n  let value = tx[key]\r\n\r\n  if (type === 'bool') {\r\n    value = String(value)\r\n  }\r\n\r\n  return value\r\n}\r\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nexport const useTextFieldLabelStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      borderRadius: 4,\r\n      fontSize: '15px',\r\n      width: '500px',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useTextFieldInputStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      fontSize: '14px',\r\n      width: '420px',\r\n    },\r\n  }),\r\n)\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\r\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\r\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport {\r\n  useTextFieldInputStyle,\r\n  useTextFieldLabelStyle,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { checksumAddress } from 'src/utils/checksumAddress'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\r\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\r\n\r\nexport interface AddressBookProps {\r\n  fieldMutator: (address: string) => void\r\n  label?: string\r\n  pristine?: boolean\r\n  recipientAddress?: string\r\n  errorMsg?: string\r\n  setIsValidAddress: (valid: boolean) => void\r\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\r\n}\r\n\r\nexport interface BaseAddressBookInputProps extends AddressBookProps {\r\n  addressBookEntries: AddressBookEntry[]\r\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\r\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\r\n  validationText: string | undefined\r\n}\r\n\r\nconst BaseAddressBookInput = ({\r\n  addressBookEntries,\r\n  fieldMutator,\r\n  label = 'Recipient',\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  setValidationText,\r\n  validationText,\r\n}: BaseAddressBookInputProps): ReactElement => {\r\n  const networkId = useSelector(currentChainId)\r\n\r\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\r\n    setSelectedEntry(addressEntry)\r\n    fieldMutator(addressEntry.address)\r\n  }\r\n\r\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\r\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\r\n    setIsValidAddress(!addressErrorMessage)\r\n\r\n    if (addressErrorMessage) {\r\n      setValidationText(addressErrorMessage)\r\n      return\r\n    }\r\n\r\n    // Automatically checksum valid addresses\r\n    const { address } = parsePrefixedAddress(fullAddress)\r\n    const checkedAddr = checksumAddress(address) || address\r\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\r\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\r\n  }\r\n\r\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option': {\r\n        const { address, name, chainId } = value as AddressBookEntry\r\n        updateAddressInfo({ address, name, chainId })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\r\n    _,\r\n    value,\r\n    reason,\r\n  ) => {\r\n    switch (reason) {\r\n      case 'input': {\r\n        const normalizedValue = trimSpaces(value)\r\n\r\n        if (!normalizedValue) {\r\n          break\r\n        }\r\n\r\n        // ENS-enabled resolve/validation\r\n        if (\r\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\r\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\r\n        ) {\r\n          let address = ''\r\n          try {\r\n            address = await getAddressFromDomain(normalizedValue)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n\r\n          const validatedAddress = validateAddress(address)\r\n\r\n          if (!validatedAddress) {\r\n            fieldMutator('')\r\n            break\r\n          }\r\n\r\n          const newEntry =\r\n            typeof validatedAddress === 'string'\r\n              ? {\r\n                  address,\r\n                  name: normalizedValue,\r\n                  chainId: networkId,\r\n                }\r\n              : validatedAddress\r\n\r\n          updateAddressInfo(newEntry)\r\n          break\r\n        }\r\n\r\n        // ETH address validation\r\n        const validatedAddress = validateAddress(normalizedValue)\r\n\r\n        if (!validatedAddress) {\r\n          fieldMutator('')\r\n          break\r\n        }\r\n\r\n        const newEntry =\r\n          typeof validatedAddress === 'string'\r\n            ? {\r\n                address: validatedAddress,\r\n                name: '',\r\n                chainId: networkId,\r\n              }\r\n            : validatedAddress\r\n\r\n        updateAddressInfo(newEntry)\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const labelStyles = useTextFieldLabelStyle()\r\n  const inputStyles = useTextFieldInputStyle()\r\n\r\n  return (\r\n    <Autocomplete<AddressBookEntry, false, false, true>\r\n      closeIcon={null}\r\n      openOnFocus={false}\r\n      filterOptions={filterAddressEntries}\r\n      freeSolo\r\n      onChange={onChange}\r\n      onInputChange={onInputChange}\r\n      options={addressBookEntries}\r\n      id=\"address-book-input\"\r\n      renderInput={(params) => (\r\n        <MuiTextField\r\n          {...params}\r\n          autoFocus={true}\r\n          error={!!validationText}\r\n          fullWidth\r\n          variant=\"filled\"\r\n          label={validationText ? validationText : label}\r\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\r\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\r\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\r\n        />\r\n      )}\r\n      getOptionLabel={({ address }) => address}\r\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\r\n      role=\"listbox\"\r\n      style={{ display: 'flex', flexGrow: 1 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (props.errorMsg) {\r\n      setValidationText(props.errorMsg)\r\n    }\r\n  }, [props.errorMsg])\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={addressBookEntries}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const ContractsAddressBookInput = ({\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  ...props\r\n}: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\r\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    const filterContractAddresses = async (): Promise<void> => {\r\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\r\n      setFilteredEntries(filteredADBK)\r\n    }\r\n    filterContractAddresses()\r\n  }, [addressBookEntries])\r\n\r\n  const onSetSelectedEntry = async (selectedEntry) => {\r\n    if (selectedEntry?.address) {\r\n      // verify if `address` is a contract\r\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\r\n      setIsValidAddress(!contractAddressErrorMessage)\r\n      setValidationText(contractAddressErrorMessage ?? '')\r\n      setSelectedEntry(selectedEntry)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={filteredEntries}\r\n      setIsValidAddress={setIsValidAddress}\r\n      setSelectedEntry={onSetSelectedEntry}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import { lg, md, sm, border } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n    wordBreak: 'break-word',\r\n  },\r\n  value: {\r\n    marginLeft: sm,\r\n  },\r\n  outerData: {\r\n    borderRadius: '5px',\r\n    border: `1px solid ${border}`,\r\n    padding: '11px',\r\n    minHeight: '21px',\r\n  },\r\n  data: {\r\n    wordBreak: 'break-all',\r\n    overflow: 'auto',\r\n    fontSize: '14px',\r\n    fontFamily: 'Averta',\r\n    maxHeight: '100px',\r\n    letterSpacing: 'normal',\r\n    fontStretch: 'normal',\r\n    lineHeight: '1.43',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  dataInput: {\r\n    '& TextField-root-294': {\r\n      lineHeight: 'auto',\r\n      border: 'green',\r\n    },\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n  fullWidth: {\r\n    justifyContent: 'space-between',\r\n  },\r\n})\r\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport { ReactElement } from 'react'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport TextField from 'src/components/forms/TextField'\r\n\r\nconst styles = createStyles({\r\n  textarea: {\r\n    '& > div': {\r\n      height: '140px',\r\n      paddingTop: '0',\r\n      paddingBottom: '0',\r\n      alignItems: 'auto',\r\n      '& > textarea': {\r\n        fontSize: '15px',\r\n        letterSpacing: '-0.5px',\r\n        lineHeight: '20px',\r\n        height: '102px',\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport const TextAreaField = ({ ...props }): ReactElement => {\r\n  const classes = useStyles()\r\n  return <Field {...props} className={classes.textarea} component={TextField} multiline rows=\"5\" />\r\n}\r\n","import { useField, useFormState } from 'react-final-form'\r\n\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { isReadMethod } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\n\r\nexport interface ButtonProps {\r\n  onClose: () => void\r\n  requiresMethod?: boolean\r\n}\r\n\r\nconst Buttons = ({ onClose, requiresMethod }: ButtonProps): React.ReactElement => {\r\n  const {\r\n    input: { value: method },\r\n  } = useField('selectedMethod', { subscription: { value: true } })\r\n  const { modifiedSinceLastSubmit, submitError, submitting, valid, validating } = useFormState({\r\n    subscription: {\r\n      modifiedSinceLastSubmit: true,\r\n      submitError: true,\r\n      submitting: true,\r\n      valid: true,\r\n      validating: true,\r\n    },\r\n  })\r\n\r\n  return (\r\n    <Modal.Footer>\r\n      <Modal.Footer.Buttons\r\n        cancelButtonProps={{ onClick: onClose }}\r\n        confirmButtonProps={{\r\n          disabled:\r\n            submitting ||\r\n            validating ||\r\n            ((!valid || !!submitError) && !modifiedSinceLastSubmit) ||\r\n            (requiresMethod && !method),\r\n          status: submitting || validating ? ButtonStatus.LOADING : ButtonStatus.READY,\r\n          testId: `${isReadMethod(method) ? 'call' : 'review'}-tx-btn`,\r\n          text: isReadMethod(method) ? 'Call' : 'Review',\r\n        }}\r\n      />\r\n    </Modal.Footer>\r\n  )\r\n}\r\n\r\nexport default Buttons\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { useState } from 'react'\r\nimport { useFormState, useField } from 'react-final-form'\r\n\r\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\r\nimport { ContractsAddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\r\nimport Field from 'src/components/forms/Field'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport {\r\n  composeValidators,\r\n  mustBeEthereumAddress,\r\n  mustBeEthereumContractAddress,\r\n  required,\r\n  Validator,\r\n} from 'src/components/forms/validator'\r\nimport Col from 'src/components/layout/Col'\r\nimport Row from 'src/components/layout/Row'\r\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport interface EthAddressInputProps {\r\n  isContract?: boolean\r\n  isRequired?: boolean\r\n  name: string\r\n  onScannedValue: (scannedValue: string) => void\r\n  text: string\r\n}\r\n\r\nexport const EthAddressInput = ({\r\n  isContract = true,\r\n  isRequired = true,\r\n  name,\r\n  onScannedValue,\r\n  text,\r\n}: EthAddressInputProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const validatorsList = [\r\n    isRequired && required,\r\n    mustBeEthereumAddress,\r\n    isContract && mustBeEthereumContractAddress,\r\n  ] as Validator[]\r\n  const validate = composeValidators(...validatorsList.filter((validator) => validator))\r\n  const { pristine } = useFormState({ subscription: { pristine: true } })\r\n  const {\r\n    input: { value },\r\n  } = useField('contractAddress', { subscription: { value: true } })\r\n  const [selectedEntry, setSelectedEntry] = useState<{ address?: string; name?: string | null } | null>({\r\n    address: value,\r\n    name: '',\r\n  })\r\n\r\n  const handleScan = (value, closeQrModal) => {\r\n    let scannedAddress = value\r\n\r\n    if (scannedAddress.startsWith('ethereum:')) {\r\n      scannedAddress = scannedAddress.replace('ethereum:', '')\r\n    }\r\n\r\n    setSelectedEntry({ address: scannedAddress })\r\n    onScannedValue(scannedAddress)\r\n    closeQrModal()\r\n  }\r\n\r\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n    const { value } = event.target\r\n    setSelectedEntry({ address: value })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row margin=\"md\">\r\n        <Col xs={11}>\r\n          {selectedEntry?.address ? (\r\n            <Field\r\n              component={TextField}\r\n              name={name}\r\n              placeholder={text}\r\n              onChange={handleInputChange}\r\n              testId={name}\r\n              text={text}\r\n              type=\"text\"\r\n              validate={validate}\r\n            />\r\n          ) : (\r\n            <ContractsAddressBookInput\r\n              setSelectedEntry={setSelectedEntry}\r\n              setIsValidAddress={() => {}}\r\n              fieldMutator={onScannedValue}\r\n              pristine={pristine}\r\n              label=\"Contract address\"\r\n            />\r\n          )}\r\n        </Col>\r\n        <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n          <ScanQRWrapper handleScan={handleScan} />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}