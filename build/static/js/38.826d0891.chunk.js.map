{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow.tsx","routes/safe/components/Balances/SendModal/screens/SendFunds/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/index.tsx","components/forms/Field/index.tsx","routes/safe/components/Balances/SendModal/screens/ModalHeader/style.ts","routes/safe/components/Balances/SendModal/screens/ModalHeader/index.tsx","components/forms/TextField/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/index.tsx"],"names":["SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","SpendingLimitRow","tokenSpendingLimit","selectedToken","availableAmount","useMemo","fromTokenUnit","BigNumber","amount","minus","spent","toString","decimals","mutators","useForm","Row","margin","Col","between","style","flexDirection","size","Field","name","initialValue","input","value","onRadioChange","setTxType","options","label","symbol","styles","createStyles","manage","fontSize","lg","qrCodeBtn","cursor","formContainer","padding","md","minHeight","buttonRow","height","justifyContent","gap","selectAddress","formMutators","setMax","args","state","utils","changeValue","onTokenChange","formState","values","setRecipient","useStyles","makeStyles","InputAdornmentChildSymbol","SendFunds","initialValues","onClose","onReview","recipientAddress","classes","tokens","useSelector","extendedSafeTokensSelector","addressBook","currentNetworkAddressBook","nativeCurrency","getNativeCurrency","useState","defaultEntry","address","predefinedAddress","addressBookEntry","find","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","addressErrorMsg","setAddressErrorMsg","useEffect","spendingLimits","currentSafeSpendingLimits","currentUser","userAccountSelector","ModalHeader","subTitle","title","Hairline","GnoForm","token","onSubmit","submitValues","recipientName","validation","tokenAddress","txType","tokenValidation","composeValidators","required","isSpendingLimit","tokenDecimals","Number","getBalanceAndDecimalsFromToken","mustBeFloat","minMaxDecimalsLength","minValue","maxValue","spendingLimitAllowedBalance","balance","userSpendingLimits","filter","delegate","getSpendingLimitByTokenAddress","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","setMaxAllowedAmount","maxAmount","tokenBalance","spendingLimitBalance","gt","Block","className","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","onClick","role","tabIndex","Paragraph","color","noMargin","letterSpacing","align","PrefixedEthHashInfo","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","xs","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","TokenSelectField","isValid","ButtonLink","weight","testId","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","valid","GnoField","props","heading","boxSizing","maxHeight","annotation","secondaryText","marginRight","marginLeft","headingText","closeIcon","width","chainIndicator","alignItems","icon","iconUrl","connectedNetwork","getChainInfo","grow","alt","src","chainId","ChainIndicator","IconButton","disableRipple","overflowStyle","overflow","root","paddingTop","paddingBottom","lineHeight","onChange","restInput","meta","multiline","rows","rest","helperText","undefined","showError","touched","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","setImageToPlaceholder","event","img","currentTarget","test","TokenPlaceholder","stylesBasedOn","flex","children","decorators","subscription","render","handleSubmit","submitting","validating","form","validate","Bold","this","React","loaderContainer","close","detailsContainer","backgroundColor","background","button","sm","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","onFileScannedResolve","successData","console","description","handleClose","open","layout","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","Img","QRIcon","Wrapper","div","StyledDivider","DividerSRC","SelectInput","disableError","formControlProps","renderValue","dirtySinceLastSubmit","htmlFor","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","a","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","getOptionLabel","renderOption","display","flexGrow","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","ListItemIcon","other","_objectWithoutProperties","context","ListContext","_extends","clsx","alignItemsFlexStart","withStyles","palette","action","flexShrink","marginTop","useSelectedTokenStyles","container","tokenData","tokenImage","useSelectStyles","selectMenu","paddingRight","SelectedToken","MenuItem","logoUri","ListItemText","secondary","formatAmount","tokenClasses","SelectField","displayEmpty","map"],"mappings":"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","file":"static/js/38.826d0891.chunk.js","sourcesContent":["import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport { ReactElement, useMemo } from 'react'\r\nimport { useForm } from 'react-final-form'\r\nimport styled from 'styled-components'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport Col from 'src/components/layout/Col'\r\nimport Row from 'src/components/layout/Row'\r\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\n\r\n// TODO: propose refactor in safe-react-components based on this requirements\r\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\r\n  & .MuiRadio-colorPrimary.Mui-checked {\r\n    color: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\ninterface SpendingLimitRowProps {\r\n  tokenSpendingLimit: SpendingLimit\r\n  selectedToken: Token\r\n}\r\n\r\nexport const SpendingLimitRow = ({ tokenSpendingLimit, selectedToken }: SpendingLimitRowProps): ReactElement => {\r\n  const availableAmount = useMemo(() => {\r\n    return fromTokenUnit(\r\n      new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\r\n      selectedToken.decimals,\r\n    )\r\n  }, [selectedToken.decimals, tokenSpendingLimit.amount, tokenSpendingLimit.spent])\r\n  const { mutators } = useForm()\r\n\r\n  return (\r\n    <Row margin=\"sm\">\r\n      <Col between=\"lg\" style={{ flexDirection: 'column' }}>\r\n        <Text size=\"lg\">Send as</Text>\r\n        <Field name=\"txType\" initialValue=\"multiSig\">\r\n          {({ input: { name, value } }) => (\r\n            <SpendingLimitRadioButtons\r\n              name={name}\r\n              value={value || 'multiSig'}\r\n              onRadioChange={mutators.setTxType}\r\n              options={[\r\n                { label: 'Multisig transaction', value: 'multiSig' },\r\n                {\r\n                  label: `Spending limit transaction (${availableAmount} ${selectedToken.symbol})`,\r\n                  value: 'spendingLimit',\r\n                },\r\n              ]}\r\n            />\r\n          )}\r\n        </Field>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","import { lg, md } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  manage: {\r\n    fontSize: lg,\r\n  },\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n    minHeight: '216px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n","import InputAdornment from '@material-ui/core/InputAdornment'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport { ReactElement, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport Field from 'src/components/forms/Field'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport {\r\n  composeValidators,\r\n  maxValue,\r\n  minValue,\r\n  minMaxDecimalsLength,\r\n  mustBeFloat,\r\n  mustBeEthereumAddress,\r\n  required,\r\n} from 'src/components/forms/validator'\r\nimport Block from 'src/components/layout/Block'\r\nimport ButtonLink from 'src/components/layout/ButtonLink'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\r\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\n\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\r\nimport { SpendingLimitRow } from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow'\r\nimport TokenSelectField from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\r\nimport { currentSafeSpendingLimits } from 'src/logic/safe/store/selectors'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nimport { styles } from './style'\r\nimport { spendingLimitAllowedBalance, getSpendingLimitByTokenAddress } from 'src/logic/safe/utils/spendingLimits'\r\nimport { getBalanceAndDecimalsFromToken } from 'src/logic/tokens/utils/tokenHelpers'\r\nimport Divider from 'src/components/Divider'\r\nimport { Modal } from 'src/components/Modal'\r\nimport { ModalHeader } from '../ModalHeader'\r\n\r\nconst formMutators = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => args[0])\r\n  },\r\n  onTokenChange: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => state.formState.values.amount)\r\n  },\r\n  setRecipient: (args, state, utils) => {\r\n    utils.changeValue(state, 'recipientAddress', () => args[0])\r\n  },\r\n  setTxType: (args, state, utils) => {\r\n    utils.changeValue(state, 'txType', () => args[0])\r\n  },\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type SendFundsTx = {\r\n  amount?: string\r\n  recipientAddress?: string\r\n  name?: string\r\n  token?: string\r\n  txType?: string\r\n  tokenSpendingLimit?: SpendingLimit\r\n}\r\n\r\ntype SendFundsProps = {\r\n  initialValues: SendFundsTx\r\n  onClose: () => void\r\n  onReview: (txInfo: unknown) => void\r\n  recipientAddress?: string\r\n  selectedToken?: string\r\n  amount?: string\r\n}\r\n\r\nconst InputAdornmentChildSymbol = ({ symbol }: { symbol?: string }): ReactElement => {\r\n  return <>{symbol}</>\r\n}\r\n\r\nconst SendFunds = ({\r\n  initialValues,\r\n  onClose,\r\n  onReview,\r\n  recipientAddress,\r\n  selectedToken = '',\r\n  amount,\r\n}: SendFundsProps): ReactElement => {\r\n  const classes = useStyles()\r\n  const tokens = useSelector(extendedSafeTokensSelector)\r\n  const addressBook = useSelector(currentNetworkAddressBook)\r\n  const nativeCurrency = getNativeCurrency()\r\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\r\n    const defaultEntry = { address: recipientAddress || '', name: '' }\r\n\r\n    // if there's nothing to lookup for, we return the default entry\r\n    if (!initialValues?.recipientAddress && !recipientAddress) {\r\n      return defaultEntry\r\n    }\r\n\r\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\r\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\r\n    const addressBookEntry = addressBook.find(({ address }) => {\r\n      return sameAddress(predefinedAddress, address)\r\n    })\r\n\r\n    // if found in the Address Book, then we return the entry\r\n    if (addressBookEntry) {\r\n      return addressBookEntry\r\n    }\r\n\r\n    // otherwise we return the default entry\r\n    return defaultEntry\r\n  })\r\n  const [pristine, setPristine] = useState(true)\r\n  const [isValidAddress, setIsValidAddress] = useState(false)\r\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (selectedEntry === null && pristine) {\r\n      setPristine(false)\r\n    }\r\n  }, [selectedEntry, pristine])\r\n\r\n  let tokenSpendingLimit\r\n  const handleSubmit = (values) => {\r\n    const submitValues = { ...values }\r\n    // If the input wasn't modified, there was no mutation of the recipientAddress\r\n    if (!values.recipientAddress) {\r\n      submitValues.recipientAddress = selectedEntry?.address\r\n    }\r\n    submitValues.recipientName = selectedEntry?.name\r\n    onReview({ ...submitValues, tokenSpendingLimit })\r\n  }\r\n\r\n  const spendingLimits = useSelector(currentSafeSpendingLimits)\r\n  const currentUser = useSelector(userAccountSelector)\r\n\r\n  const sendFundsValidation = (values: { amount?: string; token?: string; txType?: string }) => {\r\n    const { amount, token: tokenAddress, txType } = values ?? {}\r\n    const tokenValidation = composeValidators(required)(tokenAddress)\r\n\r\n    const isSpendingLimit = tokenSpendingLimit && txType === 'spendingLimit'\r\n    const tokenDecimals =\r\n      (tokenAddress && Number(getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.decimals)) ||\r\n      nativeCurrency.decimals\r\n    const amountValidation = composeValidators(\r\n      required,\r\n      mustBeFloat,\r\n      minMaxDecimalsLength(1, tokenDecimals),\r\n      minValue(0, false),\r\n      tokenAddress\r\n        ? maxValue(\r\n            isSpendingLimit\r\n              ? spendingLimitAllowedBalance({ tokenAddress, tokenSpendingLimit, tokens })\r\n              : getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.balance ?? 0,\r\n          )\r\n        : () => undefined,\r\n    )(amount)\r\n\r\n    return {\r\n      amount: amountValidation,\r\n      token: tokenValidation,\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader onClose={onClose} subTitle=\"1 of 2\" title=\"Send funds\" />\r\n      <Hairline />\r\n      <GnoForm\r\n        formMutators={formMutators}\r\n        initialValues={{\r\n          amount: initialValues?.amount || amount,\r\n          recipientAddress: initialValues.recipientAddress || recipientAddress,\r\n          token: initialValues?.token || selectedToken,\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        validation={sendFundsValidation}\r\n      >\r\n        {(...args) => {\r\n          const formState = args[2]\r\n          const mutators = args[3]\r\n          const { token: tokenAddress, txType } = formState.values\r\n          const selectedToken = tokens?.find((token) => token.address === tokenAddress)\r\n          const userSpendingLimits = spendingLimits?.filter(({ delegate }) => sameAddress(delegate, currentUser))\r\n\r\n          tokenSpendingLimit = getSpendingLimitByTokenAddress({\r\n            spendingLimits: userSpendingLimits,\r\n            tokenAddress: selectedToken?.address,\r\n          })\r\n\r\n          const handleScan = (value, closeQrModal) => {\r\n            let scannedAddress = value\r\n\r\n            if (scannedAddress.startsWith('ethereum:')) {\r\n              scannedAddress = scannedAddress.replace('ethereum:', '')\r\n            }\r\n            const scannedName = addressBook.find(({ address }) => {\r\n              return sameAddress(scannedAddress, address)\r\n            })?.name\r\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\r\n            if (!addressErrorMessage) {\r\n              mutators.setRecipient(scannedAddress)\r\n              setSelectedEntry({\r\n                name: scannedName || '',\r\n                address: scannedAddress,\r\n              })\r\n              setAddressErrorMsg('')\r\n            } else setAddressErrorMsg(addressErrorMessage)\r\n\r\n            closeQrModal()\r\n          }\r\n\r\n          let shouldDisableSubmitButton = !isValidAddress\r\n          if (selectedEntry) {\r\n            shouldDisableSubmitButton = !selectedEntry.address\r\n          }\r\n\r\n          const setMaxAllowedAmount = () => {\r\n            const isSpendingLimit = tokenSpendingLimit && txType === 'spendingLimit'\r\n            let maxAmount = selectedToken?.balance.tokenBalance ?? 0\r\n\r\n            if (isSpendingLimit) {\r\n              const spendingLimitBalance = fromTokenUnit(\r\n                new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\r\n                selectedToken?.decimals ?? 0,\r\n              )\r\n\r\n              maxAmount = new BigNumber(maxAmount).gt(spendingLimitBalance) ? spendingLimitBalance : maxAmount\r\n            }\r\n\r\n            mutators.setMax(maxAmount)\r\n          }\r\n\r\n          return (\r\n            <>\r\n              <Block className={classes.formContainer}>\r\n                <SafeInfo />\r\n                <Divider withArrow />\r\n                {selectedEntry && selectedEntry.address ? (\r\n                  <div\r\n                    onKeyDown={(e) => {\r\n                      if (sameString(e.key, 'Tab')) {\r\n                        return\r\n                      }\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    onClick={() => {\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    role=\"listbox\"\r\n                    tabIndex={0}\r\n                  >\r\n                    <Row margin=\"xs\">\r\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                        Recipient\r\n                      </Paragraph>\r\n                    </Row>\r\n                    <Row align=\"center\" margin=\"md\">\r\n                      <PrefixedEthHashInfo\r\n                        hash={selectedEntry.address}\r\n                        name={selectedEntry.name}\r\n                        showAvatar\r\n                        showCopyBtn\r\n                        explorerUrl={getExplorerInfo(selectedEntry.address)}\r\n                      />\r\n                    </Row>\r\n                  </div>\r\n                ) : (\r\n                  <Row margin=\"md\">\r\n                    <Col xs={11}>\r\n                      <AddressBookInput\r\n                        fieldMutator={mutators.setRecipient}\r\n                        pristine={pristine}\r\n                        errorMsg={addressErrorMsg}\r\n                        setIsValidAddress={setIsValidAddress}\r\n                        setSelectedEntry={setSelectedEntry}\r\n                      />\r\n                    </Col>\r\n                    <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n                      <ScanQRWrapper handleScan={handleScan} />\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n                <Row margin=\"sm\">\r\n                  <Col>\r\n                    <TokenSelectField\r\n                      initialValue={selectedToken?.address}\r\n                      isValid={!!selectedToken?.address}\r\n                      tokens={tokens}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                {tokenSpendingLimit && selectedToken && (\r\n                  <SpendingLimitRow selectedToken={selectedToken} tokenSpendingLimit={tokenSpendingLimit} />\r\n                )}\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Amount\r\n                    </Paragraph>\r\n                    <ButtonLink onClick={setMaxAllowedAmount} weight=\"bold\" testId=\"send-max-btn\">\r\n                      Send max\r\n                    </ButtonLink>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"md\">\r\n                  <Col>\r\n                    <Field\r\n                      component={TextField}\r\n                      inputAdornment={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <InputAdornmentChildSymbol symbol={selectedToken?.symbol} />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      name=\"amount\"\r\n                      placeholder=\"Amount*\"\r\n                      text=\"Amount*\"\r\n                      type=\"text\"\r\n                      testId=\"amount-input\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Block>\r\n              <Modal.Footer>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose }}\r\n                  confirmButtonProps={{\r\n                    disabled: !formState.valid || shouldDisableSubmitButton,\r\n                    testId: 'review-tx-btn',\r\n                    text: 'Review',\r\n                  }}\r\n                />\r\n              </Modal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </GnoForm>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SendFunds\r\n","import { Field } from 'react-final-form'\r\n\r\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import { lg, md, secondaryText } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  chainIndicator: {\r\n    padding: `0 ${md}`,\r\n    height: '20px',\r\n    alignItems: 'center',\r\n  },\r\n  icon: {\r\n    width: '20px',\r\n    marginRight: '10px',\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { ReactElement } from 'react'\r\n\r\nimport ChainIndicator from 'src/components/ChainIndicator'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { getChainInfo } from 'src/config'\r\nimport { styles } from './style'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface HeaderProps {\r\n  onClose: () => void\r\n  subTitle?: string\r\n  title: string\r\n  iconUrl?: string\r\n}\r\n\r\nexport const ModalHeader = ({ onClose, subTitle, title, iconUrl }: HeaderProps): ReactElement => {\r\n  const classes = useStyles()\r\n  const connectedNetwork = getChainInfo()\r\n\r\n  return (\r\n    <Row align=\"center\" className={classes.heading} grow>\r\n      {iconUrl && <img className={classes.icon} alt={title} src={iconUrl} />}\r\n      <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n        {title}\r\n      </Paragraph>\r\n      <Paragraph className={classes.annotation}>{subTitle ? subTitle : ''}</Paragraph>\r\n      <Row className={classes.chainIndicator}>\r\n        {connectedNetwork.chainId && <ChainIndicator chainId={connectedNetwork.chainId} />}\r\n      </Row>\r\n      <IconButton disableRipple onClick={onClose}>\r\n        <Close className={classes.closeIcon} />\r\n      </IconButton>\r\n    </Row>\r\n  )\r\n}\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","import { ReactElement } from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any): ReactElement => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { ReactElement, useState } from 'react'\r\n\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport Img from 'src/components/layout/Img'\r\n\r\nconst useStyles = makeStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\ntype Props = {\r\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\r\n  testId?: string\r\n}\r\n\r\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const [qrModalOpen, setQrModalOpen] = useState(false)\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const onScanFinished = (value: string) => {\r\n    handleScan(value, closeQrModal)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Img\r\n        alt=\"Scan QR\"\r\n        className={classes.qrCodeBtn}\r\n        height={20}\r\n        onClick={() => openQrModal()}\r\n        role=\"button\"\r\n        src={QRIcon}\r\n        testId={testId || 'qr-icon'}\r\n      />\r\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\r\n    </>\r\n  )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\n\r\nconst style = {\r\n  minWidth: '100%',\r\n}\r\n\r\nconst SelectInput = ({\r\n  classes,\r\n  disableError,\r\n  formControlProps,\r\n  input: { name, onChange, value, ...restInput },\r\n  label,\r\n  meta,\r\n  renderValue,\r\n  ...rest\r\n}) => {\r\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\r\n  const inputProps = {\r\n    ...restInput,\r\n    name,\r\n  }\r\n\r\n  return (\r\n    <FormControl {...formControlProps} error={showError} style={style}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Select\r\n        classes={classes}\r\n        inputProps={inputProps}\r\n        onChange={onChange}\r\n        renderValue={renderValue}\r\n        value={value}\r\n        {...rest}\r\n      />\r\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default SelectInput\r\n","import { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\r\n  const nativeCurrency = getNativeCurrency()\r\n\r\n  return (\r\n    <>\r\n      <PrefixedEthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nexport const useTextFieldLabelStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      borderRadius: 4,\r\n      fontSize: '15px',\r\n      width: '500px',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useTextFieldInputStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      fontSize: '14px',\r\n      width: '420px',\r\n    },\r\n  }),\r\n)\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\r\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\r\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport {\r\n  useTextFieldInputStyle,\r\n  useTextFieldLabelStyle,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { checksumAddress } from 'src/utils/checksumAddress'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\r\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\r\n\r\nexport interface AddressBookProps {\r\n  fieldMutator: (address: string) => void\r\n  label?: string\r\n  pristine?: boolean\r\n  recipientAddress?: string\r\n  errorMsg?: string\r\n  setIsValidAddress: (valid: boolean) => void\r\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\r\n}\r\n\r\nexport interface BaseAddressBookInputProps extends AddressBookProps {\r\n  addressBookEntries: AddressBookEntry[]\r\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\r\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\r\n  validationText: string | undefined\r\n}\r\n\r\nconst BaseAddressBookInput = ({\r\n  addressBookEntries,\r\n  fieldMutator,\r\n  label = 'Recipient',\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  setValidationText,\r\n  validationText,\r\n}: BaseAddressBookInputProps): ReactElement => {\r\n  const networkId = useSelector(currentChainId)\r\n\r\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\r\n    setSelectedEntry(addressEntry)\r\n    fieldMutator(addressEntry.address)\r\n  }\r\n\r\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\r\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\r\n    setIsValidAddress(!addressErrorMessage)\r\n\r\n    if (addressErrorMessage) {\r\n      setValidationText(addressErrorMessage)\r\n      return\r\n    }\r\n\r\n    // Automatically checksum valid addresses\r\n    const { address } = parsePrefixedAddress(fullAddress)\r\n    const checkedAddr = checksumAddress(address) || address\r\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\r\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\r\n  }\r\n\r\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option': {\r\n        const { address, name, chainId } = value as AddressBookEntry\r\n        updateAddressInfo({ address, name, chainId })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\r\n    _,\r\n    value,\r\n    reason,\r\n  ) => {\r\n    switch (reason) {\r\n      case 'input': {\r\n        const normalizedValue = trimSpaces(value)\r\n\r\n        if (!normalizedValue) {\r\n          break\r\n        }\r\n\r\n        // ENS-enabled resolve/validation\r\n        if (\r\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\r\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\r\n        ) {\r\n          let address = ''\r\n          try {\r\n            address = await getAddressFromDomain(normalizedValue)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n\r\n          const validatedAddress = validateAddress(address)\r\n\r\n          if (!validatedAddress) {\r\n            fieldMutator('')\r\n            break\r\n          }\r\n\r\n          const newEntry =\r\n            typeof validatedAddress === 'string'\r\n              ? {\r\n                  address,\r\n                  name: normalizedValue,\r\n                  chainId: networkId,\r\n                }\r\n              : validatedAddress\r\n\r\n          updateAddressInfo(newEntry)\r\n          break\r\n        }\r\n\r\n        // ETH address validation\r\n        const validatedAddress = validateAddress(normalizedValue)\r\n\r\n        if (!validatedAddress) {\r\n          fieldMutator('')\r\n          break\r\n        }\r\n\r\n        const newEntry =\r\n          typeof validatedAddress === 'string'\r\n            ? {\r\n                address: validatedAddress,\r\n                name: '',\r\n                chainId: networkId,\r\n              }\r\n            : validatedAddress\r\n\r\n        updateAddressInfo(newEntry)\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const labelStyles = useTextFieldLabelStyle()\r\n  const inputStyles = useTextFieldInputStyle()\r\n\r\n  return (\r\n    <Autocomplete<AddressBookEntry, false, false, true>\r\n      closeIcon={null}\r\n      openOnFocus={false}\r\n      filterOptions={filterAddressEntries}\r\n      freeSolo\r\n      onChange={onChange}\r\n      onInputChange={onInputChange}\r\n      options={addressBookEntries}\r\n      id=\"address-book-input\"\r\n      renderInput={(params) => (\r\n        <MuiTextField\r\n          {...params}\r\n          autoFocus={true}\r\n          error={!!validationText}\r\n          fullWidth\r\n          variant=\"filled\"\r\n          label={validationText ? validationText : label}\r\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\r\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\r\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\r\n        />\r\n      )}\r\n      getOptionLabel={({ address }) => address}\r\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\r\n      role=\"listbox\"\r\n      style={{ display: 'flex', flexGrow: 1 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (props.errorMsg) {\r\n      setValidationText(props.errorMsg)\r\n    }\r\n  }, [props.errorMsg])\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={addressBookEntries}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const ContractsAddressBookInput = ({\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  ...props\r\n}: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\r\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    const filterContractAddresses = async (): Promise<void> => {\r\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\r\n      setFilteredEntries(filteredADBK)\r\n    }\r\n    filterContractAddresses()\r\n  }, [addressBookEntries])\r\n\r\n  const onSetSelectedEntry = async (selectedEntry) => {\r\n    if (selectedEntry?.address) {\r\n      // verify if `address` is a contract\r\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\r\n      setIsValidAddress(!contractAddressErrorMessage)\r\n      setValidationText(contractAddressErrorMessage ?? '')\r\n      setSelectedEntry(selectedEntry)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={filteredEntries}\r\n      setIsValidAddress={setIsValidAddress}\r\n      setSelectedEntry={onSetSelectedEntry}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nimport { sm } from 'src/theme/variables'\r\n\r\nexport const useSelectedTokenStyles = makeStyles(\r\n  createStyles({\r\n    container: {\r\n      minHeight: '55px',\r\n      padding: 0,\r\n      width: '100%',\r\n    },\r\n    tokenData: {\r\n      padding: 0,\r\n      margin: 0,\r\n      lineHeight: '14px',\r\n    },\r\n    tokenImage: {\r\n      display: 'block',\r\n      marginRight: sm,\r\n      height: 28,\r\n      width: 'auto',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useSelectStyles = makeStyles(\r\n  createStyles({\r\n    selectMenu: {\r\n      paddingRight: 0,\r\n    },\r\n  }),\r\n)\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { List } from 'immutable'\r\nimport { ReactElement } from 'react'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { required } from 'src/components/forms/validator'\r\nimport Img from 'src/components/layout/Img'\r\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\n\r\nimport { useSelectStyles, useSelectedTokenStyles } from './style'\r\n\r\ninterface SelectTokenProps {\r\n  tokenAddress: string\r\n  tokens: List<Token>\r\n}\r\n\r\nconst SelectedToken = ({ tokenAddress, tokens }: SelectTokenProps): ReactElement => {\r\n  const classes = useSelectedTokenStyles()\r\n  const token = tokens.find(({ address }) => address === tokenAddress)\r\n\r\n  return (\r\n    <MenuItem className={classes.container}>\r\n      {token ? (\r\n        <>\r\n          <ListItemIcon>\r\n            <Img\r\n              className={classes.tokenImage}\r\n              alt={token.name}\r\n              onError={setImageToPlaceholder}\r\n              src={token.logoUri || ''}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            className={classes.tokenData}\r\n            primary={token.name}\r\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Text color=\"placeHolder\" size=\"xl\">\r\n          Select an asset*\r\n        </Text>\r\n      )}\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\ninterface TokenSelectFieldProps {\r\n  initialValue?: string\r\n  isValid?: boolean\r\n  tokens: List<Token>\r\n}\r\n\r\nconst TokenSelectField = ({ initialValue, isValid = true, tokens }: TokenSelectFieldProps): ReactElement => {\r\n  const classes = useSelectStyles()\r\n  const tokenClasses = useSelectedTokenStyles()\r\n\r\n  return (\r\n    <Field\r\n      classes={{ selectMenu: classes.selectMenu }}\r\n      className={isValid ? 'isValid' : 'isInvalid'}\r\n      component={SelectField}\r\n      displayEmpty\r\n      initialValue={initialValue}\r\n      name=\"token\"\r\n      renderValue={(tokenAddress) => <SelectedToken tokenAddress={tokenAddress} tokens={tokens} />}\r\n      validate={required}\r\n    >\r\n      {tokens.map((token) => (\r\n        <MenuItem key={token.address} value={token.address}>\r\n          <ListItemIcon>\r\n            <Img\r\n              className={tokenClasses.tokenImage}\r\n              alt={token.name}\r\n              onError={setImageToPlaceholder}\r\n              src={token.logoUri || ''}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary={token.name}\r\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\r\n            data-testid={`select-token-${token.name}`}\r\n          />\r\n        </MenuItem>\r\n      ))}\r\n    </Field>\r\n  )\r\n}\r\n\r\nexport default TokenSelectField\r\n"],"sourceRoot":""}