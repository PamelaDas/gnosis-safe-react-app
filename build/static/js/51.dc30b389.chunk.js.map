{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","components/ExecuteCheckbox/index.tsx","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts"],"names":["useStyles","makeStyles","styles","ContractInteractionReview","onClose","onPrev","tx","explorerUrl","getExplorerInfo","contractAddress","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCurrency","getNativeCurrency","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","executionApproved","setExecutionApproved","addressName","useSelector","state","addressBookEntryName","address","txData","txAmount","txRecipient","txInfo","setTxInfo","useEstimateTransactionGas","safeTxGas","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","doExecute","useEstimationStatus","buttonStatus","useEffect","value","toTokenUnit","decimals","data","trim","ethGasLimit","ethGasPrice","closeEditModalCallback","txParameters","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","subTitle","title","className","formContainer","margin","color","noMargin","size","style","letterSpacing","align","hash","name","showAvatar","showCopyBtn","xs","alt","height","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","layout","justify","symbol","selectedMethod","inputs","map","index","type","key","generateFormFieldKey","signatureHash","getValueFromTxInputs","outerData","onChange","onEdit","isTransactionCreation","isTransactionExecution","safeNonce","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","createTransaction","to","valueInWei","txNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","console","error","submitTx","status","EstimationStatus","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","NO_CONTRACT","ensResolver","createDecorator","field","updates","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","message","formMutators","setMax","args","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","setCallResults","setAbiValue","isAddress","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","handleSubmitError","hasOwnProperty","reason","FORM_ERROR","keyType","extractMethodArgs","JSON","parse","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","methods","isReadMethod","action","replace","String","ExecuteCheckbox","control","defaultChecked","e","target","checked","label","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","form","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","createStyles","qrCodeBtn","cursor","padding","md","lg","wordBreak","marginLeft","sm","borderRadius","border","minHeight","overflow","fontSize","fontFamily","maxHeight","fontStretch","lineHeight","buttonRow","justifyContent","gap","dataInput","selectAddress","fullWidth"],"mappings":"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","file":"static/js/51.dc30b389.chunk.js","sourcesContent":["import { useEffect, useState, Fragment } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\r\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport {\r\n  generateFormFieldKey,\r\n  getValueFromTxInputs,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\nimport { useEstimateTransactionGas, EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type TransactionReviewType = {\r\n  abi?: string\r\n  contractAddress?: string\r\n  data?: string\r\n  value?: string\r\n  selectedMethod?: AbiItemExtended\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  onEditTxParameters: () => void\r\n  tx: TransactionReviewType\r\n  txParameters: TxParameters\r\n}\r\n\r\nconst ContractInteractionReview = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\r\n  const explorerUrl = getExplorerInfo(tx.contractAddress as string)\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = extractSafeAddress()\r\n  const nativeCurrency = getNativeCurrency()\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\r\n  const addressName = useSelector((state) => addressBookEntryName(state, { address: tx.contractAddress as string }))\r\n\r\n  const [txInfo, setTxInfo] = useState<{\r\n    txRecipient: string\r\n    txData: string\r\n    txAmount: string\r\n  }>({ txData: '', txAmount: '', txRecipient: '' })\r\n\r\n  const {\r\n    gasLimit,\r\n    gasEstimation,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n  } = useEstimateTransactionGas({\r\n    txRecipient: txInfo?.txRecipient,\r\n    txAmount: txInfo?.txAmount,\r\n    txData: txInfo?.txData,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const doExecute = isExecution && executionApproved\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  useEffect(() => {\r\n    setTxInfo({\r\n      txRecipient: tx.contractAddress as string,\r\n      txAmount: tx.value ? toTokenUnit(tx.value, nativeCurrency.decimals) : '0',\r\n      txData: tx.data ? tx.data.trim() : '',\r\n    })\r\n  }, [tx.contractAddress, tx.value, tx.data, safeAddress, nativeCurrency.decimals])\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    if (safeAddress && txInfo) {\r\n      dispatch(\r\n        createTransaction({\r\n          safeAddress,\r\n          to: txInfo?.txRecipient,\r\n          valueInWei: txInfo?.txAmount,\r\n          txData: txInfo?.txData,\r\n          txNonce: txParameters.safeNonce,\r\n          safeTxGas: txParameters.safeTxGas,\r\n          ethParameters: txParameters,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n          delayExecution: !executionApproved,\r\n        }),\r\n      )\r\n    } else {\r\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = gasPriceFormatted\r\n    const newGasPrice = txParameters.ethGasPrice\r\n    const oldSafeTxGas = gasEstimation\r\n    const newSafeTxGas = txParameters.safeTxGas\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={doExecute}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Contract interaction\" />\r\n          <Hairline />\r\n          <Block className={classes.formContainer}>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Contract Address\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <PrefixedEthHashInfo\r\n                hash={tx.contractAddress as string}\r\n                name={addressName}\r\n                showAvatar\r\n                showCopyBtn\r\n                explorerUrl={explorerUrl}\r\n              />\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Value\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={1}>\r\n                <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri || ''} />\r\n              </Col>\r\n              <Col layout=\"column\" xs={11}>\r\n                <Block justify=\"left\">\r\n                  <Paragraph className={classes.value} noMargin size=\"md\" style={{ margin: 0 }}>\r\n                    {tx.value || 0}\r\n                    {' ' + nativeCurrency.symbol}\r\n                  </Paragraph>\r\n                </Block>\r\n              </Col>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Method\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Paragraph className={classes.value} size=\"md\" style={{ margin: 0 }}>\r\n                {tx.selectedMethod?.name}\r\n              </Paragraph>\r\n            </Row>\r\n            {tx.selectedMethod?.inputs?.map(({ name, type }, index) => {\r\n              const key = generateFormFieldKey(type, tx.selectedMethod?.signatureHash || '', index)\r\n              const value: string = getValueFromTxInputs(key, type, tx)\r\n\r\n              return (\r\n                <Fragment key={key}>\r\n                  <Row margin=\"xs\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      {name} ({type})\r\n                    </Paragraph>\r\n                  </Row>\r\n                  <Row align=\"center\" margin=\"md\">\r\n                    <Paragraph className={classes.value} noMargin size=\"md\" style={{ margin: 0 }}>\r\n                      {value}\r\n                    </Paragraph>\r\n                  </Row>\r\n                </Fragment>\r\n              )\r\n            })}\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Data (hex encoded)\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col className={classes.outerData}>\r\n                <Row className={classes.data} size=\"md\">\r\n                  {tx.data}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n\r\n            {isExecution && <ExecuteCheckbox onChange={setExecutionApproved} />}\r\n\r\n            {/* Tx Parameters */}\r\n            <TxParametersDetail\r\n              txParameters={txParameters}\r\n              onEdit={toggleEditMode}\r\n              isTransactionCreation={isCreation}\r\n              isTransactionExecution={doExecute}\r\n              isOffChainSignature={isOffChainSignature}\r\n            />\r\n          </Block>\r\n          <ReviewInfoText\r\n            gasCostFormatted={gasCostFormatted}\r\n            isCreation={isCreation}\r\n            isExecution={doExecute}\r\n            isOffChainSignature={isOffChainSignature}\r\n            safeNonce={txParameters.safeNonce}\r\n            txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n          />\r\n\r\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ContractInteractionReview\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\r\nimport createDecorator from 'final-form-calculate'\r\nimport { ContractSendMethod } from 'web3-eth-contract'\r\n\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\r\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\nexport const NO_CONTRACT = 'no contract'\r\n\r\nexport const ensResolver = createDecorator({\r\n  field: 'contractAddress',\r\n  updates: {\r\n    contractAddress: async (contractAddress) => {\r\n      try {\r\n        const resolvedAddress =\r\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\r\n          (await getAddressFromDomain(contractAddress))\r\n\r\n        if (resolvedAddress) {\r\n          return resolvedAddress\r\n        }\r\n\r\n        return contractAddress\r\n      } catch (e) {\r\n        console.error(e.message)\r\n        return contractAddress\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'value', () => args[0])\r\n  },\r\n  setContractAddress: (args, state, utils) => {\r\n    utils.changeValue(state, 'contractAddress', () => args[0])\r\n  },\r\n  setSelectedMethod: (args, state, utils) => {\r\n    const modified =\r\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\r\n\r\n    if (modified) {\r\n      utils.changeValue(state, 'callResults', () => '')\r\n      utils.changeValue(state, 'value', () => '')\r\n    }\r\n\r\n    utils.changeValue(state, 'selectedMethod', () => args[0])\r\n  },\r\n  setCallResults: (args, state, utils) => {\r\n    utils.changeValue(state, 'callResults', () => args[0])\r\n  },\r\n  setAbiValue: (args, state, utils) => {\r\n    utils.changeValue(state, 'abi', () => args[0])\r\n  },\r\n}\r\n\r\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\r\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\r\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\r\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\r\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\r\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\r\n\r\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\r\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\r\n  try {\r\n    const arrayResult = JSON.parse(parameter)\r\n    return arrayResult.map((value) => {\r\n      if (Number.isInteger(value)) {\r\n        return new BigNumber(value).toString()\r\n      }\r\n      return value\r\n    })\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\r\n  for (const key in values) {\r\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\r\n      return { [key]: error.reason }\r\n    }\r\n  }\r\n\r\n  // .call() failed and we're logging a generic error\r\n  return { [FORM_ERROR]: error ? error.message : undefined }\r\n}\r\n\r\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\r\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\r\n  return `methodInput-${signatureHash}_${index}_${keyType}`\r\n}\r\n\r\nconst extractMethodArgs =\r\n  (signatureHash: string, values: Record<string, string>) =>\r\n  ({ type }, index) => {\r\n    const key = generateFormFieldKey(type, signatureHash, index)\r\n\r\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\r\n  }\r\n\r\nexport const createTxObject = (\r\n  method: AbiItemExtended,\r\n  contractAddress: string,\r\n  values: Record<string, string>,\r\n): ContractSendMethod => {\r\n  const web3 = getWeb3()\r\n  const contract = new web3.eth.Contract([method], contractAddress)\r\n  const { inputs, name = '', signatureHash } = method\r\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\r\n\r\n  return contract.methods[name](...args)\r\n}\r\n\r\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\r\n\r\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\r\n  if (isArrayParameter(type)) {\r\n    key = key.replace('[]', '')\r\n  }\r\n\r\n  let value = tx[key]\r\n\r\n  if (type === 'bool') {\r\n    value = String(value)\r\n  }\r\n\r\n  return value\r\n}\r\n","import { ReactElement } from 'react'\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from '../layout/Paragraph'\r\n\r\ninterface ExecuteCheckboxProps {\r\n  onChange: (val: boolean) => unknown\r\n}\r\n\r\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onChange(e.target.checked)\r\n  }\r\n  return (\r\n    <Row margin=\"md\">\r\n      <Paragraph noMargin>\r\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\r\n      </Paragraph>\r\n      <FormControlLabel\r\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\r\n        label=\"Execute transaction\"\r\n        data-testid=\"execute-checkbox\"\r\n      />\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ExecuteCheckbox\r\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import { lg, md, sm, border } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n    wordBreak: 'break-word',\r\n  },\r\n  value: {\r\n    marginLeft: sm,\r\n  },\r\n  outerData: {\r\n    borderRadius: '5px',\r\n    border: `1px solid ${border}`,\r\n    padding: '11px',\r\n    minHeight: '21px',\r\n  },\r\n  data: {\r\n    wordBreak: 'break-all',\r\n    overflow: 'auto',\r\n    fontSize: '14px',\r\n    fontFamily: 'Averta',\r\n    maxHeight: '100px',\r\n    letterSpacing: 'normal',\r\n    fontStretch: 'normal',\r\n    lineHeight: '1.43',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  dataInput: {\r\n    '& TextField-root-294': {\r\n      lineHeight: 'auto',\r\n      border: 'green',\r\n    },\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n  fullWidth: {\r\n    justifyContent: 'space-between',\r\n  },\r\n})\r\n"],"sourceRoot":""}