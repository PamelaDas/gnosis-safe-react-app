{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","marginRight","marginLeft","manage","fontSize","closeIcon","height","width","qrCodeBtn","cursor","formContainer","buttonRow","gap","dataInput","lineHeight","border","selectAddress","useStyles","makeStyles","SendCustomTx","initialValues","isABI","onClose","onNext","switchMethod","classes","nativeCurrency","getNativeCurrency","ethBalance","useSelector","currentSafeEthBalance","saveForm","values","a","handleSubmit","contractAddress","data","value","submit","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","decorators","ensResolver","formMutators","onSubmit","subscription","submitting","pristine","validating","rest","mutators","Block","SafeInfo","Divider","withArrow","EthAddressInput","name","onScannedValue","setContractAddress","text","margin","Col","between","size","style","ButtonLink","setMax","Field","component","TextField","inputAdornment","endAdornment","InputAdornment","position","symbol","placeholder","type","validate","composeValidators","mustBeFloat","maxValue","minValue","TextAreaField","mustBeHexData","Switch","checked","onChange","Buttons"],"mappings":"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","file":"static/js/97.51d147a8.chunk.js","sourcesContent":["import { lg, md } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: '#a2a8ba',\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  manage: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  dataInput: {\r\n    '& TextField-root-294': {\r\n      lineHeight: 'auto',\r\n      border: 'green',\r\n    },\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n","import { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Close from '@material-ui/icons/Close'\r\n\r\nimport Divider from 'src/components/Divider'\r\nimport Field from 'src/components/forms/Field'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport { TextAreaField } from 'src/components/forms/TextAreaField'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport { composeValidators, maxValue, minValue, mustBeFloat, mustBeHexData } from 'src/components/forms/validator'\r\nimport Block from 'src/components/layout/Block'\r\nimport ButtonLink from 'src/components/layout/ButtonLink'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { currentSafeEthBalance } from 'src/logic/safe/store/selectors'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\n\r\nimport { styles } from './style'\r\nimport { getNativeCurrency } from 'src/config'\r\nimport { EthAddressInput } from '../EthAddressInput'\r\nimport { ensResolver, formMutators } from '../utils'\r\nimport Buttons from '../Buttons'\r\n\r\nexport interface CreatedTx {\r\n  contractAddress: string\r\n  data: string\r\n  value: string | number\r\n}\r\n\r\nexport type CustomTxProps = {\r\n  contractAddress?: string\r\n}\r\n\r\ntype Props = {\r\n  initialValues: CustomTxProps\r\n  onClose: () => void\r\n  onNext: (tx: CreatedTx, submit: boolean) => void\r\n  isABI: boolean\r\n  switchMethod: () => void\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst SendCustomTx = ({ initialValues, isABI, onClose, onNext, switchMethod }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const nativeCurrency = getNativeCurrency()\r\n  const ethBalance = useSelector(currentSafeEthBalance)\r\n\r\n  const saveForm = async (values) => {\r\n    await handleSubmit(values, false)\r\n    switchMethod()\r\n  }\r\n\r\n  const handleSubmit = ({ contractAddress, data, value, ...values }, submit = true) => {\r\n    if (data || value) {\r\n      onNext({ ...values, contractAddress, data, value }, submit)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\r\n          Contract interaction\r\n        </Paragraph>\r\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.closeIcon} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <GnoForm\r\n        decorators={[ensResolver]}\r\n        formMutators={formMutators}\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        subscription={{ submitting: true, pristine: true, values: true }}\r\n      >\r\n        {(submitting, validating, rest, mutators) => {\r\n          const handleClickSendMax = () => mutators.setMax(ethBalance)\r\n          const handleToggleAbi = () => saveForm(rest.values)\r\n          return (\r\n            <>\r\n              <Block className={classes.formContainer}>\r\n                <SafeInfo />\r\n                <Divider withArrow />\r\n                <EthAddressInput\r\n                  name=\"contractAddress\"\r\n                  onScannedValue={mutators.setContractAddress}\r\n                  text=\"Contract address*\"\r\n                />\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Value\r\n                    </Paragraph>\r\n                    <ButtonLink onClick={handleClickSendMax} weight=\"bold\">\r\n                      Send max\r\n                    </ButtonLink>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"md\">\r\n                  <Col>\r\n                    <Field\r\n                      component={TextField}\r\n                      inputAdornment={{\r\n                        endAdornment: <InputAdornment position=\"end\">{nativeCurrency.symbol}</InputAdornment>,\r\n                      }}\r\n                      name=\"value\"\r\n                      placeholder=\"Value*\"\r\n                      text=\"Value*\"\r\n                      type=\"text\"\r\n                      validate={composeValidators(mustBeFloat, maxValue(ethBalance || '0'), minValue(0))}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"sm\">\r\n                  <Col>\r\n                    <TextAreaField\r\n                      name=\"data\"\r\n                      placeholder=\"Data (hex encoded)*\"\r\n                      text=\"Data (hex encoded)*\"\r\n                      type=\"text\"\r\n                      validate={mustBeHexData}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Paragraph color=\"disabled\" noMargin size=\"lg\" style={{ letterSpacing: '-0.5px' }}>\r\n                  <Switch checked={!isABI} onChange={handleToggleAbi} />\r\n                  Use custom data (hex encoded)\r\n                </Paragraph>\r\n              </Block>\r\n              <Buttons onClose={onClose} />\r\n            </>\r\n          )\r\n        }}\r\n      </GnoForm>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SendCustomTx\r\n"],"sourceRoot":""}