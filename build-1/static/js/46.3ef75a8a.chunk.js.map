{"version":3,"sources":["logic/collectibles/utils/index.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/ExecuteCheckbox/index.tsx","logic/collectibles/store/selectors/index.ts","logic/tokens/store/actions/fetchTokens.ts"],"names":["CK_ADDRESS","CHAIN_ID","ETHEREUM","RINKEBY","SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH","generateERC721TransferTxData","tx","safeAddress","a","Error","contractAddress","assetAddress","methodToCall","sameAddress","_getChainId","transferParams","recipientAddress","nftTokenId","includes","NFTTokenInstance","getERC721TokenContract","getERC20TokenContract","methods","encodeABI","styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewCollectible","onClose","onPrev","classes","shortener","textShortener","dispatch","useDispatch","extractSafeAddress","nftTokens","useSelector","nftTokensSelector","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","executionApproved","setExecutionApproved","txToken","find","tokenId","data","setData","useEstimateTransactionGas","txData","txRecipient","safeTxGas","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","doExecute","useEstimationStatus","buttonStatus","useEffect","isCurrent","calculateERC721TransferData","console","error","message","EditableTxParameters","ethGasLimit","ethGasPrice","closeEditModalCallback","txParameters","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","letterSpacing","align","Col","xs","PrefixedEthHashInfo","hash","name","recipientName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","charsStart","charsEnd","assetName","Img","alt","onError","setImageToPlaceholder","src","image","ExecuteCheckbox","onChange","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","ReviewInfoText","safeNonce","Modal","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","createTransaction","to","valueInWei","txNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","submitTx","type","status","EstimationStatus","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","StyledBlock","border","currentSafeWithNames","address","ethBalance","safeName","nativeCurrency","getNativeCurrency","symbol","control","defaultChecked","e","target","checked","label","nftAssets","state","NFT_ASSETS_REDUCER_ID","nftAssetsSelector","createSelector","assets","NFT_TOKENS_REDUCER_ID","tokens","nftAssetsToListSelector","Object","values","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","map","nftToken","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","filter","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","ERC721Contract"],"mappings":"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","file":"static/js/46.3ef75a8a.chunk.js","sourcesContent":["import { _getChainId } from 'src/config'\r\nimport { CHAIN_ID } from 'src/config/chain.d'\r\nimport { getERC721TokenContract, getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { CollectibleTx } from 'src/routes/safe/components/Balances/SendModal/screens/ReviewCollectible'\r\n\r\n// CryptoKitties Contract Addresses by network\r\n// This is an exception made for a popular NFT that's not ERC721 standard-compatible,\r\n//  so we can allow the user to transfer the assets by using `transferFrom` instead of\r\n//  the standard `safeTransferFrom` method.\r\nexport const CK_ADDRESS = {\r\n  [CHAIN_ID.ETHEREUM]: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\r\n  [CHAIN_ID.RINKEBY]: '0x16baf0de678e52367adc69fd067e5edd1d33e3bf',\r\n}\r\n\r\n// safeTransferFrom(address,address,uint256)\r\nexport const SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH = '42842e0e'\r\n\r\n/**\r\n * Returns a method identifier based on the asset specified and the current network\r\n * @param {string} contractAddress\r\n * @returns string\r\n */\r\nexport const getTransferMethodByContractAddress = (contractAddress: string): string => {\r\n  if (sameAddress(contractAddress, CK_ADDRESS[_getChainId()])) {\r\n    // on mainnet `transferFrom` seems to work fine but we can assure that `transfer` will work on both networks\r\n    // so that's the reason why we're falling back to `transfer` for CryptoKitties\r\n    return 'transfer'\r\n  }\r\n\r\n  return `0x${SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH}`\r\n}\r\n\r\n/**\r\n * Builds the encodedABI data for the transfer of an NFT token\r\n * @param {CollectibleTx} tx\r\n * @param {string} safeAddress\r\n * @returns Promise<string>\r\n */\r\nexport const generateERC721TransferTxData = async (\r\n  tx: CollectibleTx,\r\n  safeAddress: string | undefined,\r\n): Promise<string> => {\r\n  if (!safeAddress) {\r\n    throw new Error('Failed to build NFT transfer tx data. SafeAddress is not defined.')\r\n  }\r\n\r\n  const methodToCall = getTransferMethodByContractAddress(tx.assetAddress)\r\n  let transferParams = [tx.recipientAddress, tx.nftTokenId]\r\n  let NFTTokenInstance\r\n\r\n  if (methodToCall.includes(SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH)) {\r\n    // we add the `from` param for the `safeTransferFrom` method call\r\n    transferParams = [safeAddress, ...transferParams]\r\n    NFTTokenInstance = getERC721TokenContract(tx.assetAddress)\r\n  } else {\r\n    // we fallback to an ERC20 Token contract whose ABI implements the `transfer` method\r\n    NFTTokenInstance = getERC20TokenContract(tx.assetAddress)\r\n  }\r\n\r\n  return NFTTokenInstance.methods[methodToCall](...transferParams).encodeABI()\r\n}\r\n","import { lg, md, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  amount: {\r\n    marginLeft: sm,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport Divider from 'src/components/Divider'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { nftTokensSelector } from 'src/logic/collectibles/store/selectors'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { textShortener } from 'src/utils/strings'\r\nimport { generateERC721TransferTxData } from 'src/logic/collectibles/utils'\r\n\r\nimport { styles } from './style'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { ModalHeader } from '../ModalHeader'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type CollectibleTx = {\r\n  recipientAddress: string\r\n  recipientName?: string\r\n  assetAddress: string\r\n  assetName: string\r\n  nftTokenId: string\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  tx: CollectibleTx\r\n}\r\n\r\nconst ReviewCollectible = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const shortener = textShortener()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = extractSafeAddress()\r\n  const nftTokens = useSelector(nftTokensSelector)\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\r\n\r\n  const txToken = nftTokens.find(\r\n    ({ assetAddress, tokenId }) => assetAddress === tx.assetAddress && tokenId === tx.nftTokenId,\r\n  )\r\n  const [data, setData] = useState('')\r\n\r\n  const {\r\n    gasLimit,\r\n    gasEstimation,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n  } = useEstimateTransactionGas({\r\n    txData: data,\r\n    txRecipient: tx.assetAddress,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const doExecute = isExecution && executionApproved\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  useEffect(() => {\r\n    let isCurrent = true\r\n\r\n    const calculateERC721TransferData = async () => {\r\n      try {\r\n        const txData = await generateERC721TransferTxData(tx, safeAddress)\r\n        if (isCurrent) {\r\n          setData(txData)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error calculating ERC721 transfer data:', error.message)\r\n      }\r\n    }\r\n    calculateERC721TransferData()\r\n\r\n    return () => {\r\n      isCurrent = false\r\n    }\r\n  }, [safeAddress, tx])\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    try {\r\n      if (safeAddress) {\r\n        dispatch(\r\n          createTransaction({\r\n            safeAddress,\r\n            to: tx.assetAddress,\r\n            valueInWei: '0',\r\n            txData: data,\r\n            txNonce: txParameters.safeNonce,\r\n            safeTxGas: txParameters.safeTxGas,\r\n            ethParameters: txParameters,\r\n            notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n            delayExecution: !executionApproved,\r\n          }),\r\n        )\r\n      } else {\r\n        console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating sendCollectible Tx:', error)\r\n    } finally {\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = gasPriceFormatted\r\n    const newGasPrice = txParameters.ethGasPrice\r\n    const oldSafeTxGas = gasEstimation\r\n    const newSafeTxGas = txParameters.safeTxGas\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={doExecute}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Send collectible\" />\r\n          <Hairline />\r\n          <Block className={classes.container}>\r\n            <SafeInfo />\r\n            <Divider withArrow />\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Recipient\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={12}>\r\n                <PrefixedEthHashInfo\r\n                  hash={tx.recipientAddress}\r\n                  name={tx.recipientName}\r\n                  showAvatar\r\n                  showCopyBtn\r\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                {textShortener({ charsStart: 40, charsEnd: 0 })(tx.assetName)}\r\n              </Paragraph>\r\n            </Row>\r\n            {txToken && (\r\n              <Row align=\"center\" margin=\"md\">\r\n                <Img alt={txToken.name} height={28} onError={setImageToPlaceholder} src={txToken.image} />\r\n                <Paragraph className={classes.amount} noMargin size=\"md\">\r\n                  {shortener(txToken.name)} (Token ID: {shortener(txToken.tokenId as string)})\r\n                </Paragraph>\r\n              </Row>\r\n            )}\r\n\r\n            {isExecution && <ExecuteCheckbox onChange={setExecutionApproved} />}\r\n\r\n            {/* Tx Parameters */}\r\n            <TxParametersDetail\r\n              txParameters={txParameters}\r\n              onEdit={toggleEditMode}\r\n              isTransactionCreation={isCreation}\r\n              isTransactionExecution={doExecute}\r\n              isOffChainSignature={isOffChainSignature}\r\n            />\r\n          </Block>\r\n          <ReviewInfoText\r\n            gasCostFormatted={gasCostFormatted}\r\n            isCreation={isCreation}\r\n            isExecution={doExecute}\r\n            isOffChainSignature={isOffChainSignature}\r\n            safeNonce={txParameters.safeNonce}\r\n            txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n          />\r\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                type: 'submit',\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ReviewCollectible\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","import { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\r\n  const nativeCurrency = getNativeCurrency()\r\n\r\n  return (\r\n    <>\r\n      <PrefixedEthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { ReactElement } from 'react'\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from '../layout/Paragraph'\r\n\r\ninterface ExecuteCheckboxProps {\r\n  onChange: (val: boolean) => unknown\r\n}\r\n\r\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onChange(e.target.checked)\r\n  }\r\n  return (\r\n    <Row margin=\"md\">\r\n      <Paragraph noMargin>\r\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\r\n      </Paragraph>\r\n      <FormControlLabel\r\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\r\n        label=\"Execute transaction\"\r\n        data-testid=\"execute-checkbox\"\r\n      />\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ExecuteCheckbox\r\n","import { createSelector } from 'reselect'\r\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nimport { AppReduxState } from 'src/store'\r\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\r\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\r\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\r\n\r\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\r\n\r\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\r\n\r\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\r\n  return assets ? Object.values(assets) : []\r\n})\r\n\r\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\r\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\r\n  const uniqueAddresses = new Set(addresses)\r\n  return Array.from(uniqueAddresses)\r\n})\r\n\r\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\r\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\r\n)\r\n\r\nexport const nftAssetsFromNftTokensSelector = createSelector(\r\n  nftAssetsToListSelector,\r\n  nftAssetsAddressFromNftTokensSelector,\r\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\r\n    return nftAssets\r\n      .sort((a, b) => a.name.localeCompare(b.name))\r\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\r\n  },\r\n)\r\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\r\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\r\nimport { AbiItem } from 'web3-utils'\r\n\r\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\r\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\r\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\r\n\r\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\r\n}\r\n\r\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\r\n}\r\n\r\nexport const getERC20TokenContract = createERC20TokenContract\r\n\r\nexport const getERC721TokenContract = createERC721TokenContract\r\n"],"sourceRoot":""}