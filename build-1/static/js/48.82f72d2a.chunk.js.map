{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/ExecuteCheckbox/index.tsx","logic/tokens/store/actions/fetchTokens.ts"],"names":["styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewSendFundsTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCurrency","getNativeCurrency","tokens","useSelector","extendedSafeTokensSelector","txToken","useMemo","find","token","sameAddress","address","isSendingNativeToken","getNativeCurrencyAddress","txRecipient","recipientAddress","txValue","toTokenUnit","decimals","data","txAmount","useState","setData","useEffect","updateTxDataAsync","a","txData","EMPTY_DATA","ERC20TokenInstance","getERC20TokenContract","erc20TransferAmount","methods","transfer","encodeABI","useTxData","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","useEstimateTransactionGas","txType","safeTxGas","gasCostFormatted","gasPriceFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","useEstimationStatus","buttonStatus","setButtonStatus","isSpendingLimit","sameString","executionApproved","setExecutionApproved","doExecute","submitTx","txParameters","ButtonStatus","LOADING","READY","logError","Errors","_802","tokenSpendingLimit","spendingLimitTokenAddress","ZERO_ADDRESS","spendingLimit","getSpendingLimitContract","executeAllowanceTransfer","delegate","send","from","on","_801","message","createTransaction","to","valueInWei","txNonce","safeNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","EditableTxParameters","ethGasLimit","ethGasPrice","closeEditModalCallback","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","letterSpacing","align","Col","xs","PrefixedEthHashInfo","hash","name","recipientName","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","logoUri","symbol","ExecuteCheckbox","onChange","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","ReviewInfoText","Modal","Footer","withoutBorder","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","status","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","border","currentSafeWithNames","ethBalance","safeName","control","defaultChecked","e","target","checked","label","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","getERC721TokenContract","ERC721Contract"],"mappings":"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","file":"static/js/48.82f72d2a.chunk.js","sourcesContent":["import { lg, md, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  amount: {\r\n    marginLeft: sm,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport Divider from 'src/components/Divider'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { getSpendingLimitContract } from 'src/logic/contracts/spendingLimitContracts'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\r\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\r\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { TokenProps } from 'src/logic/tokens/store/model/token'\r\nimport { RecordOf } from 'immutable'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\n\r\nimport { styles } from './style'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { ModalHeader } from '../ModalHeader'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\r\nimport { getNativeCurrencyAddress } from 'src/config/utils'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type ReviewTxProp = {\r\n  recipientAddress: string\r\n  recipientName?: string\r\n  amount: string\r\n  txRecipient: string\r\n  token: string\r\n  txType?: string\r\n  tokenSpendingLimit?: SpendingLimit\r\n}\r\n\r\ntype ReviewTxProps = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  tx: ReviewTxProp\r\n}\r\n\r\nconst useTxData = (\r\n  isSendingNativeToken: boolean,\r\n  txAmount: string,\r\n  recipientAddress: string,\r\n  txToken?: RecordOf<TokenProps>,\r\n): string => {\r\n  const [data, setData] = useState('')\r\n\r\n  useEffect(() => {\r\n    const updateTxDataAsync = async () => {\r\n      if (!txToken) {\r\n        return\r\n      }\r\n\r\n      let txData = EMPTY_DATA\r\n      if (!isSendingNativeToken) {\r\n        const ERC20TokenInstance = getERC20TokenContract(txToken.address)\r\n        const erc20TransferAmount = toTokenUnit(txAmount, txToken.decimals)\r\n        txData = ERC20TokenInstance.methods.transfer(recipientAddress, erc20TransferAmount).encodeABI()\r\n      }\r\n      setData(txData)\r\n    }\r\n\r\n    updateTxDataAsync()\r\n  }, [isSendingNativeToken, recipientAddress, txAmount, txToken])\r\n\r\n  return data\r\n}\r\n\r\nconst ReviewSendFundsTx = ({ onClose, onPrev, tx }: ReviewTxProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = extractSafeAddress()\r\n  const nativeCurrency = getNativeCurrency()\r\n  const tokens: any = useSelector(extendedSafeTokensSelector)\r\n  const txToken = useMemo(() => tokens.find((token) => sameAddress(token.address, tx.token)), [tokens, tx.token])\r\n  const isSendingNativeToken = useMemo(() => sameAddress(txToken?.address, getNativeCurrencyAddress()), [txToken])\r\n  const txRecipient = isSendingNativeToken ? tx.recipientAddress : txToken?.address || ''\r\n  const txValue = isSendingNativeToken ? toTokenUnit(tx.amount, nativeCurrency.decimals) : '0'\r\n  const data = useTxData(isSendingNativeToken, tx.amount, tx.recipientAddress, txToken)\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n\r\n  const {\r\n    gasCostFormatted,\r\n    gasPriceFormatted,\r\n    gasLimit,\r\n    gasEstimation,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isCreation,\r\n    isOffChainSignature,\r\n  } = useEstimateTransactionGas({\r\n    txData: data,\r\n    txRecipient,\r\n    txType: tx.txType,\r\n    txAmount: txValue,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const [buttonStatus, setButtonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n  const isSpendingLimit = sameString(tx.txType, 'spendingLimit')\r\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\r\n  const doExecute = isExecution && executionApproved\r\n\r\n  const submitTx = async (txParameters: TxParameters) => {\r\n    setButtonStatus(ButtonStatus.LOADING)\r\n\r\n    if (!safeAddress) {\r\n      setButtonStatus(ButtonStatus.READY)\r\n      logError(Errors._802)\r\n      return\r\n    }\r\n\r\n    if (isSpendingLimit && txToken && tx.tokenSpendingLimit) {\r\n      const spendingLimitTokenAddress = isSendingNativeToken ? ZERO_ADDRESS : txToken.address\r\n      const spendingLimit = getSpendingLimitContract()\r\n      try {\r\n        await spendingLimit.methods\r\n          .executeAllowanceTransfer(\r\n            safeAddress,\r\n            spendingLimitTokenAddress,\r\n            tx.recipientAddress,\r\n            toTokenUnit(tx.amount, txToken.decimals),\r\n            ZERO_ADDRESS,\r\n            0,\r\n            tx.tokenSpendingLimit.delegate,\r\n            EMPTY_DATA,\r\n          )\r\n          .send({ from: tx.tokenSpendingLimit.delegate })\r\n          .on('transactionHash', () => onClose())\r\n      } catch (err) {\r\n        setButtonStatus(ButtonStatus.READY)\r\n        logError(Errors._801, err.message)\r\n      }\r\n      return\r\n    }\r\n\r\n    dispatch(\r\n      createTransaction({\r\n        safeAddress: safeAddress,\r\n        to: txRecipient as string,\r\n        valueInWei: txValue,\r\n        txData: data,\r\n        txNonce: txParameters.safeNonce,\r\n        safeTxGas: txParameters.safeTxGas,\r\n        ethParameters: txParameters,\r\n        notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n        delayExecution: !executionApproved,\r\n      }),\r\n    )\r\n    onClose()\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = gasPriceFormatted\r\n    const newGasPrice = txParameters.ethGasPrice\r\n    const oldSafeTxGas = gasEstimation\r\n    const newSafeTxGas = txParameters.safeTxGas\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={doExecute}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          {/* Header */}\r\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Send funds\" />\r\n\r\n          <Hairline />\r\n\r\n          <Block className={classes.container}>\r\n            {/* SafeInfo */}\r\n            <SafeInfo />\r\n            <Divider withArrow />\r\n\r\n            {/* Recipient */}\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Recipient\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\" data-testid=\"recipient-review-step\">\r\n              <Col xs={12}>\r\n                <PrefixedEthHashInfo\r\n                  hash={tx.recipientAddress}\r\n                  name={tx.recipientName}\r\n                  showCopyBtn\r\n                  showAvatar\r\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            {/* Amount */}\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Amount\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Img alt={txToken?.name as string} height={28} onError={setImageToPlaceholder} src={txToken?.logoUri} />\r\n              <Paragraph\r\n                className={classes.amount}\r\n                noMargin\r\n                size=\"md\"\r\n                data-testid={`amount-${txToken?.symbol as string}-review-step`}\r\n              >\r\n                {tx.amount} {txToken?.symbol}\r\n              </Paragraph>\r\n            </Row>\r\n\r\n            {isExecution && !isSpendingLimit && <ExecuteCheckbox onChange={setExecutionApproved} />}\r\n\r\n            {/* Tx Parameters */}\r\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\r\n            {!isSpendingLimit && (\r\n              <TxParametersDetail\r\n                txParameters={txParameters}\r\n                onEdit={toggleEditMode}\r\n                isTransactionCreation={isCreation}\r\n                isTransactionExecution={doExecute}\r\n                isOffChainSignature={isOffChainSignature}\r\n              />\r\n            )}\r\n          </Block>\r\n\r\n          {/* Disclaimer */}\r\n          {/* FIXME Estimation should be fixed to be used with spending limits */}\r\n          {!isSpendingLimit && txEstimationExecutionStatus !== EstimationStatus.LOADING && (\r\n            <ReviewInfoText\r\n              gasCostFormatted={gasCostFormatted}\r\n              isCreation={isCreation}\r\n              isExecution={doExecute}\r\n              isOffChainSignature={isOffChainSignature}\r\n              safeNonce={txParameters.safeNonce}\r\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n            />\r\n          )}\r\n\r\n          {/* Footer */}\r\n          <Modal.Footer withoutBorder={!isSpendingLimit && buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ReviewSendFundsTx\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","import { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\r\n  const nativeCurrency = getNativeCurrency()\r\n\r\n  return (\r\n    <>\r\n      <PrefixedEthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { ReactElement } from 'react'\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from '../layout/Paragraph'\r\n\r\ninterface ExecuteCheckboxProps {\r\n  onChange: (val: boolean) => unknown\r\n}\r\n\r\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onChange(e.target.checked)\r\n  }\r\n  return (\r\n    <Row margin=\"md\">\r\n      <Paragraph noMargin>\r\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\r\n      </Paragraph>\r\n      <FormControlLabel\r\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\r\n        label=\"Execute transaction\"\r\n        data-testid=\"execute-checkbox\"\r\n      />\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ExecuteCheckbox\r\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\r\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\r\nimport { AbiItem } from 'web3-utils'\r\n\r\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\r\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\r\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\r\n\r\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\r\n}\r\n\r\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\r\n}\r\n\r\nexport const getERC20TokenContract = createERC20TokenContract\r\n\r\nexport const getERC721TokenContract = createERC721TokenContract\r\n"],"sourceRoot":""}