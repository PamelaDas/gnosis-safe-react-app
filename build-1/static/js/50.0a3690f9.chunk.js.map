{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/ExecuteCheckbox/index.tsx"],"names":["styles","createStyles","container","padding","md","lg","value","marginLeft","sm","outerData","borderRadius","border","minHeight","data","wordBreak","overflow","fontSize","fontFamily","maxHeight","letterSpacing","fontStretch","lineHeight","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewCustomTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","extractSafeAddress","nativeCurrency","getNativeCurrency","useState","executionApproved","setExecutionApproved","useEstimateTransactionGas","txRecipient","contractAddress","txData","trim","txAmount","toTokenUnit","decimals","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","doExecute","useEstimationStatus","buttonStatus","EditableTxParameters","ethGasLimit","ethGasPrice","safeTxGas","toString","txParameters","toggleEditMode","ModalHeader","subTitle","title","Hairline","Block","className","SafeInfo","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","style","align","Col","xs","PrefixedEthHashInfo","hash","name","contractName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","symbol","ExecuteCheckbox","onChange","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","ReviewInfoText","safeNonce","Modal","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","txValue","createTransaction","to","valueInWei","txNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","delayExecution","console","error","submitTx","status","undefined","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","useSelector","currentSafeWithNames","address","ethBalance","safeName","control","defaultChecked","e","target","checked","label"],"mappings":"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","file":"static/js/50.0a3690f9.chunk.js","sourcesContent":["import { border, lg, md, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  value: {\r\n    marginLeft: sm,\r\n  },\r\n  outerData: {\r\n    borderRadius: '5px',\r\n    border: `1px solid ${border}`,\r\n    padding: '11px',\r\n    minHeight: '21px',\r\n  },\r\n  data: {\r\n    wordBreak: 'break-all',\r\n    overflow: 'auto',\r\n    fontSize: '14px',\r\n    fontFamily: 'Averta',\r\n    maxHeight: '100px',\r\n    letterSpacing: 'normal',\r\n    fontStretch: 'normal',\r\n    lineHeight: '1.43',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import { ReactElement, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport Divider from 'src/components/Divider'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { useEstimateTransactionGas, EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { styles } from './style'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\r\n\r\nexport type ReviewCustomTxProps = {\r\n  contractAddress: string\r\n  contractName?: string\r\n  data: string\r\n  value: string\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  tx: ReviewCustomTxProps\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst ReviewCustomTx = ({ onClose, onPrev, tx }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = extractSafeAddress()\r\n  const nativeCurrency = getNativeCurrency()\r\n  const [executionApproved, setExecutionApproved] = useState<boolean>(true)\r\n\r\n  const {\r\n    gasLimit,\r\n    gasEstimation,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isCreation,\r\n    isOffChainSignature,\r\n  } = useEstimateTransactionGas({\r\n    txRecipient: tx.contractAddress as string,\r\n    txData: tx.data ? tx.data.trim() : '',\r\n    txAmount: tx.value ? toTokenUnit(tx.value, nativeCurrency.decimals) : '0',\r\n  })\r\n\r\n  const doExecute = isExecution && executionApproved\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    const txRecipient = tx.contractAddress\r\n    const txData = tx.data ? tx.data.trim() : ''\r\n    const txValue = tx.value ? toTokenUnit(tx.value, nativeCurrency.decimals) : '0'\r\n\r\n    if (safeAddress) {\r\n      dispatch(\r\n        createTransaction({\r\n          safeAddress: safeAddress,\r\n          to: txRecipient as string,\r\n          valueInWei: txValue,\r\n          txData,\r\n          txNonce: txParameters.safeNonce,\r\n          safeTxGas: txParameters.safeTxGas,\r\n          ethParameters: txParameters,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n          delayExecution: !executionApproved,\r\n        }),\r\n      )\r\n    } else {\r\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={doExecute}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation.toString()}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <ModalHeader onClose={onClose} subTitle=\"2 of 2\" title=\"Contract interaction\" />\r\n          <Hairline />\r\n          <Block className={classes.container}>\r\n            <SafeInfo />\r\n            <Divider withArrow />\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Recipient\r\n              </Paragraph>\r\n            </Row>\r\n\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={12}>\r\n                <PrefixedEthHashInfo\r\n                  hash={tx.contractAddress as string}\r\n                  name={tx.contractName ?? ''}\r\n                  showAvatar\r\n                  showCopyBtn\r\n                  explorerUrl={getExplorerInfo(tx.contractAddress as string)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Value\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri || ''} />\r\n              <Paragraph className={classes.value} noMargin size=\"md\">\r\n                {tx.value || 0}\r\n                {' ' + nativeCurrency.symbol}\r\n              </Paragraph>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Data (hex encoded)\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col className={classes.outerData}>\r\n                <Row className={classes.data} size=\"md\">\r\n                  {tx.data}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n\r\n            {isExecution && <ExecuteCheckbox onChange={setExecutionApproved} />}\r\n\r\n            {/* Tx Parameters */}\r\n            <TxParametersDetail\r\n              txParameters={txParameters}\r\n              onEdit={toggleEditMode}\r\n              isTransactionCreation={isCreation}\r\n              isTransactionExecution={doExecute}\r\n              isOffChainSignature={isOffChainSignature}\r\n            />\r\n          </Block>\r\n          {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\r\n            <ReviewInfoText\r\n              gasCostFormatted={gasCostFormatted}\r\n              isCreation={isCreation}\r\n              isExecution={doExecute}\r\n              isOffChainSignature={isOffChainSignature}\r\n              safeNonce={txParameters.safeNonce}\r\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n            />\r\n          )}\r\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ReviewCustomTx\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","import { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\r\n  const nativeCurrency = getNativeCurrency()\r\n\r\n  return (\r\n    <>\r\n      <PrefixedEthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { ReactElement } from 'react'\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from '../layout/Paragraph'\r\n\r\ninterface ExecuteCheckboxProps {\r\n  onChange: (val: boolean) => unknown\r\n}\r\n\r\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onChange(e.target.checked)\r\n  }\r\n  return (\r\n    <Row margin=\"md\">\r\n      <Paragraph noMargin>\r\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\r\n      </Paragraph>\r\n      <FormControlLabel\r\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\r\n        label=\"Execute transaction\"\r\n        data-testid=\"execute-checkbox\"\r\n      />\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ExecuteCheckbox\r\n"],"sourceRoot":""}