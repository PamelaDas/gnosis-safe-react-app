{"version":3,"sources":["components/forms/Field/index.tsx","routes/safe/components/Balances/SendModal/screens/ModalHeader/style.ts","routes/safe/components/Balances/SendModal/screens/ModalHeader/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","logic/hooks/useEstimateTransactionGas.tsx","routes/safe/components/Transactions/helpers/TxParametersDetail/index.tsx","components/TransactionFailText/index.tsx","components/TransactionsFees/index.tsx","components/ReviewInfoText/index.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/style.ts","routes/safe/components/Transactions/helpers/EditTxParametersForm/index.tsx","routes/safe/components/Transactions/helpers/EditableTxParameters.tsx","logic/hooks/useEstimationStatus.tsx","assets/icons/info_red.svg","routes/safe/container/hooks/useTransactionParameters.ts","routes/safe/components/Transactions/helpers/utils.ts","routes/safe/components/Transactions/helpers/useSafeTxGas.ts"],"names":["GnoField","props","styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","chainIndicator","alignItems","icon","useStyles","makeStyles","ModalHeader","onClose","subTitle","title","iconUrl","classes","connectedNetwork","getChainInfo","Row","align","className","grow","alt","src","Paragraph","noMargin","weight","chainId","ChainIndicator","IconButton","disableRipple","onClick","overflowStyle","overflow","root","paddingTop","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","style","stylesBasedOn","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","submitting","validating","form","validate","EstimationStatus","checkIfTxIsExecution","threshold","preApprovingOwner","txConfirmations","txType","sameString","checkIfTxIsApproveAndExecution","checkIfTxIsCreation","getDefaultGasEstimation","txEstimationExecutionStatus","gasPrice","gasPriceFormatted","isExecution","isCreation","isOffChainSignature","gasEstimation","gasCost","gasCostFormatted","gasLimit","useEstimateTransactionGas","txRecipient","txData","txAmount","operation","safeTxGas","manualGasPrice","manualGasLimit","useState","LOADING","setGasEstimation","nativeCurrency","getNativeCurrency","useSelector","currentSafe","address","safeAddress","currentVersion","safeVersion","providerSelector","from","account","smartContractWallet","providerName","useEffect","estimateGas","a","length","Number","size","checkIfOffChainSignatureIsPossible","SUCCESS","approvalAndExecution","safeTxGasEstimation","ethGasLimitEstimation","transactionCallSuccess","estimateSafeTxGas","Operation","CALL","estimateTransactionGasLimit","toWei","calculateGasPrice","fromWei","toString","estimatedGasCosts","parseInt","fromTokenUnit","decimals","formatAmount","checkTransactionExecution","gasToken","ZERO_ADDRESS","refundReceiver","FAILURE","console","warn","message","TxParameterWrapper","styled","div","AccordionDetailsWrapper","StyledText","Text","ColoredText","isOutOfOrder","theme","colors","StyledButtonLink","ButtonLink","TxParametersDetail","onEdit","txParameters","compact","parametersStatus","isTransactionCreation","isTransactionExecution","nonce","currentSafeThreshold","defaultParameterStatus","isTxNonceOutOfOrder","setIsTxNonceOutOfOrder","isAccordionExpanded","setIsAccordionExpanded","safeNonce","safeNonceNumber","lastQueuedTxNonce","getLastTxNonce","showSafeTxGas","useSafeTxGas","isNaN","expanded","areSafeParamsEnabled","areEthereumParamsVisible","ethereumTxParametersTitle","ethNonce","ethGasLimit","ethGasPrice","textSize","executionWarningRow","display","warningIcon","sm","TransactionFailText","isWrongChain","shouldSwitchWalletChain","isGranted","grantedSelector","errorDesc","Img","InfoIcon","TransactionFees","transactionAction","as","strong","symbol","ReviewInfoTextWrapper","background","ReviewInfoText","txParamsSafeNonce","lastTxNonce","storeNextNonce","extractSafeAddress","recommendedNonce","setRecommendedNonce","fetchRecommendedNonce","getRecommendedNonce","transactionsToGo","warningMessage","container","amount","buttonRow","gap","StyledDivider","Divider","StyledDividerFooter","SafeOptions","EthereumOptions","StyledLink","Link","StyledTextMt","formValidation","values","minValue","EditTxParametersForm","onCloseFormHandler","withoutMargin","Block","Field","defaultValue","placeholder","type","min","component","disabled","href","target","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","EditableTxParameters","closeEditModalCallback","isEditMode","toggleEditMode","useManualValues","setUseManualValues","useTransactionParameters","parameterStatus","initialEthGasLimit","initialEthGasPrice","initialSafeNonce","initialSafeTxGas","setEthGasPrice","setEthGasLimit","setSafeNonce","setSafeTxGas","setEthNonce","toggleStatus","prev","useEstimationStatus","txEstimationStatus","ButtonStatus","DISABLED","buttonStatus","setButtonStatus","mounted","READY","isCancelTransaction","connectedWalletAddress","userAccountSelector","currentSafeCurrentVersion","state","ethGasPriceInGWei","setEthGasPriceInGWei","getNonce","getUserNonce","res","getSafeNonce","logError","Errors","_616","hasFeature","FEATURES","SAFE_TX_GAS_OPTIONAL"],"mappings":"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","file":"static/js/5.32f877fe.chunk.js","sourcesContent":["import { Field } from 'react-final-form'\r\n\r\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import { lg, md, secondaryText } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  chainIndicator: {\r\n    padding: `0 ${md}`,\r\n    height: '20px',\r\n    alignItems: 'center',\r\n  },\r\n  icon: {\r\n    width: '20px',\r\n    marginRight: '10px',\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { ReactElement } from 'react'\r\n\r\nimport ChainIndicator from 'src/components/ChainIndicator'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { getChainInfo } from 'src/config'\r\nimport { styles } from './style'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface HeaderProps {\r\n  onClose: () => void\r\n  subTitle?: string\r\n  title: string\r\n  iconUrl?: string\r\n}\r\n\r\nexport const ModalHeader = ({ onClose, subTitle, title, iconUrl }: HeaderProps): ReactElement => {\r\n  const classes = useStyles()\r\n  const connectedNetwork = getChainInfo()\r\n\r\n  return (\r\n    <Row align=\"center\" className={classes.heading} grow>\r\n      {iconUrl && <img className={classes.icon} alt={title} src={iconUrl} />}\r\n      <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n        {title}\r\n      </Paragraph>\r\n      <Paragraph className={classes.annotation}>{subTitle ? subTitle : ''}</Paragraph>\r\n      <Row className={classes.chainIndicator}>\r\n        {connectedNetwork.chainId && <ChainIndicator chainId={connectedNetwork.chainId} />}\r\n      </Row>\r\n      <IconButton disableRipple onClick={onClose}>\r\n        <Close className={classes.closeIcon} />\r\n      </IconButton>\r\n    </Row>\r\n  )\r\n}\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import { ReactElement } from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any): ReactElement => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","import { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { List } from 'immutable'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { fromWei, toWei } from 'web3-utils'\r\n\r\nimport { getNativeCurrency } from 'src/config'\r\nimport {\r\n  checkTransactionExecution,\r\n  estimateSafeTxGas,\r\n  estimateTransactionGasLimit,\r\n} from 'src/logic/safe/transactions/gas'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\r\nimport { calculateGasPrice } from 'src/logic/wallets/ethTransactions'\r\nimport { currentSafe } from 'src/logic/safe/store/selectors'\r\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\r\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\r\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\r\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nexport enum EstimationStatus {\r\n  LOADING = 'LOADING',\r\n  FAILURE = 'FAILURE',\r\n  SUCCESS = 'SUCCESS',\r\n}\r\n\r\nexport const checkIfTxIsExecution = (\r\n  threshold: number,\r\n  preApprovingOwner?: string,\r\n  txConfirmations?: number,\r\n  txType?: string,\r\n): boolean => {\r\n  if (\r\n    threshold === 1 ||\r\n    sameString(txType, 'spendingLimit') ||\r\n    (txConfirmations !== undefined && txConfirmations >= threshold)\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  if (preApprovingOwner && txConfirmations) {\r\n    return txConfirmations + 1 === threshold\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const checkIfTxIsApproveAndExecution = (\r\n  threshold: number,\r\n  txConfirmations: number,\r\n  txType?: string,\r\n  preApprovingOwner?: string,\r\n): boolean => {\r\n  if (preApprovingOwner) {\r\n    return txConfirmations + 1 === threshold || sameString(txType, 'spendingLimit')\r\n  }\r\n\r\n  if (threshold === 1) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const checkIfTxIsCreation = (txConfirmations: number, txType?: string): boolean =>\r\n  txConfirmations === 0 && !sameString(txType, 'spendingLimit')\r\n\r\ntype UseEstimateTransactionGasProps = {\r\n  txData: string\r\n  txRecipient: string\r\n  txConfirmations?: List<Confirmation>\r\n  txAmount?: string\r\n  preApprovingOwner?: string\r\n  operation?: number\r\n  safeTxGas?: string\r\n  txType?: string\r\n  manualGasPrice?: string\r\n  manualGasLimit?: string\r\n}\r\n\r\nexport type TransactionGasEstimationResult = {\r\n  txEstimationExecutionStatus: EstimationStatus\r\n  gasEstimation: string // Amount of gas needed for execute or approve the transaction\r\n  gasCost: string // Cost of gas in raw format (estimatedGas * gasPrice)\r\n  gasCostFormatted: string // Cost of gas in format '< | > 100'\r\n  gasPrice: string // Current price of gas unit\r\n  gasPriceFormatted: string // Current gas price formatted\r\n  gasLimit: string // Minimum gas requited to execute the Tx\r\n  isExecution: boolean // Returns true if the user will execute the tx or false if it just signs it\r\n  isCreation: boolean // Returns true if the transaction is a creation transaction\r\n  isOffChainSignature: boolean // Returns true if offChainSignature is available\r\n}\r\n\r\nconst getDefaultGasEstimation = (\r\n  txEstimationExecutionStatus: EstimationStatus,\r\n  gasPrice: string,\r\n  gasPriceFormatted: string,\r\n  isExecution = false,\r\n  isCreation = false,\r\n  isOffChainSignature = false,\r\n): TransactionGasEstimationResult => {\r\n  return {\r\n    txEstimationExecutionStatus,\r\n    gasEstimation: '0',\r\n    gasCost: '0',\r\n    gasCostFormatted: '< 0.001',\r\n    gasPrice,\r\n    gasPriceFormatted,\r\n    gasLimit: '0',\r\n    isExecution,\r\n    isCreation,\r\n    isOffChainSignature,\r\n  }\r\n}\r\n\r\nexport const useEstimateTransactionGas = ({\r\n  txRecipient,\r\n  txData,\r\n  txConfirmations,\r\n  txAmount,\r\n  preApprovingOwner,\r\n  operation,\r\n  safeTxGas,\r\n  txType,\r\n  manualGasPrice,\r\n  manualGasLimit,\r\n}: UseEstimateTransactionGasProps): TransactionGasEstimationResult => {\r\n  const [gasEstimation, setGasEstimation] = useState<TransactionGasEstimationResult>(\r\n    getDefaultGasEstimation(EstimationStatus.LOADING, '0', '0'),\r\n  )\r\n  const nativeCurrency = getNativeCurrency()\r\n  const { address: safeAddress = '', threshold = 1, currentVersion: safeVersion = '' } = useSelector(currentSafe) ?? {}\r\n  const { account: from, smartContractWallet, name: providerName } = useSelector(providerSelector)\r\n  useEffect(() => {\r\n    const estimateGas = async () => {\r\n      if (!txData.length) {\r\n        return\r\n      }\r\n      const isExecution = checkIfTxIsExecution(Number(threshold), preApprovingOwner, txConfirmations?.size, txType)\r\n      const isOffChainSignature = checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)\r\n      const isCreation = checkIfTxIsCreation(txConfirmations?.size || 0, txType)\r\n\r\n      if (isOffChainSignature && !isCreation) {\r\n        setGasEstimation(\r\n          getDefaultGasEstimation(EstimationStatus.SUCCESS, '1', '1', isExecution, isCreation, isOffChainSignature),\r\n        )\r\n        return\r\n      }\r\n      const approvalAndExecution = checkIfTxIsApproveAndExecution(\r\n        Number(threshold),\r\n        txConfirmations?.size || 0,\r\n        txType,\r\n        preApprovingOwner,\r\n      )\r\n\r\n      try {\r\n        let safeTxGasEstimation = safeTxGas || '0'\r\n        let ethGasLimitEstimation = 0\r\n        let transactionCallSuccess = true\r\n        let txEstimationExecutionStatus = EstimationStatus.LOADING\r\n\r\n        if (isCreation) {\r\n          safeTxGasEstimation = await estimateSafeTxGas(\r\n            {\r\n              safeAddress,\r\n              txData,\r\n              txRecipient,\r\n              txAmount: txAmount || '0',\r\n              operation: operation || Operation.CALL,\r\n            },\r\n            safeVersion,\r\n          )\r\n        }\r\n\r\n        if (isExecution || approvalAndExecution) {\r\n          ethGasLimitEstimation = await estimateTransactionGasLimit({\r\n            safeAddress,\r\n            safeVersion,\r\n            txRecipient,\r\n            txData,\r\n            txAmount: txAmount || '0',\r\n            txConfirmations,\r\n            isExecution,\r\n            isOffChainSignature,\r\n            operation: operation || Operation.CALL,\r\n            from,\r\n            safeTxGas: safeTxGasEstimation,\r\n            approvalAndExecution,\r\n          })\r\n        }\r\n\r\n        const gasPrice = manualGasPrice ? toWei(manualGasPrice, 'gwei') : await calculateGasPrice()\r\n        const gasPriceFormatted = fromWei(gasPrice, 'gwei')\r\n        const gasLimit = manualGasLimit || ethGasLimitEstimation.toString()\r\n        const estimatedGasCosts = parseInt(gasLimit, 10) * parseInt(gasPrice, 10)\r\n        const gasCost = fromTokenUnit(estimatedGasCosts, nativeCurrency.decimals)\r\n        const gasCostFormatted = formatAmount(gasCost)\r\n\r\n        if (isExecution) {\r\n          transactionCallSuccess = await checkTransactionExecution({\r\n            safeAddress,\r\n            safeVersion,\r\n            txRecipient,\r\n            txData,\r\n            txAmount: txAmount || '0',\r\n            txConfirmations,\r\n            operation: operation || Operation.CALL,\r\n            from,\r\n            gasPrice: '0',\r\n            gasToken: ZERO_ADDRESS,\r\n            gasLimit,\r\n            refundReceiver: ZERO_ADDRESS,\r\n            safeTxGas: safeTxGasEstimation,\r\n            approvalAndExecution,\r\n          })\r\n        }\r\n\r\n        txEstimationExecutionStatus = transactionCallSuccess ? EstimationStatus.SUCCESS : EstimationStatus.FAILURE\r\n\r\n        setGasEstimation({\r\n          txEstimationExecutionStatus,\r\n          gasEstimation: safeTxGasEstimation,\r\n          gasCost,\r\n          gasCostFormatted,\r\n          gasPrice,\r\n          gasPriceFormatted,\r\n          gasLimit,\r\n          isExecution,\r\n          isCreation,\r\n          isOffChainSignature,\r\n        })\r\n      } catch (error) {\r\n        console.warn(error.message)\r\n        // If safeTxGas estimation fail we set this value to 0 (so up to all gasLimit can be used)\r\n        setGasEstimation(getDefaultGasEstimation(EstimationStatus.FAILURE, '1', '1'))\r\n      }\r\n    }\r\n\r\n    estimateGas()\r\n  }, [\r\n    txData,\r\n    safeAddress,\r\n    txRecipient,\r\n    txConfirmations,\r\n    txAmount,\r\n    preApprovingOwner,\r\n    nativeCurrency.decimals,\r\n    threshold,\r\n    from,\r\n    operation,\r\n    safeVersion,\r\n    smartContractWallet,\r\n    safeTxGas,\r\n    txType,\r\n    providerName,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  ])\r\n\r\n  return gasEstimation\r\n}\r\n","import { ReactElement, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\nimport { Text, ButtonLink, Accordion, AccordionSummary, AccordionDetails } from '@gnosis.pm/safe-react-components'\r\n\r\nimport { currentSafe, currentSafeThreshold } from 'src/logic/safe/store/selectors'\r\nimport { getLastTxNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { ParametersStatus, areEthereumParamsVisible, areSafeParamsEnabled, ethereumTxParametersTitle } from '../utils'\r\nimport useSafeTxGas from '../useSafeTxGas'\r\n\r\nconst TxParameterWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst AccordionDetailsWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\nconst StyledText = styled(Text)`\r\n  margin: 8px 0 0 0;\r\n`\r\n\r\nconst ColoredText = styled(Text)<{ isOutOfOrder: boolean }>`\r\n  color: ${(props) => (props.isOutOfOrder ? props.theme.colors.error : props.color)};\r\n`\r\n\r\nconst StyledButtonLink = styled(ButtonLink)`\r\n  padding-left: 0;\r\n  margin: 8px 0 0 0;\r\n\r\n  > p {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  txParameters: TxParameters\r\n  onEdit: () => void\r\n  compact?: boolean\r\n  parametersStatus?: ParametersStatus\r\n  isTransactionCreation: boolean\r\n  isTransactionExecution: boolean\r\n  isOffChainSignature: boolean\r\n}\r\n\r\nexport const TxParametersDetail = ({\r\n  onEdit,\r\n  txParameters,\r\n  compact = true,\r\n  parametersStatus,\r\n  isTransactionCreation,\r\n  isTransactionExecution,\r\n  isOffChainSignature,\r\n}: Props): ReactElement | null => {\r\n  const { nonce } = useSelector(currentSafe)\r\n  const threshold = useSelector(currentSafeThreshold) || 1\r\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\r\n\r\n  const [isTxNonceOutOfOrder, setIsTxNonceOutOfOrder] = useState(false)\r\n  const [isAccordionExpanded, setIsAccordionExpanded] = useState(false)\r\n\r\n  const { safeNonce = '' } = txParameters\r\n  const safeNonceNumber = parseInt(safeNonce, 10)\r\n  const lastQueuedTxNonce = useSelector(getLastTxNonce)\r\n  const showSafeTxGas = useSafeTxGas()\r\n\r\n  useEffect(() => {\r\n    if (Number.isNaN(safeNonceNumber)) return\r\n    if (safeNonceNumber === nonce) return\r\n    if (lastQueuedTxNonce === undefined && safeNonceNumber !== nonce) {\r\n      setIsAccordionExpanded(true)\r\n      setIsTxNonceOutOfOrder(true)\r\n    }\r\n    if (lastQueuedTxNonce && safeNonceNumber !== lastQueuedTxNonce + 1) {\r\n      setIsAccordionExpanded(true)\r\n      setIsTxNonceOutOfOrder(true)\r\n    }\r\n  }, [lastQueuedTxNonce, nonce, safeNonceNumber])\r\n\r\n  if (!isTransactionExecution && !isTransactionCreation && isOffChainSignature) {\r\n    return null\r\n  }\r\n\r\n  const onChangeExpand = () => {\r\n    setIsAccordionExpanded(!isAccordionExpanded)\r\n  }\r\n\r\n  return (\r\n    <Accordion compact={compact} expanded={isAccordionExpanded} onChange={onChangeExpand}>\r\n      <AccordionSummary>\r\n        <Text size=\"lg\">Advanced options</Text>\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <AccordionDetailsWrapper>\r\n          <StyledText size=\"md\" color=\"placeHolder\">\r\n            Safe transaction\r\n          </StyledText>\r\n\r\n          <TxParameterWrapper>\r\n            <ColoredText\r\n              size=\"lg\"\r\n              isOutOfOrder={isTxNonceOutOfOrder}\r\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n            >\r\n              Safe nonce\r\n            </ColoredText>\r\n            <ColoredText\r\n              size=\"lg\"\r\n              isOutOfOrder={isTxNonceOutOfOrder}\r\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n            >\r\n              {txParameters.safeNonce}\r\n            </ColoredText>\r\n          </TxParameterWrapper>\r\n\r\n          {showSafeTxGas && (\r\n            <TxParameterWrapper>\r\n              <Text\r\n                size=\"lg\"\r\n                color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n              >\r\n                SafeTxGas\r\n              </Text>\r\n              <Text\r\n                size=\"lg\"\r\n                color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n              >\r\n                {txParameters.safeTxGas}\r\n              </Text>\r\n            </TxParameterWrapper>\r\n          )}\r\n\r\n          {areEthereumParamsVisible(parametersStatus || defaultParameterStatus) && (\r\n            <>\r\n              <TxParameterWrapper>\r\n                <StyledText size=\"md\" color=\"placeHolder\">\r\n                  {ethereumTxParametersTitle(isTransactionExecution)}\r\n                </StyledText>\r\n              </TxParameterWrapper>\r\n\r\n              <TxParameterWrapper>\r\n                <Text size=\"lg\">Nonce</Text>\r\n                <Text size=\"lg\">{txParameters.ethNonce}</Text>\r\n              </TxParameterWrapper>\r\n\r\n              <TxParameterWrapper>\r\n                <Text size=\"lg\">Gas limit</Text>\r\n                <Text size=\"lg\">{txParameters.ethGasLimit}</Text>\r\n              </TxParameterWrapper>\r\n\r\n              <TxParameterWrapper>\r\n                <Text size=\"lg\">Gas price</Text>\r\n                <Text size=\"lg\">{txParameters.ethGasPrice}</Text>\r\n              </TxParameterWrapper>\r\n            </>\r\n          )}\r\n          <StyledButtonLink color=\"primary\" textSize=\"xl\" onClick={onEdit}>\r\n            Edit\r\n          </StyledButtonLink>\r\n        </AccordionDetailsWrapper>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  )\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\nimport { sm } from 'src/theme/variables'\r\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Img from 'src/components/layout/Img'\r\nimport InfoIcon from 'src/assets/icons/info_red.svg'\r\n\r\nimport { useSelector } from 'react-redux'\r\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\r\nimport { shouldSwitchWalletChain } from 'src/logic/wallets/store/selectors'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\n\r\nconst styles = createStyles({\r\n  executionWarningRow: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  warningIcon: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype TransactionFailTextProps = {\r\n  txEstimationExecutionStatus: EstimationStatus\r\n  isExecution: boolean\r\n}\r\n\r\nexport const TransactionFailText = ({\r\n  txEstimationExecutionStatus,\r\n  isExecution,\r\n}: TransactionFailTextProps): React.ReactElement | null => {\r\n  const classes = useStyles()\r\n  const threshold = useSelector(currentSafeThreshold)\r\n  const isWrongChain = useSelector(shouldSwitchWalletChain)\r\n  const isGranted = useSelector(grantedSelector)\r\n\r\n  if (txEstimationExecutionStatus !== EstimationStatus.FAILURE) {\r\n    return null\r\n  }\r\n\r\n  let errorDesc = 'To save gas costs, avoid creating the transaction.'\r\n  if (isExecution) {\r\n    errorDesc =\r\n      threshold && threshold > 1\r\n        ? `To save gas costs, reject this transaction`\r\n        : `To save gas costs, avoid executing the transaction.`\r\n  }\r\n\r\n  const error = isGranted\r\n    ? `This transaction will most likely fail. ${errorDesc}`\r\n    : isWrongChain\r\n    ? 'Your wallet is connected to the wrong chain.'\r\n    : \"You are currently not an owner of this Safe and won't be able to submit this transaction.\"\r\n\r\n  return (\r\n    <Row align=\"center\">\r\n      <Paragraph color=\"error\" className={classes.executionWarningRow}>\r\n        <Img alt=\"Info Tooltip\" height={16} src={InfoIcon} className={classes.warningIcon} />\r\n        {error}\r\n      </Paragraph>\r\n    </Row>\r\n  )\r\n}\r\n","import { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { getNativeCurrency } from 'src/config'\r\nimport { TransactionFailText } from 'src/components/TransactionFailText'\r\nimport { Text } from '@gnosis.pm/safe-react-components'\r\n\r\ntype TransactionFailTextProps = {\r\n  txEstimationExecutionStatus: EstimationStatus\r\n  gasCostFormatted?: string\r\n  isExecution: boolean\r\n  isCreation: boolean\r\n  isOffChainSignature: boolean\r\n}\r\n\r\nexport const TransactionFees = ({\r\n  gasCostFormatted,\r\n  isExecution,\r\n  isCreation,\r\n  isOffChainSignature,\r\n  txEstimationExecutionStatus,\r\n}: TransactionFailTextProps): React.ReactElement | null => {\r\n  const nativeCurrency = getNativeCurrency()\r\n  let transactionAction\r\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\r\n    return null\r\n  }\r\n  if (isCreation) {\r\n    transactionAction = 'create'\r\n  } else if (isExecution) {\r\n    transactionAction = 'execute'\r\n  } else {\r\n    transactionAction = 'approve'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {gasCostFormatted != null && (\r\n        <Paragraph size=\"lg\" align=\"center\">\r\n          You&apos;re about to {transactionAction} a transaction and will have to confirm it with your currently\r\n          connected wallet.{' '}\r\n          {!isOffChainSignature && (\r\n            <>\r\n              Make sure you have\r\n              <Text size=\"lg\" as=\"span\" color=\"text\" strong>\r\n                {' '}\r\n                {gasCostFormatted} {nativeCurrency.symbol}{' '}\r\n              </Text>\r\n              in this wallet to fund the associated transaction fee.\r\n            </>\r\n          )}\r\n        </Paragraph>\r\n      )}\r\n      <TransactionFailText txEstimationExecutionStatus={txEstimationExecutionStatus} isExecution={isExecution} />\r\n    </>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport { Text } from '@gnosis.pm/safe-react-components'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { currentSafe } from 'src/logic/safe/store/selectors'\r\nimport { getLastTxNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { lg, sm } from 'src/theme/variables'\r\nimport { TransactionFees } from '../TransactionsFees'\r\nimport { getRecommendedNonce } from 'src/logic/safe/api/fetchSafeTxGasEstimation'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport { useEffect, useState } from 'react'\r\n\r\ntype CustomReviewInfoTextProps = {\r\n  safeNonce?: string\r\n  testId?: string\r\n}\r\n\r\ntype ReviewInfoTextProps = Parameters<typeof TransactionFees>[0] & CustomReviewInfoTextProps\r\n\r\nconst ReviewInfoTextWrapper = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  padding: ${sm} ${lg};\r\n`\r\n\r\nexport const ReviewInfoText = ({\r\n  gasCostFormatted,\r\n  isCreation,\r\n  isExecution,\r\n  isOffChainSignature,\r\n  safeNonce: txParamsSafeNonce = '',\r\n  testId,\r\n  txEstimationExecutionStatus,\r\n}: ReviewInfoTextProps): React.ReactElement => {\r\n  const { nonce } = useSelector(currentSafe)\r\n  const safeNonceNumber = parseInt(txParamsSafeNonce, 10)\r\n  const lastTxNonce = useSelector(getLastTxNonce)\r\n  const storeNextNonce = `${lastTxNonce && lastTxNonce + 1}`\r\n  const safeAddress = extractSafeAddress()\r\n  const [recommendedNonce, setRecommendedNonce] = useState<string>(storeNextNonce)\r\n\r\n  useEffect(() => {\r\n    const fetchRecommendedNonce = async () => {\r\n      try {\r\n        const recommendedNonce = (await getRecommendedNonce(safeAddress)).toString()\r\n        setRecommendedNonce(recommendedNonce)\r\n      } catch (e) {\r\n        return\r\n      }\r\n    }\r\n    fetchRecommendedNonce()\r\n  }, [safeAddress])\r\n\r\n  const warningMessage = () => {\r\n    const isTxNonceOutOfOrder = () => {\r\n      // safeNonce can be undefined while waiting for the request.\r\n      if (isNaN(safeNonceNumber) || safeNonceNumber === nonce) return false\r\n      if (lastTxNonce !== undefined && safeNonceNumber === lastTxNonce + 1) return false\r\n      return true\r\n    }\r\n    const shouldShowWarning = isTxNonceOutOfOrder()\r\n    if (!shouldShowWarning) return null\r\n\r\n    const transactionsToGo = safeNonceNumber - nonce\r\n    return (\r\n      <Paragraph size=\"lg\" align=\"center\">\r\n        {transactionsToGo < 0 ? (\r\n          `Nonce ${txParamsSafeNonce} has already been used. Your transaction will fail. Please use nonce ${recommendedNonce}.`\r\n        ) : (\r\n          <>\r\n            <Text size=\"lg\" as=\"span\" color=\"text\" strong>\r\n              {transactionsToGo}\r\n            </Text>\r\n            {` transaction${\r\n              transactionsToGo > 1 ? 's' : ''\r\n            } will need to be created and executed before this transaction,\r\n        are you sure you want to do this?`}\r\n          </>\r\n        )}\r\n      </Paragraph>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ReviewInfoTextWrapper data-testid={testId}>\r\n      {warningMessage() || (\r\n        <TransactionFees\r\n          gasCostFormatted={gasCostFormatted}\r\n          isCreation={isCreation}\r\n          isExecution={isExecution}\r\n          isOffChainSignature={isOffChainSignature}\r\n          txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n        />\r\n      )}\r\n    </ReviewInfoTextWrapper>\r\n  )\r\n}\r\n","import { lg, md, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'space-between',\r\n    boxSizing: 'border-box',\r\n    height: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  amount: {\r\n    marginLeft: sm,\r\n  },\r\n  address: {\r\n    marginRight: sm,\r\n  },\r\n  buttonRow: {\r\n    height: '52px',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import { ReactElement } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Title, Text, Divider, Link, Icon } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport Block from 'src/components/layout/Block'\r\nimport Row from 'src/components/layout/Row'\r\nimport { styles } from './style'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { minValue } from 'src/components/forms/validator'\r\nimport { Modal } from 'src/components/Modal'\r\n\r\nimport { ParametersStatus, areSafeParamsEnabled, areEthereumParamsVisible, ethereumTxParametersTitle } from '../utils'\r\nimport useSafeTxGas from '../useSafeTxGas'\r\n\r\nconst StyledDivider = styled(Divider)`\r\n  margin: 0px;\r\n`\r\nconst StyledDividerFooter = styled(Divider)`\r\n  margin: 16px -24px;\r\n`\r\n\r\nconst SafeOptions = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n`\r\n\r\nconst EthereumOptions = styled.div`\r\n  display: flex;\r\n  /* justify-content: space-between; */\r\n  flex-wrap: wrap;\r\n  gap: 10px 20px;\r\n\r\n  div {\r\n    width: 216px !important;\r\n  }\r\n`\r\nconst StyledLink = styled(Link)`\r\n  margin: 16px 0 0 0;\r\n  display: inline-flex;\r\n  align-items: center;\r\n\r\n  > :first-of-type {\r\n    margin-right: 5px;\r\n  }\r\n`\r\nconst StyledText = styled(Text)`\r\n  margin: 0 0 4px 0;\r\n`\r\nconst StyledTextMt = styled(Text)`\r\n  margin: 16px 0 4px 0;\r\n`\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface Props {\r\n  txParameters: TxParameters\r\n  onClose: (txParameters?: TxParameters) => void\r\n  parametersStatus: ParametersStatus\r\n  isExecution: boolean\r\n}\r\n\r\nconst formValidation = (values) => {\r\n  const { ethGasLimit, ethGasPrice, ethNonce, safeNonce, safeTxGas } = values ?? {}\r\n\r\n  const ethGasLimitValidation = minValue(0, true)(ethGasLimit)\r\n\r\n  const ethGasPriceValidation = minValue(0, true)(ethGasPrice)\r\n\r\n  const ethNonceValidation = minValue(0, true)(ethNonce)\r\n\r\n  const safeNonceValidation = minValue(0, true)(safeNonce)\r\n\r\n  const safeTxGasValidation = minValue(0, true)(safeTxGas)\r\n\r\n  return {\r\n    ethGasLimit: ethGasLimitValidation,\r\n    ethGasPrice: ethGasPriceValidation,\r\n    ethNonce: ethNonceValidation,\r\n    safeNonce: safeNonceValidation,\r\n    safeTxGas: safeTxGasValidation,\r\n  }\r\n}\r\n\r\nexport const EditTxParametersForm = ({\r\n  onClose,\r\n  txParameters,\r\n  parametersStatus = 'ENABLED',\r\n  isExecution,\r\n}: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const { safeNonce, safeTxGas, ethNonce, ethGasLimit, ethGasPrice } = txParameters\r\n  const showSafeTxGas = useSafeTxGas()\r\n\r\n  const onSubmit = (values: TxParameters) => {\r\n    onClose(values)\r\n  }\r\n\r\n  const onCloseFormHandler = () => {\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\r\n        <Title size=\"sm\" withoutMargin>\r\n          Advanced options\r\n        </Title>\r\n        <IconButton disableRipple onClick={onCloseFormHandler}>\r\n          <Close className={classes.closeIcon} />\r\n        </IconButton>\r\n      </Row>\r\n\r\n      <StyledDivider />\r\n\r\n      <Block className={classes.container}>\r\n        <GnoForm\r\n          initialValues={{\r\n            safeNonce: safeNonce || 0,\r\n            safeTxGas: safeTxGas || '',\r\n            ethNonce: ethNonce || '',\r\n            ethGasLimit: ethGasLimit || '',\r\n            ethGasPrice: ethGasPrice || '',\r\n          }}\r\n          onSubmit={onSubmit}\r\n          validation={formValidation}\r\n        >\r\n          {() => (\r\n            <>\r\n              <StyledText size=\"xl\" strong>\r\n                Safe transaction\r\n              </StyledText>\r\n\r\n              <SafeOptions>\r\n                <Field\r\n                  name=\"safeNonce\"\r\n                  defaultValue={safeNonce}\r\n                  placeholder=\"Safe nonce\"\r\n                  text=\"Safe nonce\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  component={TextField}\r\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\r\n                />\r\n                {showSafeTxGas && (\r\n                  <Field\r\n                    name=\"safeTxGas\"\r\n                    defaultValue={safeTxGas}\r\n                    placeholder=\"SafeTxGas\"\r\n                    text=\"SafeTxGas\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    component={TextField}\r\n                    disabled={!areSafeParamsEnabled(parametersStatus)}\r\n                  />\r\n                )}\r\n              </SafeOptions>\r\n\r\n              {areEthereumParamsVisible(parametersStatus) && (\r\n                <>\r\n                  <StyledTextMt size=\"xl\" strong>\r\n                    {ethereumTxParametersTitle(isExecution)}\r\n                  </StyledTextMt>\r\n\r\n                  <EthereumOptions>\r\n                    <Field\r\n                      name=\"ethNonce\"\r\n                      defaultValue={ethNonce}\r\n                      placeholder=\"Nonce\"\r\n                      text=\"Nonce\"\r\n                      type=\"number\"\r\n                      component={TextField}\r\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\r\n                    />\r\n                    <Field\r\n                      name=\"ethGasLimit\"\r\n                      defaultValue={ethGasLimit}\r\n                      placeholder=\"Gas limit\"\r\n                      text=\"Gas limit\"\r\n                      type=\"number\"\r\n                      component={TextField}\r\n                      disabled={parametersStatus === 'CANCEL_TRANSACTION'}\r\n                    />\r\n                    <Field\r\n                      name=\"ethGasPrice\"\r\n                      defaultValue={ethGasPrice}\r\n                      type=\"number\"\r\n                      placeholder=\"Gas price (GWEI)\"\r\n                      text=\"Gas price (GWEI)\"\r\n                      component={TextField}\r\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\r\n                    />\r\n                  </EthereumOptions>\r\n\r\n                  <StyledLink\r\n                    href=\"https://help.gnosis-safe.io/en/articles/4738445-configure-advanced-transaction-parameters-manually\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    <Text size=\"xl\" color=\"primary\">\r\n                      How can I configure these parameters manually?\r\n                    </Text>\r\n                    <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n                  </StyledLink>\r\n                </>\r\n              )}\r\n\r\n              <StyledDividerFooter />\r\n\r\n              {/* Footer */}\r\n              <Row align=\"center\" className={classes.buttonRow}>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onCloseFormHandler, text: 'Back' }}\r\n                  confirmButtonProps={{\r\n                    type: 'submit',\r\n                    text: 'Confirm',\r\n                    testId: 'submit-tx-btn',\r\n                  }}\r\n                />\r\n              </Row>\r\n            </>\r\n          )}\r\n        </GnoForm>\r\n      </Block>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { TxParameters, useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { EditTxParametersForm } from 'src/routes/safe/components/Transactions/helpers/EditTxParametersForm'\r\nimport { ParametersStatus } from './utils'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\r\n\r\ntype Props = {\r\n  children: (txParameters: TxParameters, toggleStatus: (txParameters?: TxParameters) => void) => any\r\n  isOffChainSignature: boolean\r\n  isExecution: boolean\r\n  parametersStatus?: ParametersStatus\r\n  ethGasLimit?: TxParameters['ethGasLimit']\r\n  ethGasPrice?: TxParameters['ethGasPrice']\r\n  safeNonce?: TxParameters['safeNonce']\r\n  safeTxGas?: TxParameters['safeTxGas']\r\n  closeEditModalCallback?: (txParameters: TxParameters) => void\r\n}\r\n\r\nexport const EditableTxParameters = ({\r\n  children,\r\n  isOffChainSignature,\r\n  isExecution,\r\n  parametersStatus,\r\n  ethGasLimit,\r\n  ethGasPrice,\r\n  safeNonce,\r\n  safeTxGas,\r\n  closeEditModalCallback,\r\n}: Props): React.ReactElement => {\r\n  const [isEditMode, toggleEditMode] = useState(false)\r\n  const [useManualValues, setUseManualValues] = useState(false)\r\n  const threshold = useSelector(currentSafeThreshold) || 1\r\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\r\n  const txParameters = useTransactionParameters({\r\n    parameterStatus: parametersStatus || defaultParameterStatus,\r\n    initialEthGasLimit: ethGasLimit,\r\n    initialEthGasPrice: ethGasPrice,\r\n    initialSafeNonce: safeNonce,\r\n    initialSafeTxGas: safeTxGas,\r\n  })\r\n  const { setEthGasPrice, setEthGasLimit, setSafeNonce, setSafeTxGas, setEthNonce } = txParameters\r\n\r\n  // Update TxParameters\r\n  useEffect(() => {\r\n    if (!useManualValues) {\r\n      setEthGasLimit(ethGasLimit)\r\n      setEthGasPrice(ethGasPrice)\r\n      setSafeTxGas(safeTxGas)\r\n    }\r\n  }, [ethGasLimit, setEthGasLimit, ethGasPrice, setEthGasPrice, useManualValues, safeTxGas, setSafeTxGas])\r\n\r\n  const toggleStatus = () => {\r\n    toggleEditMode((prev) => !prev)\r\n  }\r\n\r\n  const closeEditFormHandler = (txParameters?: TxParameters) => {\r\n    if (txParameters) {\r\n      setUseManualValues(true)\r\n      setSafeNonce(txParameters.safeNonce)\r\n      setSafeTxGas(txParameters.safeTxGas)\r\n      setEthGasLimit(txParameters.ethGasLimit)\r\n      setEthGasPrice(txParameters.ethGasPrice)\r\n      setEthNonce(txParameters.ethNonce)\r\n      closeEditModalCallback && closeEditModalCallback(txParameters)\r\n    }\r\n    toggleStatus()\r\n  }\r\n\r\n  return isEditMode ? (\r\n    <EditTxParametersForm\r\n      isExecution={isExecution}\r\n      txParameters={txParameters}\r\n      onClose={closeEditFormHandler}\r\n      parametersStatus={parametersStatus ? parametersStatus : defaultParameterStatus}\r\n    />\r\n  ) : (\r\n    children(txParameters, toggleStatus)\r\n  )\r\n}\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\r\n\r\nimport { EstimationStatus } from './useEstimateTransactionGas'\r\nimport { ButtonStatus } from 'src/components/Modal'\r\n\r\nexport const useEstimationStatus = (\r\n  txEstimationStatus?: EstimationStatus,\r\n): [buttonStatus: ButtonStatus, setButtonStatus: Dispatch<SetStateAction<ButtonStatus>>] => {\r\n  const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(ButtonStatus.DISABLED)\r\n\r\n  useEffect(() => {\r\n    let mounted = true\r\n\r\n    if (mounted) {\r\n      switch (txEstimationStatus) {\r\n        case EstimationStatus.LOADING:\r\n          setButtonStatus(ButtonStatus.LOADING)\r\n          break\r\n        default:\r\n          setButtonStatus(ButtonStatus.READY)\r\n          break\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [txEstimationStatus])\r\n\r\n  return [buttonStatus, setButtonStatus]\r\n}\r\n","export default __webpack_public_path__ + \"static/media/info_red.2d444d88.svg\";","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { toWei } from 'web3-utils'\r\n\r\nimport { getUserNonce } from 'src/logic/wallets/ethTransactions'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\r\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport { AppReduxState } from 'src/store'\r\nimport { getRecommendedNonce } from 'src/logic/safe/api/fetchSafeTxGasEstimation'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\n\r\nexport type TxParameters = {\r\n  safeNonce: string | undefined\r\n  setSafeNonce: (safeNonce: string | undefined) => void\r\n  safeTxGas: string | undefined\r\n  setSafeTxGas: (gas: string | undefined) => void\r\n  ethNonce: string | undefined\r\n  setEthNonce: (ethNonce: string | undefined) => void\r\n  ethGasLimit: string | undefined\r\n  setEthGasLimit: (ethGasLimit: string | undefined) => void\r\n  ethGasPrice: string | undefined\r\n  setEthGasPrice: (ethGasPrice: string | undefined) => void\r\n  ethGasPriceInGWei: string | undefined\r\n}\r\n\r\ntype Props = {\r\n  parameterStatus?: ParametersStatus\r\n  initialSafeNonce?: string\r\n  initialSafeTxGas?: string\r\n  initialEthGasLimit?: string\r\n  initialEthGasPrice?: string\r\n}\r\n\r\n/**\r\n * This hooks is used to store tx parameter\r\n * It needs to be initialized calling setGasEstimation.\r\n */\r\nexport const useTransactionParameters = (props?: Props): TxParameters => {\r\n  const isCancelTransaction = sameString(props?.parameterStatus || 'ENABLED', 'CANCEL_TRANSACTION')\r\n  const connectedWalletAddress = useSelector(userAccountSelector)\r\n  const safeAddress = extractSafeAddress()\r\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\r\n  const state = useSelector((state: AppReduxState) => state)\r\n\r\n  // Safe Params\r\n  const [safeNonce, setSafeNonce] = useState<string | undefined>(props?.initialSafeNonce)\r\n  // SafeTxGas: for a new Tx call requiredTxGas, for an existing tx get it from the backend.\r\n  const [safeTxGas, setSafeTxGas] = useState<string | undefined>(isCancelTransaction ? '0' : props?.initialSafeTxGas)\r\n\r\n  // ETH Params\r\n  const [ethNonce, setEthNonce] = useState<string | undefined>() // we delegate it to the wallet\r\n  const [ethGasLimit, setEthGasLimit] = useState<string | undefined>(props?.initialEthGasLimit) // call execTx until it returns a number > 0\r\n  const [ethGasPrice, setEthGasPrice] = useState<string | undefined>(props?.initialEthGasPrice) // get fast gas price\r\n  const [ethGasPriceInGWei, setEthGasPriceInGWei] = useState<string | undefined>() // get fast gas price\r\n\r\n  // Get nonce for connected wallet\r\n  useEffect(() => {\r\n    const getNonce = async () => {\r\n      const res = await getUserNonce(connectedWalletAddress)\r\n      setEthNonce(res.toString())\r\n    }\r\n\r\n    if (connectedWalletAddress) {\r\n      getNonce()\r\n    }\r\n  }, [connectedWalletAddress])\r\n\r\n  // Get ETH gas price\r\n  useEffect(() => {\r\n    if (!ethGasPrice) {\r\n      setEthGasPriceInGWei(undefined)\r\n      return\r\n    }\r\n    if (isCancelTransaction) {\r\n      setEthGasPrice('0')\r\n      return\r\n    }\r\n    setEthGasPriceInGWei(toWei(ethGasPrice, 'Gwei'))\r\n  }, [ethGasPrice, isCancelTransaction])\r\n\r\n  // Calc safe nonce\r\n  useEffect(() => {\r\n    const getSafeNonce = async () => {\r\n      if (safeAddress) {\r\n        try {\r\n          const recommendedNonce = (await getRecommendedNonce(safeAddress)).toString()\r\n          setSafeNonce(recommendedNonce)\r\n        } catch (e) {\r\n          logError(Errors._616, e.message)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (safeNonce === undefined) {\r\n      getSafeNonce()\r\n    }\r\n  }, [safeAddress, safeVersion, safeNonce, state])\r\n\r\n  return {\r\n    safeNonce,\r\n    setSafeNonce,\r\n    safeTxGas,\r\n    setSafeTxGas,\r\n    ethNonce,\r\n    setEthNonce,\r\n    ethGasLimit,\r\n    setEthGasLimit,\r\n    ethGasPrice,\r\n    setEthGasPrice,\r\n    ethGasPriceInGWei,\r\n  }\r\n}\r\n","export type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\r\n\r\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\r\n  return (\r\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\r\n  )\r\n}\r\n\r\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\r\n  return (\r\n    parametersStatus === 'ENABLED' ||\r\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\r\n  )\r\n}\r\n\r\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\r\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\r\n}\r\n","import { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useSelector } from 'react-redux'\r\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\r\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\r\n\r\nconst useSafeTxGas = (): boolean => {\r\n  const safeVersion = useSelector(currentSafeCurrentVersion)\r\n  const showSafeTxGas = !hasFeature(FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion)\r\n  return showSafeTxGas\r\n}\r\n\r\nexport default useSafeTxGas\r\n"],"sourceRoot":""}