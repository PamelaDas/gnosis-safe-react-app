{"version":3,"sources":["components/WhenFieldChanges/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/index.tsx","components/forms/Field/index.tsx","routes/safe/components/Balances/SendModal/screens/ModalHeader/style.ts","routes/safe/components/Balances/SendModal/screens/ModalHeader/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","../node_modules/react-final-form-listeners/dist/react-final-form-listeners.es.js","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","logic/collectibles/store/selectors/index.ts","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js"],"names":["WhenFieldChanges","field","set","to","name","subscription","onChange","input","selectedTokenStyles","createStyles","container","minHeight","padding","width","tokenData","margin","lineHeight","tokenImage","marginRight","sm","selectStyles","selectMenu","paddingRight","useSelectedCollectibleStyles","makeStyles","SelectedCollectible","tokenId","tokens","classes","token","find","id","shortener","textShortener","charsStart","charsEnd","MenuItem","className","ListItemIcon","Img","alt","description","height","onError","setImageToPlaceholder","src","image","ListItemText","primary","secondary","toString","Paragraph","color","size","style","opacity","weight","useCollectibleSelectFieldStyles","CollectibleSelectField","initialValue","Field","component","SelectField","disabled","length","renderValue","nftTokenId","validate","required","map","value","assetAddress","styles","qrCodeBtn","cursor","formContainer","md","lg","buttonRow","justifyContent","gap","display","useSelectedTokenStyles","SelectedToken","assets","asset","numberOfTokens","formatAmount","symbol","useTokenSelectFieldStyles","TokenSelectField","tokenClasses","assetsAddresses","Object","keys","slug","formMutators","setMax","args","state","utils","changeValue","onTokenChange","setRecipient","useStyles","SendCollectible","initialValues","onClose","onNext","recipientAddress","selectedToken","nftAssets","useSelector","nftAssetsSelector","nftTokens","nftTokensSelector","addressBook","currentNetworkAddressBook","useState","addressErrorMsg","setAddressErrorMsg","defaultEntry","address","predefinedAddress","addressBookEntry","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","useMemo","ModalHeader","subTitle","title","Hairline","GnoForm","onSubmit","values","recipientName","assetName","formState","mutators","selectedNFTTokens","filter","nftToken","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","onClick","role","tabIndex","Row","noMargin","letterSpacing","align","Col","xs","PrefixedEthHashInfo","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","between","tokenAddress","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","testId","text","GnoField","props","heading","boxSizing","maxHeight","annotation","secondaryText","marginLeft","headingText","fontSize","closeIcon","chainIndicator","alignItems","icon","iconUrl","connectedNetwork","getChainInfo","grow","chainId","ChainIndicator","IconButton","disableRipple","event","img","currentTarget","test","TokenPlaceholder","stylesBasedOn","flexDirection","flex","children","decorators","validation","render","handleSubmit","rest","submitting","validating","form","Bold","this","React","loaderContainer","close","detailsContainer","backgroundColor","background","button","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","handleClose","open","layout","legacyMode","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","QRIcon","Wrapper","styled","div","StyledDivider","DividerSRC","type","SelectInput","disableError","formControlProps","restInput","label","meta","showError","submitError","dirtySinceLastSubmit","touched","inputProps","htmlFor","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","nativeCurrency","getNativeCurrency","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","Component","OnChangeState","_React$Component","_this","previous","_proto","componentDidUpdate","_this$props","setState","OnChange","_ref","createElement","allowNull","useTextFieldLabelStyle","root","overflow","borderRadius","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","reason","a","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","flexGrow","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","NFT_ASSETS_REDUCER_ID","createSelector","NFT_TOKENS_REDUCER_ID","nftAssetsToListSelector","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","includes","other","_objectWithoutProperties","context","ListContext","clsx","alignItemsFlexStart","withStyles","theme","palette","action","active","flexShrink","marginTop"],"mappings":"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","file":"static/js/39.9c9b0bb2.chunk.js","sourcesContent":["import { OnChange } from 'react-final-form-listeners'\r\n\r\nimport GnoField from 'src/components/forms/Field'\r\n\r\nconst WhenFieldChanges = ({ field, set, to }: { field: string; set: string; to: string }): React.ReactElement => (\r\n  <GnoField name={set} subscription={{}}>\r\n    {(\r\n      // No subscription. We only use Field to get to the change function\r\n      { input: { onChange } },\r\n    ) => (\r\n      <OnChange name={field}>\r\n        {() => {\r\n          onChange(to)\r\n        }}\r\n      </OnChange>\r\n    )}\r\n  </GnoField>\r\n)\r\nexport default WhenFieldChanges\r\n","import { sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const selectedTokenStyles = createStyles({\r\n  container: {\r\n    minHeight: '55px',\r\n    padding: 0,\r\n    width: '100%',\r\n  },\r\n  tokenData: {\r\n    padding: 0,\r\n    margin: 0,\r\n    lineHeight: '14px',\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n\r\nexport const selectStyles = createStyles({\r\n  selectMenu: {\r\n    paddingRight: 0,\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { selectStyles, selectedTokenStyles } from './style'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { required } from 'src/components/forms/validator'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { textShortener } from 'src/utils/strings'\r\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nconst useSelectedCollectibleStyles = makeStyles(selectedTokenStyles)\r\n\r\ntype SelectedCollectibleProps = {\r\n  tokenId?: number | string\r\n  tokens: NFTToken[]\r\n}\r\n\r\nconst SelectedCollectible = ({ tokenId, tokens }: SelectedCollectibleProps): React.ReactElement => {\r\n  const classes = useSelectedCollectibleStyles()\r\n  const token = tokenId && tokens ? tokens.find(({ tokenId: id }) => tokenId === id) : null\r\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\r\n\r\n  return (\r\n    <MenuItem className={classes.container}>\r\n      {token ? (\r\n        <>\r\n          <ListItemIcon className={classes.tokenImage}>\r\n            <Img alt={token.description} height={28} onError={setImageToPlaceholder} src={token.image} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            className={classes.tokenData}\r\n            primary={shortener(token.name)}\r\n            secondary={`token ID: ${shortener(token.tokenId.toString())}`}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\r\n          Select a token*\r\n        </Paragraph>\r\n      )}\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\nconst useCollectibleSelectFieldStyles = makeStyles(selectStyles)\r\n\r\ntype CollectibleSelectFieldProps = {\r\n  initialValue?: number | string\r\n  tokens: NFTToken[]\r\n}\r\n\r\nexport const CollectibleSelectField = ({ initialValue, tokens }: CollectibleSelectFieldProps): React.ReactElement => {\r\n  const classes = useCollectibleSelectFieldStyles()\r\n\r\n  return (\r\n    <Field\r\n      className={classes.selectMenu}\r\n      component={SelectField}\r\n      disabled={!tokens.length}\r\n      initialValue={initialValue}\r\n      name=\"nftTokenId\"\r\n      renderValue={(nftTokenId) => <SelectedCollectible tokenId={nftTokenId} tokens={tokens} />}\r\n      validate={required}\r\n    >\r\n      {tokens.map((token) => (\r\n        <MenuItem key={`${token.assetAddress}-${token.tokenId}`} value={token.tokenId}>\r\n          <ListItemIcon className={classes.tokenImage}>\r\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.image} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={token.name} secondary={`token ID: ${token.tokenId}`} />\r\n        </MenuItem>\r\n      ))}\r\n    </Field>\r\n  )\r\n}\r\n","import { lg, md } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import { sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const selectedTokenStyles = createStyles({\r\n  container: {\r\n    minHeight: '55px',\r\n    padding: 0,\r\n    width: '100%',\r\n  },\r\n  tokenData: {\r\n    padding: 0,\r\n    margin: 0,\r\n    lineHeight: '14px',\r\n  },\r\n  tokenImage: {\r\n    display: 'block',\r\n    marginRight: sm,\r\n    height: 28,\r\n    width: 'auto',\r\n  },\r\n})\r\n\r\nexport const selectStyles = createStyles({\r\n  selectMenu: {\r\n    paddingRight: 0,\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { selectStyles, selectedTokenStyles } from './style'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { required } from 'src/components/forms/validator'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { textShortener } from 'src/utils/strings'\r\nimport { NFTAssets } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nconst useSelectedTokenStyles = makeStyles(selectedTokenStyles)\r\n\r\ntype SelectedTokenProps = {\r\n  assetAddress?: string\r\n  assets: NFTAssets\r\n}\r\n\r\nconst SelectedToken = ({ assetAddress, assets }: SelectedTokenProps): React.ReactElement => {\r\n  const classes = useSelectedTokenStyles()\r\n  const asset = assetAddress ? assets[assetAddress] : null\r\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\r\n\r\n  return (\r\n    <MenuItem className={classes.container}>\r\n      {asset && asset.numberOfTokens ? (\r\n        <>\r\n          <ListItemIcon>\r\n            <Img className={classes.tokenImage} alt={asset.name} onError={setImageToPlaceholder} src={asset.image} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            className={classes.tokenData}\r\n            primary={shortener(asset.name)}\r\n            secondary={`${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\r\n          Select an asset*\r\n        </Paragraph>\r\n      )}\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\nconst useTokenSelectFieldStyles = makeStyles(selectStyles)\r\n\r\ntype TokenSelectFieldProps = {\r\n  assets: NFTAssets\r\n  initialValue?: string\r\n}\r\n\r\nconst TokenSelectField = ({ assets, initialValue }: TokenSelectFieldProps): React.ReactElement => {\r\n  const classes = useTokenSelectFieldStyles()\r\n  const tokenClasses = useSelectedTokenStyles()\r\n  const assetsAddresses = Object.keys(assets)\r\n\r\n  return (\r\n    <Field\r\n      className={classes.selectMenu}\r\n      component={SelectField}\r\n      disabled={!assetsAddresses.length}\r\n      initialValue={initialValue}\r\n      name=\"assetAddress\"\r\n      renderValue={(assetAddress) => <SelectedToken assetAddress={assetAddress} assets={assets} />}\r\n      validate={required}\r\n    >\r\n      {assetsAddresses.map((assetAddress) => {\r\n        const asset = assets[assetAddress]\r\n\r\n        return (\r\n          <MenuItem key={asset.slug} value={assetAddress}>\r\n            <ListItemIcon>\r\n              <Img\r\n                className={tokenClasses.tokenImage}\r\n                alt={asset.name}\r\n                onError={setImageToPlaceholder}\r\n                src={asset.image}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              primary={asset.name}\r\n              secondary={`Count: ${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\r\n            />\r\n          </MenuItem>\r\n        )\r\n      })}\r\n    </Field>\r\n  )\r\n}\r\n\r\nexport default TokenSelectField\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { useState, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Divider from 'src/components/Divider'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\r\nimport { Modal } from 'src/components/Modal'\r\nimport WhenFieldChanges from 'src/components/WhenFieldChanges'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\r\nimport { nftAssetsSelector, nftTokensSelector } from 'src/logic/collectibles/store/selectors'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\r\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nimport { CollectibleSelectField } from './CollectibleSelectField'\r\nimport { styles } from './style'\r\nimport TokenSelectField from './TokenSelectField'\r\nimport { Erc721Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ModalHeader } from '../ModalHeader'\r\nimport { mustBeEthereumAddress } from 'src/components/forms/validator'\r\n\r\nconst formMutators = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => args[0])\r\n  },\r\n  onTokenChange: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => '')\r\n  },\r\n  setRecipient: (args, state, utils) => {\r\n    utils.changeValue(state, 'recipientAddress', () => args[0])\r\n  },\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype SendCollectibleProps = {\r\n  initialValues: any\r\n  onClose: () => void\r\n  onNext: (txInfo: SendCollectibleTxInfo) => void\r\n  recipientAddress?: string\r\n  selectedToken?: NFTToken | Erc721Transfer\r\n}\r\n\r\nexport type SendCollectibleTxInfo = {\r\n  assetAddress: string\r\n  assetName: string\r\n  nftTokenId: string\r\n  recipientAddress?: string\r\n  recipientName?: string\r\n}\r\n\r\nconst SendCollectible = ({\r\n  initialValues,\r\n  onClose,\r\n  onNext,\r\n  recipientAddress,\r\n  selectedToken,\r\n}: SendCollectibleProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const nftAssets = useSelector(nftAssetsSelector)\r\n  const nftTokens = useSelector(nftTokensSelector)\r\n  const addressBook = useSelector(currentNetworkAddressBook)\r\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\r\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\r\n    const defaultEntry = { address: recipientAddress || '', name: '' }\r\n\r\n    // if there's nothing to lookup for, we return the default entry\r\n    if (!initialValues?.recipientAddress && !recipientAddress) {\r\n      return defaultEntry\r\n    }\r\n\r\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\r\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\r\n    const addressBookEntry = addressBook.find(({ address }) => {\r\n      return sameAddress(predefinedAddress, address)\r\n    })\r\n\r\n    // if found in the Address Book, then we return the entry\r\n    if (addressBookEntry) {\r\n      return addressBookEntry\r\n    }\r\n\r\n    // otherwise we return the default entry\r\n    return defaultEntry\r\n  })\r\n  const [pristine, setPristine] = useState(true)\r\n  const [isValidAddress, setIsValidAddress] = useState(false)\r\n\r\n  useMemo(() => {\r\n    if (selectedEntry === null && pristine) {\r\n      setPristine(false)\r\n    }\r\n  }, [selectedEntry, pristine])\r\n\r\n  const handleSubmit = (values: SendCollectibleTxInfo) => {\r\n    // If the input wasn't modified, there was no mutation of the recipientAddress\r\n    if (!values.recipientAddress) {\r\n      values.recipientAddress = selectedEntry?.address\r\n    }\r\n    values.recipientName = selectedEntry?.name\r\n    values.assetName = nftAssets[values.assetAddress].name\r\n\r\n    onNext(values)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ModalHeader onClose={onClose} subTitle=\"1 of 2\" title=\"Send collectible\" />\r\n      <Hairline />\r\n      <GnoForm formMutators={formMutators} initialValues={initialValues} onSubmit={handleSubmit}>\r\n        {(...args) => {\r\n          const formState = args[2]\r\n          const mutators = args[3]\r\n          const { assetAddress } = formState.values\r\n          const selectedNFTTokens = nftTokens.filter((nftToken) => nftToken.assetAddress === assetAddress)\r\n\r\n          const handleScan = (value, closeQrModal) => {\r\n            let scannedAddress = value\r\n\r\n            if (scannedAddress.startsWith('ethereum:')) {\r\n              scannedAddress = scannedAddress.replace('ethereum:', '')\r\n            }\r\n            const scannedName = addressBook.find(({ address }) => {\r\n              return sameAddress(scannedAddress, address)\r\n            })?.name\r\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\r\n            if (!addressErrorMessage) {\r\n              mutators.setRecipient(scannedAddress)\r\n              setSelectedEntry({\r\n                name: scannedName || '',\r\n                address: scannedAddress,\r\n              })\r\n              setAddressErrorMsg('')\r\n            } else setAddressErrorMsg(addressErrorMessage)\r\n\r\n            closeQrModal()\r\n          }\r\n\r\n          let shouldDisableSubmitButton = !isValidAddress\r\n\r\n          if (selectedEntry) {\r\n            shouldDisableSubmitButton = !selectedEntry.address\r\n          }\r\n\r\n          return (\r\n            <>\r\n              <WhenFieldChanges field=\"assetAddress\" set=\"nftTokenId\" to={''} />\r\n              <Block className={classes.formContainer}>\r\n                <SafeInfo />\r\n                <Divider withArrow />\r\n                {selectedEntry && selectedEntry.address ? (\r\n                  <div\r\n                    onKeyDown={(e) => {\r\n                      if (sameString(e.key, 'Tab')) {\r\n                        return\r\n                      }\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    onClick={() => {\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    role=\"listbox\"\r\n                    tabIndex={0}\r\n                  >\r\n                    <Row margin=\"xs\">\r\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                        Recipient\r\n                      </Paragraph>\r\n                    </Row>\r\n                    <Row align=\"center\" margin=\"md\">\r\n                      <Col xs={12}>\r\n                        <PrefixedEthHashInfo\r\n                          hash={selectedEntry.address}\r\n                          name={selectedEntry.name}\r\n                          showAvatar\r\n                          showCopyBtn\r\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <Row margin=\"md\">\r\n                      <Col xs={11}>\r\n                        <AddressBookInput\r\n                          fieldMutator={mutators.setRecipient}\r\n                          pristine={pristine}\r\n                          errorMsg={addressErrorMsg}\r\n                          setIsValidAddress={setIsValidAddress}\r\n                          setSelectedEntry={setSelectedEntry}\r\n                        />\r\n                      </Col>\r\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n                        <ScanQRWrapper handleScan={handleScan} />\r\n                      </Col>\r\n                    </Row>\r\n                  </>\r\n                )}\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Collectible\r\n                    </Paragraph>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"sm\">\r\n                  <Col>\r\n                    <TokenSelectField\r\n                      assets={nftAssets}\r\n                      initialValue={\r\n                        (selectedToken as NFTToken)?.assetAddress ?? (selectedToken as Erc721Transfer)?.tokenAddress\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Token ID\r\n                    </Paragraph>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"md\">\r\n                  <Col>\r\n                    <CollectibleSelectField initialValue={selectedToken?.tokenId} tokens={selectedNFTTokens} />\r\n                  </Col>\r\n                </Row>\r\n              </Block>\r\n              <Modal.Footer>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose }}\r\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\r\n                />\r\n              </Modal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </GnoForm>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SendCollectible\r\n","import { Field } from 'react-final-form'\r\n\r\nconst GnoField = (props: any): React.ReactElement => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import { lg, md, secondaryText } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  chainIndicator: {\r\n    padding: `0 ${md}`,\r\n    height: '20px',\r\n    alignItems: 'center',\r\n  },\r\n  icon: {\r\n    width: '20px',\r\n    marginRight: '10px',\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { ReactElement } from 'react'\r\n\r\nimport ChainIndicator from 'src/components/ChainIndicator'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { getChainInfo } from 'src/config'\r\nimport { styles } from './style'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface HeaderProps {\r\n  onClose: () => void\r\n  subTitle?: string\r\n  title: string\r\n  iconUrl?: string\r\n}\r\n\r\nexport const ModalHeader = ({ onClose, subTitle, title, iconUrl }: HeaderProps): ReactElement => {\r\n  const classes = useStyles()\r\n  const connectedNetwork = getChainInfo()\r\n\r\n  return (\r\n    <Row align=\"center\" className={classes.heading} grow>\r\n      {iconUrl && <img className={classes.icon} alt={title} src={iconUrl} />}\r\n      <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n        {title}\r\n      </Paragraph>\r\n      <Paragraph className={classes.annotation}>{subTitle ? subTitle : ''}</Paragraph>\r\n      <Row className={classes.chainIndicator}>\r\n        {connectedNetwork.chainId && <ChainIndicator chainId={connectedNetwork.chainId} />}\r\n      </Row>\r\n      <IconButton disableRipple onClick={onClose}>\r\n        <Close className={classes.closeIcon} />\r\n      </IconButton>\r\n    </Row>\r\n  )\r\n}\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","import { ReactElement } from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any): ReactElement => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { ReactElement, useState } from 'react'\r\n\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport Img from 'src/components/layout/Img'\r\n\r\nconst useStyles = makeStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\ntype Props = {\r\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\r\n  testId?: string\r\n}\r\n\r\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const [qrModalOpen, setQrModalOpen] = useState(false)\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const onScanFinished = (value: string) => {\r\n    handleScan(value, closeQrModal)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Img\r\n        alt=\"Scan QR\"\r\n        className={classes.qrCodeBtn}\r\n        height={20}\r\n        onClick={() => openQrModal()}\r\n        role=\"button\"\r\n        src={QRIcon}\r\n        testId={testId || 'qr-icon'}\r\n      />\r\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\r\n    </>\r\n  )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\n\r\nconst style = {\r\n  minWidth: '100%',\r\n}\r\n\r\nconst SelectInput = ({\r\n  classes,\r\n  disableError,\r\n  formControlProps,\r\n  input: { name, onChange, value, ...restInput },\r\n  label,\r\n  meta,\r\n  renderValue,\r\n  ...rest\r\n}) => {\r\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\r\n  const inputProps = {\r\n    ...restInput,\r\n    name,\r\n  }\r\n\r\n  return (\r\n    <FormControl {...formControlProps} error={showError} style={style}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Select\r\n        classes={classes}\r\n        inputProps={inputProps}\r\n        onChange={onChange}\r\n        renderValue={renderValue}\r\n        value={value}\r\n        {...rest}\r\n      />\r\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default SelectInput\r\n","import { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\r\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\r\n  const nativeCurrency = getNativeCurrency()\r\n\r\n  return (\r\n    <>\r\n      <PrefixedEthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { createElement, Component } from 'react';\nimport { Field } from 'react-final-form';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ExternallyChangedState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ExternallyChangedState, _React$Component);\n\n  function ExternallyChangedState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value,\n      externallyChanged: false\n    };\n    return _this;\n  }\n\n  var _proto = ExternallyChangedState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        value = _this$props.input.value,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value,\n        externallyChanged: !active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return this.props.children(this.state.externallyChanged);\n  };\n\n  return ExternallyChangedState;\n}(Component);\n\nvar ExternallyChanged = function ExternallyChanged(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(ExternallyChangedState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnBlurState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnBlurState, _React$Component);\n\n  function OnBlurState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnBlurState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (previous && !active) {\n      children();\n    }\n\n    if (previous !== active) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnBlurState;\n}(Component);\n\nvar OnBlur = function OnBlur(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnBlurState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnChangeState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnChangeState, _React$Component);\n\n  function OnChangeState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value\n    };\n    return _this;\n  }\n\n  var _proto = OnChangeState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        value = _this$props.input.value;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value\n      });\n      children(value, previous);\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnChangeState;\n}(Component);\n\nvar OnChange = function OnChange(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(OnChangeState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnFocusState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnFocusState, _React$Component);\n\n  function OnFocusState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnFocusState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (active && !previous) {\n      this.setState({\n        previous: active\n      });\n      children();\n    } else if (!active && previous) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnFocusState;\n}(Component);\n\nvar OnFocus = function OnFocus(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnFocusState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nexport { ExternallyChanged, OnBlur, OnChange, OnFocus };\n","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nexport const useTextFieldLabelStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      borderRadius: 4,\r\n      fontSize: '15px',\r\n      width: '500px',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useTextFieldInputStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      fontSize: '14px',\r\n      width: '420px',\r\n    },\r\n  }),\r\n)\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\r\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\r\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport {\r\n  useTextFieldInputStyle,\r\n  useTextFieldLabelStyle,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { checksumAddress } from 'src/utils/checksumAddress'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\r\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\r\n\r\nexport interface AddressBookProps {\r\n  fieldMutator: (address: string) => void\r\n  label?: string\r\n  pristine?: boolean\r\n  recipientAddress?: string\r\n  errorMsg?: string\r\n  setIsValidAddress: (valid: boolean) => void\r\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\r\n}\r\n\r\nexport interface BaseAddressBookInputProps extends AddressBookProps {\r\n  addressBookEntries: AddressBookEntry[]\r\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\r\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\r\n  validationText: string | undefined\r\n}\r\n\r\nconst BaseAddressBookInput = ({\r\n  addressBookEntries,\r\n  fieldMutator,\r\n  label = 'Recipient',\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  setValidationText,\r\n  validationText,\r\n}: BaseAddressBookInputProps): ReactElement => {\r\n  const networkId = useSelector(currentChainId)\r\n\r\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\r\n    setSelectedEntry(addressEntry)\r\n    fieldMutator(addressEntry.address)\r\n  }\r\n\r\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\r\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\r\n    setIsValidAddress(!addressErrorMessage)\r\n\r\n    if (addressErrorMessage) {\r\n      setValidationText(addressErrorMessage)\r\n      return\r\n    }\r\n\r\n    // Automatically checksum valid addresses\r\n    const { address } = parsePrefixedAddress(fullAddress)\r\n    const checkedAddr = checksumAddress(address) || address\r\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\r\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\r\n  }\r\n\r\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option': {\r\n        const { address, name, chainId } = value as AddressBookEntry\r\n        updateAddressInfo({ address, name, chainId })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\r\n    _,\r\n    value,\r\n    reason,\r\n  ) => {\r\n    switch (reason) {\r\n      case 'input': {\r\n        const normalizedValue = trimSpaces(value)\r\n\r\n        if (!normalizedValue) {\r\n          break\r\n        }\r\n\r\n        // ENS-enabled resolve/validation\r\n        if (\r\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\r\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\r\n        ) {\r\n          let address = ''\r\n          try {\r\n            address = await getAddressFromDomain(normalizedValue)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n\r\n          const validatedAddress = validateAddress(address)\r\n\r\n          if (!validatedAddress) {\r\n            fieldMutator('')\r\n            break\r\n          }\r\n\r\n          const newEntry =\r\n            typeof validatedAddress === 'string'\r\n              ? {\r\n                  address,\r\n                  name: normalizedValue,\r\n                  chainId: networkId,\r\n                }\r\n              : validatedAddress\r\n\r\n          updateAddressInfo(newEntry)\r\n          break\r\n        }\r\n\r\n        // ETH address validation\r\n        const validatedAddress = validateAddress(normalizedValue)\r\n\r\n        if (!validatedAddress) {\r\n          fieldMutator('')\r\n          break\r\n        }\r\n\r\n        const newEntry =\r\n          typeof validatedAddress === 'string'\r\n            ? {\r\n                address: validatedAddress,\r\n                name: '',\r\n                chainId: networkId,\r\n              }\r\n            : validatedAddress\r\n\r\n        updateAddressInfo(newEntry)\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const labelStyles = useTextFieldLabelStyle()\r\n  const inputStyles = useTextFieldInputStyle()\r\n\r\n  return (\r\n    <Autocomplete<AddressBookEntry, false, false, true>\r\n      closeIcon={null}\r\n      openOnFocus={false}\r\n      filterOptions={filterAddressEntries}\r\n      freeSolo\r\n      onChange={onChange}\r\n      onInputChange={onInputChange}\r\n      options={addressBookEntries}\r\n      id=\"address-book-input\"\r\n      renderInput={(params) => (\r\n        <MuiTextField\r\n          {...params}\r\n          autoFocus={true}\r\n          error={!!validationText}\r\n          fullWidth\r\n          variant=\"filled\"\r\n          label={validationText ? validationText : label}\r\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\r\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\r\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\r\n        />\r\n      )}\r\n      getOptionLabel={({ address }) => address}\r\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\r\n      role=\"listbox\"\r\n      style={{ display: 'flex', flexGrow: 1 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (props.errorMsg) {\r\n      setValidationText(props.errorMsg)\r\n    }\r\n  }, [props.errorMsg])\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={addressBookEntries}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const ContractsAddressBookInput = ({\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  ...props\r\n}: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\r\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    const filterContractAddresses = async (): Promise<void> => {\r\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\r\n      setFilteredEntries(filteredADBK)\r\n    }\r\n    filterContractAddresses()\r\n  }, [addressBookEntries])\r\n\r\n  const onSetSelectedEntry = async (selectedEntry) => {\r\n    if (selectedEntry?.address) {\r\n      // verify if `address` is a contract\r\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\r\n      setIsValidAddress(!contractAddressErrorMessage)\r\n      setValidationText(contractAddressErrorMessage ?? '')\r\n      setSelectedEntry(selectedEntry)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={filteredEntries}\r\n      setIsValidAddress={setIsValidAddress}\r\n      setSelectedEntry={onSetSelectedEntry}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import { createSelector } from 'reselect'\r\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nimport { AppReduxState } from 'src/store'\r\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\r\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\r\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\r\n\r\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\r\n\r\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\r\n\r\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\r\n  return assets ? Object.values(assets) : []\r\n})\r\n\r\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\r\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\r\n  const uniqueAddresses = new Set(addresses)\r\n  return Array.from(uniqueAddresses)\r\n})\r\n\r\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\r\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\r\n)\r\n\r\nexport const nftAssetsFromNftTokensSelector = createSelector(\r\n  nftAssetsToListSelector,\r\n  nftAssetsAddressFromNftTokensSelector,\r\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\r\n    return nftAssets\r\n      .sort((a, b) => a.name.localeCompare(b.name))\r\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\r\n  },\r\n)\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);"],"sourceRoot":""}