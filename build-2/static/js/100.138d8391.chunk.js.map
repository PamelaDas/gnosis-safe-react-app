{"version":3,"sources":["routes/safe/components/SafeLoadError.tsx","routes/safe/container/index.tsx"],"names":["ErrorContainer","styled","div","SafeLoadError","dispatch","useDispatch","history","useHistory","useEffect","removeViewedSafe","extractSafeAddress","src","alt","size","Button","onClick","push","WELCOME_ROUTE","color","variant","BALANCES_TAB_BTN_TEST_ID","SETTINGS_TAB_BTN_TEST_ID","APPS_TAB_BTN_TEST_ID","TRANSACTIONS_TAB_BTN_TEST_ID","ADDRESS_BOOK_TAB_BTN_TEST_ID","SAFE_VIEW_NAME_HEADING_TEST_ID","TRANSACTIONS_TAB_NEW_BTN_TEST_ID","Apps","lazy","Settings","Balances","TxList","AddressBookTable","Container","featuresEnabled","useSelector","currentSafeFeaturesEnabled","isSafeLoaded","currentSafeOwners","length","useState","hasLoadFailed","setHasLoadFailed","failedTimeout","setTimeout","SAFE_POLLING_INTERVAL","clearTimeout","isOpen","title","body","footer","onClose","modal","setModal","exact","path","SAFE_ROUTES","ASSETS_BALANCES","ASSETS_BALANCES_COLLECTIBLES","render","wrapInSuspense","TRANSACTIONS","TRANSACTIONS_HISTORY","TRANSACTIONS_QUEUE","TRANSACTIONS_SINGULAR","ADDRESS_BOOK","APPS","includes","FEATURES","SAFE_APPS","generateSafeRoute","extractPrefixedSafeAddress","SETTINGS","to"],"mappings":"0qBAoCaA,EAAiBC,UAAOC,IAAV,+OAWZC,EArCO,WACpB,IAAMC,EAAWC,cACXC,EAAUC,cAEhBC,qBAAU,WAER,OAAO,WACLJ,EAASK,YAAiBC,mBAE3B,CAACN,IAMJ,OACE,eAACJ,EAAD,WACE,qBAAKW,IAAI,wBAAwBC,IAAI,UACrC,cAAC,QAAD,CAAOC,KAAK,KAAZ,0CACA,cAACC,EAAA,EAAD,CAAQC,QARQ,WAClBT,EAAQU,KAAKC,MAOmBC,MAAM,UAAUL,KAAK,SAASM,QAAQ,YAApE,mCChBOC,EAA2B,mBAC3BC,EAA2B,mBAC3BC,EAAuB,eACvBC,EAA+B,uBAC/BC,EAA+B,uBAC/BC,EAAiC,oBACjCC,EAAmC,2BAE1CC,EAAOC,gBAAK,kBAAM,wEAClBC,EAAWD,gBAAK,kBAAM,mCACtBE,EAAWF,gBAAK,kBAAM,mCACtBG,EAASH,gBAAK,kBAAM,wEACpBI,EAAmBJ,gBAAK,kBAAM,wEA2FrBK,UAzFG,WAChB,IAAMC,EAAkBC,YAAYC,KAE9BC,EADSF,YAAYG,KACCC,OAAS,EACrC,EAA0CC,oBAAkB,GAA5D,mBAAOC,EAAP,KAAsBC,EAAtB,KAEAlC,qBAAU,WACR,IAAI6B,EAAJ,CAIA,IAAMM,EAAgBC,YAAW,WAC/BF,GAAiB,KAChBG,KACH,OAAO,WACLC,aAAaH,OAEd,CAACN,IAEJ,MAA0BG,mBAAS,CACjCO,QAAQ,EACRC,MAAO,KACPC,KAAM,KACNC,OAAQ,KACRC,QAAS,eALX,mBAAOC,EAAP,KAAcC,EAAd,KAQA,GAAIZ,EACF,OAAO,cAAC,EAAD,IAGT,IAAKJ,EACH,OACE,cAAC,IAAD,UACE,cAAC,SAAD,CAAQxB,KAAK,SAmBnB,OACE,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEyC,OAAK,EACLC,KAAM,CAACC,IAAYC,gBAAiBD,IAAYE,8BAChDC,OAAQ,kBAAMC,YAAe,cAAC9B,EAAD,IAAc,SAE7C,cAAC,IAAD,CACEwB,OAAK,EACLC,KAAM,CACJC,IAAYK,aACZL,IAAYM,qBACZN,IAAYO,mBACZP,IAAYQ,uBAEdL,OAAQ,kBAAMC,YAAe,cAAC7B,EAAD,IAAY,SAE3C,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAMC,IAAYS,aAAcN,OAAQ,kBAAMC,YAAe,cAAC5B,EAAD,IAAsB,SAChG,cAAC,IAAD,CACEsB,OAAK,EACLC,KAAMC,IAAYU,KAClBP,OAAQ,YAAkB,IAAfrD,EAAc,EAAdA,QAIT,OAHK4B,EAAgBiC,SAASC,WAASC,YACrC/D,EAAQU,KAAKsD,YAAkBd,IAAYC,gBAAiBc,gBAEvDX,YAAe,cAACjC,EAAD,IAAU,SAGpC,cAAC,IAAD,CAAO4B,KAAMC,IAAYgB,SAAUb,OAAQ,kBAAMC,YAAe,cAAC/B,EAAD,IAAc,SAC9E,cAAC,IAAD,CAAU4C,GAAIjB,IAAYC,qBAE3BL,EAAML,QAAU,cAAC,eAAD,2BAAkBK,GAAlB,IAAyBD,QA9CpB,WACJ,IAAD,EAAfC,EAAMD,UACR,UAAAC,EAAMD,eAAN,cAAAC,IAGFC,EAAS,CACPN,QAAQ,EACRC,MAAO,KACPC,KAAM,KACNC,OAAQ,KACRC,QAAS","file":"static/js/100.138d8391.chunk.js","sourcesContent":["import { ReactElement, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Title } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport Button from 'src/components/layout/Button'\r\nimport { extractSafeAddress, WELCOME_ROUTE } from 'src/routes/routes'\r\nimport { useDispatch } from 'react-redux'\r\nimport removeViewedSafe from 'src/logic/currentSession/store/actions/removeViewedSafe'\r\n\r\nconst SafeLoadError = (): ReactElement => {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    // Remove the errorneous Safe from the list of viewed safes on unmount\r\n    return () => {\r\n      dispatch(removeViewedSafe(extractSafeAddress()))\r\n    }\r\n  }, [dispatch])\r\n\r\n  const handleClick = () => {\r\n    history.push(WELCOME_ROUTE)\r\n  }\r\n\r\n  return (\r\n    <ErrorContainer>\r\n      <img src=\"./resources/error.png\" alt=\"Error\" />\r\n      <Title size=\"xs\">This Safe couldn&apos;t be loaded</Title>\r\n      <Button onClick={handleClick} color=\"primary\" size=\"medium\" variant=\"contained\">\r\n        Back to Main Page\r\n      </Button>\r\n    </ErrorContainer>\r\n  )\r\n}\r\n\r\nexport const ErrorContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // Offset so that it is centered relative to the header\r\n  margin-top: -30px;\r\n`\r\n\r\nexport default SafeLoadError\r\n","import { GenericModal, Loader } from '@gnosis.pm/safe-react-components'\r\nimport { useState, lazy, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\n\r\nimport { currentSafeFeaturesEnabled, currentSafeOwners } from 'src/logic/safe/store/selectors'\r\nimport { wrapInSuspense } from 'src/utils/wrapInSuspense'\r\nimport { LoadingContainer } from 'src/components/LoaderContainer'\r\nimport { generateSafeRoute, extractPrefixedSafeAddress, SAFE_ROUTES } from 'src/routes/routes'\r\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { SAFE_POLLING_INTERVAL } from 'src/utils/constants'\r\nimport SafeLoadError from '../components/SafeLoadError'\r\n\r\nexport const BALANCES_TAB_BTN_TEST_ID = 'balances-tab-btn'\r\nexport const SETTINGS_TAB_BTN_TEST_ID = 'settings-tab-btn'\r\nexport const APPS_TAB_BTN_TEST_ID = 'apps-tab-btn'\r\nexport const TRANSACTIONS_TAB_BTN_TEST_ID = 'transactions-tab-btn'\r\nexport const ADDRESS_BOOK_TAB_BTN_TEST_ID = 'address-book-tab-btn'\r\nexport const SAFE_VIEW_NAME_HEADING_TEST_ID = 'safe-name-heading'\r\nexport const TRANSACTIONS_TAB_NEW_BTN_TEST_ID = 'transactions-tab-new-btn'\r\n\r\nconst Apps = lazy(() => import('src/routes/safe/components/Apps'))\r\nconst Settings = lazy(() => import('src/routes/safe/components/Settings'))\r\nconst Balances = lazy(() => import('src/routes/safe/components/Balances'))\r\nconst TxList = lazy(() => import('src/routes/safe/components/Transactions/TxList'))\r\nconst AddressBookTable = lazy(() => import('src/routes/safe/components/AddressBook'))\r\n\r\nconst Container = (): React.ReactElement => {\r\n  const featuresEnabled = useSelector(currentSafeFeaturesEnabled)\r\n  const owners = useSelector(currentSafeOwners)\r\n  const isSafeLoaded = owners.length > 0\r\n  const [hasLoadFailed, setHasLoadFailed] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    if (isSafeLoaded) {\r\n      return\r\n    }\r\n\r\n    const failedTimeout = setTimeout(() => {\r\n      setHasLoadFailed(true)\r\n    }, SAFE_POLLING_INTERVAL)\r\n    return () => {\r\n      clearTimeout(failedTimeout)\r\n    }\r\n  }, [isSafeLoaded])\r\n\r\n  const [modal, setModal] = useState({\r\n    isOpen: false,\r\n    title: null,\r\n    body: null,\r\n    footer: null,\r\n    onClose: () => {},\r\n  })\r\n\r\n  if (hasLoadFailed) {\r\n    return <SafeLoadError />\r\n  }\r\n\r\n  if (!isSafeLoaded) {\r\n    return (\r\n      <LoadingContainer>\r\n        <Loader size=\"md\" />\r\n      </LoadingContainer>\r\n    )\r\n  }\r\n\r\n  const closeGenericModal = () => {\r\n    if (modal.onClose) {\r\n      modal.onClose?.()\r\n    }\r\n\r\n    setModal({\r\n      isOpen: false,\r\n      title: null,\r\n      body: null,\r\n      footer: null,\r\n      onClose: () => {},\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path={[SAFE_ROUTES.ASSETS_BALANCES, SAFE_ROUTES.ASSETS_BALANCES_COLLECTIBLES]}\r\n          render={() => wrapInSuspense(<Balances />, null)}\r\n        />\r\n        <Route\r\n          exact\r\n          path={[\r\n            SAFE_ROUTES.TRANSACTIONS,\r\n            SAFE_ROUTES.TRANSACTIONS_HISTORY,\r\n            SAFE_ROUTES.TRANSACTIONS_QUEUE,\r\n            SAFE_ROUTES.TRANSACTIONS_SINGULAR,\r\n          ]}\r\n          render={() => wrapInSuspense(<TxList />, null)}\r\n        />\r\n        <Route exact path={SAFE_ROUTES.ADDRESS_BOOK} render={() => wrapInSuspense(<AddressBookTable />, null)} />\r\n        <Route\r\n          exact\r\n          path={SAFE_ROUTES.APPS}\r\n          render={({ history }) => {\r\n            if (!featuresEnabled.includes(FEATURES.SAFE_APPS)) {\r\n              history.push(generateSafeRoute(SAFE_ROUTES.ASSETS_BALANCES, extractPrefixedSafeAddress()))\r\n            }\r\n            return wrapInSuspense(<Apps />, null)\r\n          }}\r\n        />\r\n        <Route path={SAFE_ROUTES.SETTINGS} render={() => wrapInSuspense(<Settings />, null)} />\r\n        <Redirect to={SAFE_ROUTES.ASSETS_BALANCES} />\r\n      </Switch>\r\n      {modal.isOpen && <GenericModal {...modal} onClose={closeGenericModal} />}\r\n    </>\r\n  )\r\n}\r\nexport default Container\r\n"],"sourceRoot":""}