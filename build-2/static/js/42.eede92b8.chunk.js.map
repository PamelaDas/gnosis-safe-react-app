{"version":3,"sources":["routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","components/layout/Bold/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","components/ExecuteCheckbox/index.tsx","routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime.tsx","routes/safe/components/Settings/SpendingLimit/style.ts","routes/safe/components/Settings/SpendingLimit/FormFields/Amount.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/AddressInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/ResetTimeInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/TokenInfo.tsx","logic/safe/hooks/useTokenInfo.tsx","routes/safe/components/Transactions/TxList/assets/custom.svg","logic/hooks/useDebounce.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedHistoryTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions.ts","routes/safe/components/Transactions/TxList/styled.tsx","components/InfiniteScroll/index.tsx","routes/safe/components/Transactions/TxList/TxsInfiniteScroll.tsx","routes/safe/components/Transactions/TxList/hooks/useAssetInfo.ts","logic/hooks/useLocalTxStatus.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionStatus.ts","routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg","routes/safe/components/Transactions/TxList/assets/incoming.svg","routes/safe/components/Transactions/TxList/assets/outgoing.svg","routes/safe/components/Transactions/TxList/assets/settings.svg","routes/safe/components/Transactions/TxList/hooks/useKnownAddress.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionType.ts","components/CustomIconText/index.tsx","routes/safe/components/Transactions/TxList/TxLocationProvider.tsx","routes/safe/components/Transactions/TxList/TxActionProvider.tsx","routes/safe/components/Transactions/TxList/TxHoverProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionActions.ts","routes/safe/components/Transactions/TxList/TxCollapsedActions.tsx","routes/safe/components/Transactions/TxList/TokenTransferAmount.tsx","routes/safe/components/Transactions/TxList/TxCollapsed.tsx","routes/safe/components/Transactions/TxList/TxHistoryCollapsed.tsx","routes/safe/components/Transactions/TxList/SpendingLimitDetails.tsx","routes/safe/components/AddressBook/EllipsisTransactionDetails/index.tsx","routes/safe/components/Transactions/TxList/AddressInfo.tsx","routes/safe/components/Transactions/TxList/InfoDetails.tsx","routes/safe/components/Transactions/TxList/TxInfoDetails.tsx","routes/safe/components/Transactions/TxList/HexEncodedData.tsx","routes/safe/components/Transactions/TxList/MethodValue.tsx","routes/safe/components/Transactions/TxList/MethodDetails.tsx","routes/safe/components/Transactions/TxList/DelegateCallWarning.tsx","routes/safe/components/Transactions/TxList/MultiSendDetails.tsx","routes/safe/components/Transactions/TxList/TxData.tsx","routes/safe/components/Transactions/TxList/TxExpandedActions.tsx","routes/safe/components/Transactions/TxList/TxInfoSettings.tsx","routes/safe/components/Transactions/TxList/TxInfoTransfer.tsx","routes/safe/components/Transactions/TxList/TxInfo.tsx","routes/safe/components/Transactions/TxList/assets/transactions-list-active.svg","routes/safe/components/Transactions/TxList/assets/transactions-list-inactive.svg","routes/safe/components/Transactions/TxList/TxOwners.tsx","routes/safe/components/Transactions/TxList/TxShareButton.tsx","routes/safe/components/Transactions/TxList/TxInfoMultiSend.tsx","routes/safe/components/Transactions/TxList/TxSummary.tsx","routes/safe/components/Transactions/TxList/TxModuleInfo.tsx","routes/safe/components/Transactions/TxList/TxDetails.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionDetails.ts","routes/safe/components/Transactions/TxList/TxInfoCreation.tsx","routes/safe/components/Transactions/TxList/TxHistoryRow.tsx","routes/safe/components/Transactions/TxList/HistoryTxList.tsx","routes/safe/components/Transactions/TxList/assets/no-transactions.svg","routes/safe/components/Transactions/TxList/HistoryTransactions.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedQueuedTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useQueueTransactions.ts","routes/safe/components/Transactions/TxList/TxQueueCollapsed.tsx","routes/safe/components/Transactions/TxList/TxQueueRow.tsx","routes/safe/components/Transactions/TxList/modals/style.ts","logic/safe/store/models/confirmation.ts","routes/safe/components/Transactions/TxList/modals/ApproveTxModal.tsx","logic/safe/store/actions/processTransaction.ts","routes/safe/components/Transactions/TxList/modals/RejectTxModal.tsx","routes/safe/components/Transactions/TxList/ActionModal.tsx","routes/safe/components/Transactions/TxList/QueueTxList.tsx","routes/safe/components/Transactions/TxList/QueueTransactions.tsx","routes/safe/components/Transactions/TxList/TxSingularDetails.tsx","routes/safe/components/Transactions/TxList/index.tsx"],"names":["setImageToPlaceholder","event","img","currentTarget","test","src","TokenPlaceholder","Bold","this","props","children","React","NO_CONTRACT","ensResolver","createDecorator","field","updates","contractAddress","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","console","error","message","formMutators","setMax","args","state","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","selectedMethod","name","setCallResults","setAbiValue","isAddress","type","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","handleSubmitError","key","hasOwnProperty","undefined","value","reason","FORM_ERROR","generateFormFieldKey","signatureHash","index","keyType","extractMethodArgs","JSON","parse","map","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","inputs","methods","isReadMethod","action","getValueFromTxInputs","tx","replace","String","ExecuteCheckbox","onChange","margin","noMargin","control","defaultChecked","color","e","target","checked","label","SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","StyledSwitch","rest","icon","hexToRgb","primaryLight","SafeRadioButtons","options","initialValue","groupName","input","onRadioChange","Switch","render","ResetTimeLabel","div","ResetTimeToggle","ResetTimeOptions","RESET_TIME_OPTIONS","RINKEBY_RESET_TIME_OPTIONS","getResetTimeOptions","getChainName","toLowerCase","ResetTime","withResetTime","useField","subscription","resetTimeOptions","switchExplanation","size","useStyles","makeStyles","createStyles","title","padding","lg","paddingBottom","hide","backgroundColor","visibility","actions","justifyContent","noBorderBottom","borderBottom","annotation","paddingLeft","ownersText","secondaryText","fontColor","container","actionButton","fontWeight","boldFont","marginRight","sm","buttonRow","left","bottom","boxSizing","width","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","removeModuleIcon","marginLeft","cursor","modalHeading","modalContainer","minHeight","modalManage","modalClose","modalButtonRow","modalButtonRemove","modalName","textOverflow","overflow","modalUserName","whiteSpace","modalOwner","background","md","alignItems","modalUser","modalDescription","modalOpen","amountInput","Field","GnoField","AmountInput","TextField","SRCTextField","Amount","classes","tokenAddress","touched","visited","meta","selectedTokenRecord","useSelector","extendedSafeTokensSelector","find","token","address","validate","composeValidators","required","mustBeFloat","minValue","component","endAdornment","symbol","className","AddressInfo","logoUri","addessBookName","addressBookEntryName","strong","PrefixedEthHashInfo","hash","sameString","ADDRESS_BOOK_DEFAULT_NAME","showCopyBtn","showAvatar","textSize","explorerUrl","getExplorerInfo","customAvatar","ResetTimeInfo","Row","align","iconSize","iconType","text","StyledImage","StyledImageName","TokenInfo","amount","alt","onError","useTokenInfo","tokens","safeKnownCoins","sameAddress","useDebounce","delay","previousValue","useRef","useState","current","setCurrent","debouncedCallback","useMemo","debounce","val","useEffect","cancel","usePagedHistoryTransactions","historyTxs","historyTransactions","count","setCount","history","Object","entries","reduce","acc","length","transactions","useHistoryTransactions","chainId","currentChainId","dispatch","useDispatch","safeAddress","extractSafeAddress","hasMore","setHasMore","isLoading","setIsLoading","next","useCallback","loadPagedHistoryTransactions","results","content","Errors","_608","log","addHistoryTransactions","Wrapper","ContentWrapper","ColumnDisplayAccordionDetails","AccordionDetails","NoPaddingAccordion","Accordion","attrs","isDeeplinkedTx","expanded","ActionAccordion","StyledTransactionsGroup","SubTitle","h2","Text","placeHolder","StyledTransactions","white","GroupedTransactionsCard","separator","inputField","gridColumns","nonce","info","time","votes","status","willBeReplaced","css","failedTransaction","onChainRejection","errorTooltip","StyledTransaction","join","StyledGroupedTransactions","slice","GroupedTransactions","DisclaimerContainer","TxDetailsContainer","ownerRows","errorHover","secondary","OwnerList","ul","OwnerListItem","li","InlineEthHashInfo","EthHashInfo","StyledScrollableBar","ScrollableTransactionsContainer","Centered","HorizontallyCentered","isVisible","StyledAccordionSummary","AccordionSummary","expandIcon","AlignItemsWithMargin","NoTransactions","INFINITE_SCROLL_CONTAINER","InfiniteScrollContext","createContext","setLastItemId","ref","InfiniteScrollProvider","forwardRef","lastItemId","_setLastItemId","Provider","itemId","setTimeout","displayName","InfiniteScroll","config","useInView","threshold","root","document","querySelector","rootMargin","triggerOnce","inView","isMounted","TxsInfiniteScroll","id","defaultTokenTransferAsset","NOT_AVAILABLE","directionSign","amountWithSymbol","tokenType","useAssetInfo","txInfo","asset","setAsset","getTxAmount","isTransferTxInfo","direction","transferInfo","TokenType","ERC20","tokenName","ERC721","NATIVE_COIN","nativeCurrency","getNativeCurrency","isSettingsChangeTxInfo","isCustomTxInfo","useLocalTxStatus","transaction","storedStatus","selectTxStatus","localStatus","setLocalStatus","useTransactionStatus","currentUser","userAccountSelector","setStatus","txStatus","executionInfo","LocalTransactionStatus","SUCCESS","FAILED","CANCELLED","WILL_BE_REPLACED","AWAITING_CONFIRMATIONS","addressInList","missingSigners","signaturePending","AWAITING_EXECUTION","PENDING_FAILED","PENDING","DEFAULT_PROPS","useKnownAddress","recipientName","isInAddressBook","useTransactionType","CustomTxIcon","setType","toAddress","getTxTo","knownAddressBookAddress","SettingsTxIcon","isSendTx","OutgoingTxIcon","IncomingTxIcon","dataDecoded","isCancellation","CircleCrossRed","safeAppInfo","fallbackIcon","CustomIconText","iconUrl","iconUrlFallback","showHash","avatarSize","customAvatarFallback","TxLocationContext","txLocation","setTxLocation","TransactionActionStateContext","selectedAction","actionSelected","transactionId","selectAction","TxActionProvider","setSelectedAction","fetchTransactionDetails","TxHoverContext","activeHover","setActiveHover","TxHoverProvider","useActionButtonsHandlers","actionContext","useContext","hoverContext","locationContext","isUserAnOwner","grantedSelector","isWrongChain","shouldSwitchWalletChain","transactionsByNonce","getTransactionsByNonce","canCancel","some","canConfirm","canConfirmThenExecute","canExecute","setState","isMultisigExecutionInfo","confirmationsSubmitted","confirmationsRequired","currentUserSigned","missingSigner","oneToGo","includes","prev","useTransactionActions","isPending","handleConfirmButtonClick","stopPropagation","txDetails","isMultiSigExecutionDetails","detailedExecutionInfo","details","confirmations","enqueueSnackbar","NOTIFICATIONS","TX_FETCH_SIGNATURES_ERROR_MSG","handleCancelButtonClick","handleOnMouseEnter","handleOnMouseLeave","disabledActions","IconButton","MuiIconButton","TxCollapsedActions","currentSafeNonce","isAwaitingEx","isAwaitingExecution","getTitle","placement","onClick","disabled","onMouseEnter","onMouseLeave","AmountWrapper","TokenTransferAmount","assetInfo","Img","onerror","NFTIcon","TxInfo","settingsInfo","as","isMultiSendTxInfo","actionCount","methodName","CircularProgressPainter","SmallDot","Dot","IconText","IconTextSrc","TooltipContent","TxCollapsed","isGrouped","TxsInfiniteScrollContext","userAddress","toInfo","isCancelTxDetails","txCollapsedNonce","txCollapsedType","txCollapsedInfo","timestamp","txCollapsedTime","formatDateTime","arrow","formatTime","formatTimeInWords","txCollapsedVotes","submitted","txCollapsedActions","txCollapsedStatus","TxHistoryCollapsed","isSetAllowance","isDeleteAllowance","SpendingLimitRow","ModifySpendingLimitDetails","txData","parameters","beneficiary","resetTimeMin","resetTimeLabel","tokenInfo","txTo","fromTokenUnit","decimals","DeleteSpendingLimitDetails","display","xs","borderRadius","transition","outline","increasedPopperZindex","zIndex","EllipsisTransactionDetails","sendModalOpenHandler","anchorEl","setAnchorEl","isOwnerConnected","isStoredInAddressBook","handleClick","closeMenuHandler","addOrEditEntryHandler","push","pathname","generateSafeRoute","SAFE_ROUTES","ADDRESS_BOOK","shortName","getShortName","search","ClickAwayListener","onClickAway","role","tabIndex","onKeyDown","Menu","keepMounted","onClose","open","Boolean","MenuItem","Divider","avatarUrl","InfoDetails","SingleRow","TxInfoDetails","isTransferType","canRepeatTransaction","sendModalOpen","setSendModalOpen","activeScreenType","recipientAddress","selectedToken","ZERO_ADDRESS","tokenAmount","sendModalParams","setSendModalParams","isCollectible","getTxTokenData","SendModal","isOpen","styles","txDataParagraph","linkTxData","textDecoration","HexEncodedData","hexData","limit","showTxData","setShowTxData","showExpandBtn","shortener","textShortener","charsStart","charsEnd","Paragraph","Link","rel","NestedWrapper","GenericValue","getTextValue","Array","isArray","getArrayValue","parentId","currentValue","Value","shortenHash","TxDetailsMethodParam","StyledMethodName","MethodDetails","data","param","DelegateCallWarning","isKnown","MultiSendTxGroup","actionTitle","isDelegateCall","operation","Operation","DELEGATE","defaultExpanded","MultiSendDetails","valueDecoded","valuesDecoded","to","addressInfo","addressInfoIndex","DetailsWithTxInfo","TxData","TxExpandedActions","getConfirmTooltipTitle","TxInfoSettings","handler","owner","oldOwner","newOwner","implementation","module","TxInfoTransfer","setDetails","toUpperCase","sender","recipient","StyledImg","TxOwners","isModuleExecutionInfo","confirmationsNeeded","CreationNode","signer","executor","TransactionListActive","TransactionListInactive","TxShareButton","safeTxHash","txDetailsPathname","generatePath","TRANSACTIONS_SINGULAR","SAFE_ADDRESS_SLUG","getPrefixedSafeAddressSlug","TRANSACTION_ID_SLUG","txDetailsLink","window","location","origin","PUBLIC_URL","textToCopy","TxInfoMultiSend","TxSummary","txHash","executedAt","created","submittedAt","TxModuleInfo","NormalBreakingText","TxDataGroup","txNonce","isTxExecuted","href","TxDetails","loading","setTxDetails","getTransactionByAttribute","attributeValue","attributeName","useTransactionDetails","hasModule","isMultiSend","getModuleDetails","cn","TxInfoCreation","creator","factory","transactionHash","TxHistoryRow","TransitionProps","mountOnEnter","unmountOnExit","appear","isCreationTxInfo","HistoryTxList","lastTransactionsGroup","lastTransaction","txs","formatWithSchema","HistoryTransactions","NoTransactionsImage","usePagedQueuedTransactions","nextTxs","nextTransactions","queuedTxs","queuedTransactions","txsCount","setTxsCount","queued","getQueuedTxs","loadQueuedTransactions","addQueuedTransactions","_getChainId","queue","useQueueTransactions","nextPage","loadPagedQueuedTransactions","TxQueueCollapsed","calculateVotes","TxQueueRow","setTx","currTx","nonceNumber","marginTop","makeConfirmation","Record","signature","ApproveTxModal","isCancelTx","approveAndExecute","setApproveAndExecute","thresholdReached","isThresholdReached","_threshold","_countingCurrentConfirmation","modalInfo","description","getModalTitleAndDescription","oneConfirmationLeft","isTheTxReadyToBeExecuted","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","t","List","EMPTY_DATA","baseGas","gasPrice","safeTxGas","gasToken","refundReceiver","CALL","stringify","url","useTxInfo","useEstimateTransactionGas","txRecipient","txConfirmations","txAmount","preApprovingOwner","gasLimit","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","doExecute","useEstimationStatus","buttonStatus","approveTx","txParameters","notifiedTransaction","ethParameters","getState","onboardUser","providerSelector","from","account","hardwareWallet","smartContractWallet","safeVersion","currentSafeCurrentVersion","safeInstance","getGnosisSafeInstanceAt","lastTx","getLastTransaction","getRecommendedNonce","logError","_616","call","shouldExecuteTransaction","sigs","generateSignaturesFromTxConfirmations","getPreValidatedSignatures","notificationsQueue","getNotificationsFromTxType","beforeExecutionKey","beforeExecution","txArgs","valueInWei","checkIfOffChainSignatureIsPossible","tryOffChainSigning","closeSnackbarAction","saveTxToHistory","fetchTransactions","getExecutionTransaction","getApprovalTransaction","gas","ethGasLimit","getGasParam","ethGasPriceInGWei","ethNonce","sendParams","send","once","updateTransactionStatus","aboutToExecuteTx","_804","then","receipt","fetchSafe","notification","isTxPendingError","TX_PENDING_MSG","afterExecutionError","code","processTransaction","TX_NOTIFICATION_TYPES","CONFIRMATION_TX","getParametersStatus","Modal","handleClose","EditableTxParameters","parametersStatus","ethGasPrice","safeNonce","closeEditModalCallback","oldGasPrice","newGasPrice","toggleEditMode","ModalHeader","Hairline","Block","style","flexDirection","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","ReviewInfoText","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","confirmButtonProps","testId","RejectTxModal","gwTransaction","confirmButtonStatus","READY","confirmButtonText","createTransaction","CANCELLATION_TX","sendReplacementTransaction","ActionModal","useTransactionParameters","TreeView","firstElement","Disclaimer","QueueTransaction","QueueTxList","QueueTransactions","TxSingularDetails","useParams","fetchedTx","setFetchedTx","liveTx","setLiveTx","indexedTx","getTransactionWithLocationByAttribute","txId","shallowEqual","isCurrent","getTransaction","fetchSafeTransaction","_614","txsRoute","TRANSACTIONS","extractPrefixedSafeAddress","listItemTx","makeTxFromDetails","payload","conflictType","isTxQueued","TxList","TRANSACTION_TABS","TRANSACTIONS_QUEUE","TRANSACTIONS_HISTORY","GatewayTransactions","useHistory","path","useRouteMatch","trackEvent","useAnalytics","SAFE_EVENTS","Col","start","items","selectedTab","exact"],"mappings":"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","file":"static/js/42.eede92b8.chunk.js","sourcesContent":["import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  const img = event.currentTarget\r\n  if (!/token_placeholder/.test(img.src)) {\r\n    img.src = TokenPlaceholder\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\r\nimport createDecorator from 'final-form-calculate'\r\nimport { ContractSendMethod } from 'web3-eth-contract'\r\n\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\r\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\nexport const NO_CONTRACT = 'no contract'\r\n\r\nexport const ensResolver = createDecorator({\r\n  field: 'contractAddress',\r\n  updates: {\r\n    contractAddress: async (contractAddress) => {\r\n      try {\r\n        const resolvedAddress =\r\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\r\n          (await getAddressFromDomain(contractAddress))\r\n\r\n        if (resolvedAddress) {\r\n          return resolvedAddress\r\n        }\r\n\r\n        return contractAddress\r\n      } catch (e) {\r\n        console.error(e.message)\r\n        return contractAddress\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'value', () => args[0])\r\n  },\r\n  setContractAddress: (args, state, utils) => {\r\n    utils.changeValue(state, 'contractAddress', () => args[0])\r\n  },\r\n  setSelectedMethod: (args, state, utils) => {\r\n    const modified =\r\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\r\n\r\n    if (modified) {\r\n      utils.changeValue(state, 'callResults', () => '')\r\n      utils.changeValue(state, 'value', () => '')\r\n    }\r\n\r\n    utils.changeValue(state, 'selectedMethod', () => args[0])\r\n  },\r\n  setCallResults: (args, state, utils) => {\r\n    utils.changeValue(state, 'callResults', () => args[0])\r\n  },\r\n  setAbiValue: (args, state, utils) => {\r\n    utils.changeValue(state, 'abi', () => args[0])\r\n  },\r\n}\r\n\r\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\r\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\r\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\r\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\r\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\r\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\r\n\r\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\r\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\r\n  try {\r\n    const arrayResult = JSON.parse(parameter)\r\n    return arrayResult.map((value) => {\r\n      if (Number.isInteger(value)) {\r\n        return new BigNumber(value).toString()\r\n      }\r\n      return value\r\n    })\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\r\n  for (const key in values) {\r\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\r\n      return { [key]: error.reason }\r\n    }\r\n  }\r\n\r\n  // .call() failed and we're logging a generic error\r\n  return { [FORM_ERROR]: error ? error.message : undefined }\r\n}\r\n\r\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\r\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\r\n  return `methodInput-${signatureHash}_${index}_${keyType}`\r\n}\r\n\r\nconst extractMethodArgs =\r\n  (signatureHash: string, values: Record<string, string>) =>\r\n  ({ type }, index) => {\r\n    const key = generateFormFieldKey(type, signatureHash, index)\r\n\r\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\r\n  }\r\n\r\nexport const createTxObject = (\r\n  method: AbiItemExtended,\r\n  contractAddress: string,\r\n  values: Record<string, string>,\r\n): ContractSendMethod => {\r\n  const web3 = getWeb3()\r\n  const contract = new web3.eth.Contract([method], contractAddress)\r\n  const { inputs, name = '', signatureHash } = method\r\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\r\n\r\n  return contract.methods[name](...args)\r\n}\r\n\r\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\r\n\r\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\r\n  if (isArrayParameter(type)) {\r\n    key = key.replace('[]', '')\r\n  }\r\n\r\n  let value = tx[key]\r\n\r\n  if (type === 'bool') {\r\n    value = String(value)\r\n  }\r\n\r\n  return value\r\n}\r\n","import { ReactElement } from 'react'\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from '../layout/Paragraph'\r\n\r\ninterface ExecuteCheckboxProps {\r\n  onChange: (val: boolean) => unknown\r\n}\r\n\r\nconst ExecuteCheckbox = ({ onChange }: ExecuteCheckboxProps): ReactElement | null => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    onChange(e.target.checked)\r\n  }\r\n  return (\r\n    <Row margin=\"md\">\r\n      <Paragraph noMargin>\r\n        If you want to sign the transaction now but manually execute it later, click on the checkbox below.\r\n      </Paragraph>\r\n      <FormControlLabel\r\n        control={<Checkbox defaultChecked color=\"primary\" onChange={handleChange} />}\r\n        label=\"Execute transaction\"\r\n        data-testid=\"execute-checkbox\"\r\n      />\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ExecuteCheckbox\r\n","import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\r\nimport { FormControlLabel, hexToRgb, Switch as SwitchMui } from '@material-ui/core'\r\nimport { ReactElement } from 'react'\r\nimport { useField } from 'react-final-form'\r\nimport styled from 'styled-components'\r\n\r\nimport { getChainName } from 'src/config'\r\nimport { Field } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/Amount'\r\n\r\n// TODO: propose refactor in safe-react-components based on this requirements\r\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\r\n  & .MuiRadio-colorPrimary.Mui-checked {\r\n    color: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\n// TODO: add `name` and `value` to SRC Switch, as they're required for a better RFF integration\r\nconst StyledSwitch = styled(({ ...rest }) => <SwitchMui {...rest} />)`\r\n  && {\r\n    .MuiIconButton-label,\r\n    .MuiSwitch-colorSecondary {\r\n      color: ${({ theme }) => theme.colors.icon};\r\n    }\r\n\r\n    .MuiSwitch-colorSecondary.Mui-checked .MuiIconButton-label {\r\n      color: ${({ theme }) => theme.colors.primary};\r\n    }\r\n\r\n    .MuiSwitch-colorSecondary.Mui-checked:hover {\r\n      background-color: ${({ theme }) => hexToRgb(`${theme.colors.primary}03`)};\r\n    }\r\n\r\n    .Mui-checked + .MuiSwitch-track {\r\n      background-color: ${({ theme }) => theme.colors.primaryLight};\r\n    }\r\n  }\r\n`\r\n\r\ninterface RadioButtonOption {\r\n  label: string\r\n  value: string\r\n}\r\n\r\ninterface RadioButtonProps {\r\n  options: RadioButtonOption[]\r\n  initialValue: string\r\n  groupName: string\r\n}\r\n\r\nconst SafeRadioButtons = ({ options, initialValue, groupName }: RadioButtonProps): ReactElement => (\r\n  <Field name={groupName} initialValue={initialValue}>\r\n    {({ input: { name, value, onChange } }) => (\r\n      <SpendingLimitRadioButtons name={name} value={value || initialValue} onRadioChange={onChange} options={options} />\r\n    )}\r\n  </Field>\r\n)\r\n\r\nconst Switch = ({ label, name }: { label: string; name: string }): ReactElement => (\r\n  <FormControlLabel\r\n    label={label}\r\n    control={\r\n      <Field\r\n        name={name}\r\n        type=\"checkbox\"\r\n        render={({ input: { checked, onChange, name, value } }) => (\r\n          <StyledSwitch checked={checked} onChange={onChange} name={name} value={value} />\r\n        )}\r\n      />\r\n    }\r\n  />\r\n)\r\n\r\nconst ResetTimeLabel = styled.div`\r\n  grid-area: resetTimeLabel;\r\n`\r\n\r\nconst ResetTimeToggle = styled.div`\r\n  grid-area: resetTimeToggle;\r\n`\r\n\r\nconst ResetTimeOptions = styled.div`\r\n  grid-area: resetTimeOption;\r\n`\r\n\r\nconst RESET_TIME_OPTIONS = [\r\n  { label: '1 day', value: '1440' }, // 1 day x 24h x 60min\r\n  { label: '1 week', value: '10080' }, // 7 days x 24h x 60min\r\n  { label: '1 month', value: '43200' }, // 30 days x 24h x 60min\r\n]\r\n\r\nconst RINKEBY_RESET_TIME_OPTIONS = [\r\n  { label: '5 minutes', value: '5' },\r\n  { label: '30 minutes', value: '30' },\r\n  { label: '1 hour', value: '60' },\r\n]\r\n\r\nexport const getResetTimeOptions = (): RadioButtonOption[] => {\r\n  const currentNetwork = getChainName().toLowerCase()\r\n  return currentNetwork !== 'rinkeby' ? RESET_TIME_OPTIONS : RINKEBY_RESET_TIME_OPTIONS\r\n}\r\n\r\nconst ResetTime = (): ReactElement => {\r\n  const {\r\n    input: { value: withResetTime },\r\n  } = useField('withResetTime', { subscription: { value: true } })\r\n\r\n  const resetTimeOptions = getResetTimeOptions()\r\n\r\n  const switchExplanation = withResetTime ? 'choose reset time period' : 'one time'\r\n\r\n  return (\r\n    <>\r\n      <ResetTimeLabel>\r\n        <Text size=\"xl\">Set a reset time so the allowance automatically refills after the defined time period.</Text>\r\n      </ResetTimeLabel>\r\n      <ResetTimeToggle>\r\n        <Switch label={`Reset time (${switchExplanation})`} name=\"withResetTime\" />\r\n      </ResetTimeToggle>\r\n      {withResetTime && (\r\n        <ResetTimeOptions>\r\n          <SafeRadioButtons groupName=\"resetTime\" initialValue={resetTimeOptions[0].value} options={resetTimeOptions} />\r\n        </ResetTimeOptions>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResetTime\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\nimport {\r\n  background,\r\n  boldFont,\r\n  border,\r\n  error,\r\n  fontColor,\r\n  lg,\r\n  md,\r\n  secondaryText,\r\n  sm,\r\n  smallFontSize,\r\n  xl,\r\n} from 'src/theme/variables'\r\n\r\nexport const useStyles = makeStyles(\r\n  createStyles({\r\n    title: {\r\n      padding: lg,\r\n      paddingBottom: 0,\r\n    },\r\n    hide: {\r\n      '&:hover': {\r\n        backgroundColor: '#f7f5f5',\r\n      },\r\n      '&:hover $actions': {\r\n        visibility: 'initial',\r\n      },\r\n    },\r\n    actions: {\r\n      justifyContent: 'flex-end',\r\n      visibility: 'hidden',\r\n    },\r\n    noBorderBottom: {\r\n      '& > td': {\r\n        borderBottom: 'none',\r\n      },\r\n    },\r\n    annotation: {\r\n      paddingLeft: lg,\r\n    },\r\n    ownersText: {\r\n      color: secondaryText,\r\n      '& b': {\r\n        color: fontColor,\r\n      },\r\n    },\r\n    container: {\r\n      padding: lg,\r\n    },\r\n    actionButton: {\r\n      fontWeight: boldFont,\r\n      marginRight: sm,\r\n    },\r\n    buttonRow: {\r\n      padding: lg,\r\n      left: 0,\r\n      bottom: 0,\r\n      boxSizing: 'border-box',\r\n      width: '100%',\r\n      justifyContent: 'flex-end',\r\n      borderTop: `2px solid ${border}`,\r\n    },\r\n    modifyBtn: {\r\n      height: xl,\r\n      fontSize: smallFontSize,\r\n    },\r\n    removeModuleIcon: {\r\n      marginLeft: lg,\r\n      cursor: 'pointer',\r\n    },\r\n    modalHeading: {\r\n      boxSizing: 'border-box',\r\n      justifyContent: 'space-between',\r\n      height: '74px',\r\n      padding: `${sm} ${lg}`,\r\n    },\r\n    modalContainer: {\r\n      minHeight: '369px',\r\n    },\r\n    modalManage: {\r\n      fontSize: lg,\r\n    },\r\n    modalClose: {\r\n      height: '35px',\r\n      width: '35px',\r\n    },\r\n    modalButtonRow: {\r\n      height: '84px',\r\n      justifyContent: 'center',\r\n    },\r\n    modalButtonRemove: {\r\n      color: '#fff',\r\n      backgroundColor: error,\r\n      height: '42px',\r\n    },\r\n    modalName: {\r\n      textOverflow: 'ellipsis',\r\n      overflow: 'hidden',\r\n    },\r\n    modalUserName: {\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    modalOwner: {\r\n      backgroundColor: background,\r\n      padding: md,\r\n      alignItems: 'center',\r\n    },\r\n    modalUser: {\r\n      justifyContent: 'left',\r\n    },\r\n    modalDescription: {\r\n      padding: md,\r\n    },\r\n    modalOpen: {\r\n      paddingLeft: sm,\r\n      width: 'auto',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n      },\r\n    },\r\n    amountInput: {\r\n      width: '100% !important',\r\n    },\r\n  }),\r\n)\r\n","import { TextField as SRCTextField } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\nimport { useField } from 'react-final-form'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport GnoField from 'src/components/forms/Field'\r\nimport { composeValidators, minValue, mustBeFloat, required } from 'src/components/forms/validator'\r\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\r\nimport { useStyles } from 'src/routes/safe/components/Settings/SpendingLimit/style'\r\n\r\nexport const Field = styled(GnoField)`\r\n  margin: 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst AmountInput = styled.div`\r\n  grid-area: amountInput;\r\n`\r\n\r\nconst TextField = styled(SRCTextField)`\r\n  margin: 0;\r\n`\r\n\r\nconst Amount = (): ReactElement => {\r\n  const classes = useStyles()\r\n\r\n  const {\r\n    input: { value: tokenAddress },\r\n  } = useField('token', { subscription: { value: true } })\r\n  const {\r\n    meta: { touched, visited },\r\n  } = useField('amount', { subscription: { touched: true, visited: true } })\r\n\r\n  const tokens = useSelector(extendedSafeTokensSelector)\r\n\r\n  const selectedTokenRecord = tokens.find((token) => token.address === tokenAddress)\r\n\r\n  const validate = (touched || visited) && composeValidators(required, mustBeFloat, minValue(0, false))\r\n\r\n  return (\r\n    <AmountInput>\r\n      <Field\r\n        component={TextField}\r\n        label=\"Amount*\"\r\n        name=\"amount\"\r\n        type=\"text\"\r\n        data-testid=\"amount-input\"\r\n        endAdornment={selectedTokenRecord?.symbol}\r\n        className={classes.amountInput}\r\n        validate={validate}\r\n      />\r\n    </AmountInput>\r\n  )\r\n}\r\n\r\nexport default Amount\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\ninterface AddressInfoProps {\r\n  address: string\r\n  title?: string\r\n  name?: string\r\n  logoUri?: string\r\n}\r\n\r\nconst AddressInfo = ({ address, title, name, logoUri }: AddressInfoProps): ReactElement => {\r\n  const addessBookName = useSelector((state) => addressBookEntryName(state, { address }))\r\n\r\n  return (\r\n    <>\r\n      {title && (\r\n        <Text size=\"xl\" strong>\r\n          {title}\r\n        </Text>\r\n      )}\r\n      <PrefixedEthHashInfo\r\n        hash={address}\r\n        name={sameString(addessBookName, ADDRESS_BOOK_DEFAULT_NAME) ? name : addessBookName}\r\n        showCopyBtn\r\n        showAvatar\r\n        textSize=\"lg\"\r\n        explorerUrl={getExplorerInfo(address)}\r\n        customAvatar={logoUri || undefined}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AddressInfo\r\n","import { IconText, Text } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\n\r\nimport Row from 'src/components/layout/Row'\r\n\r\ninterface ResetTimeInfoProps {\r\n  title?: string\r\n  label?: string\r\n}\r\n\r\nconst ResetTimeInfo = ({ title, label }: ResetTimeInfoProps): ReactElement => (\r\n  <>\r\n    <Text size=\"xl\" strong>\r\n      {title}\r\n    </Text>\r\n    {label ? (\r\n      <Row align=\"center\" margin=\"md\">\r\n        <IconText iconSize=\"md\" iconType=\"fuelIndicator\" text={label} textSize=\"lg\" />\r\n      </Row>\r\n    ) : (\r\n      <Row align=\"center\" margin=\"md\">\r\n        <Text size=\"lg\">One-time spending limit</Text>\r\n      </Row>\r\n    )}\r\n  </>\r\n)\r\n\r\nexport default ResetTimeInfo\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\n\r\nconst StyledImage = styled.img`\r\n  width: 32px;\r\n  height: 32px;\r\n  object-fit: contain;\r\n  margin: 0 8px 0 0;\r\n`\r\nconst StyledImageName = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface TokenInfoProps {\r\n  amount: string\r\n  title?: string\r\n  token: Token\r\n}\r\n\r\nconst TokenInfo = ({ amount, title, token }: TokenInfoProps): ReactElement => (\r\n  <>\r\n    <Text size=\"xl\" strong>\r\n      {title}\r\n    </Text>\r\n    <StyledImageName>\r\n      <StyledImage alt={token.name} onError={setImageToPlaceholder} src={token.logoUri || ''} />\r\n      <Text size=\"lg\">\r\n        {amount} {token.symbol}\r\n      </Text>\r\n    </StyledImageName>\r\n  </>\r\n)\r\n\r\nexport default TokenInfo\r\n","import { useSelector } from 'react-redux'\r\n\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { safeKnownCoins } from 'src/routes/safe/container/selector'\r\n\r\nconst useTokenInfo = (address: string): Token | undefined => {\r\n  const tokens = useSelector(safeKnownCoins)\r\n\r\n  if (tokens) {\r\n    return tokens.find((token) => sameAddress(token.address, address))\r\n  }\r\n}\r\n\r\nexport default useTokenInfo\r\n","export default __webpack_public_path__ + \"static/media/custom.c5c7edba.svg\";","import debounce from 'lodash/debounce'\r\nimport { useMemo, useEffect, useState, useRef } from 'react'\r\n\r\n/*\r\n  This code snippet is copied from https://github.com/gnbaron/use-lodash-debounce\r\n  with the sole intention to be able to tweak it if is needed and prevent from having\r\n  a new dependency for something relatively trivial\r\n*/\r\n\r\ninterface DebounceOptions {\r\n  leading: boolean\r\n  maxWait: number\r\n  trailing: boolean\r\n}\r\n\r\nexport const useDebounce = <T extends unknown>(value: T, delay = 0, options?: DebounceOptions): T => {\r\n  const previousValue = useRef(value)\r\n  const [current, setCurrent] = useState(value)\r\n  const debouncedCallback = useMemo(\r\n    () => debounce((val: T) => setCurrent(val), delay, options),\r\n    [setCurrent, delay, options],\r\n  )\r\n\r\n  useEffect(() => {\r\n    // does trigger the debounce timer initially\r\n    if (value !== previousValue.current) {\r\n      debouncedCallback(value)\r\n      previousValue.current = value\r\n      // cancel the debounced callback on clean up\r\n      return debouncedCallback.cancel\r\n    }\r\n  }, [debouncedCallback, value, previousValue])\r\n\r\n  return current\r\n}\r\n","import { useCallback, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadPagedHistoryTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\r\nimport { addHistoryTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { useHistoryTransactions } from 'src/routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions'\r\nimport { Errors } from 'src/logic/exceptions/CodedException'\r\nimport { Await } from 'src/types/helpers'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\n\r\ntype PagedTransactions = {\r\n  count: number\r\n  transactions: TransactionDetails['transactions']\r\n  hasMore: boolean\r\n  next: () => Promise<void>\r\n  isLoading: boolean\r\n}\r\n\r\nexport const usePagedHistoryTransactions = (): PagedTransactions => {\r\n  const { count, transactions } = useHistoryTransactions()\r\n  const chainId = useSelector(currentChainId)\r\n\r\n  const dispatch = useRef(useDispatch())\r\n  const safeAddress = useRef(extractSafeAddress())\r\n  const [hasMore, setHasMore] = useState(true)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const next = useCallback(async () => {\r\n    setIsLoading(true)\r\n\r\n    let results: Await<ReturnType<typeof loadPagedHistoryTransactions>>\r\n    try {\r\n      results = await loadPagedHistoryTransactions(safeAddress.current)\r\n    } catch (e) {\r\n      // No next page\r\n      if (e.content !== Errors._608) {\r\n        e.log()\r\n      }\r\n    }\r\n\r\n    if (!results) {\r\n      setHasMore(false)\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n\r\n    const { values, next } = results\r\n\r\n    if (next === null) {\r\n      setHasMore(false)\r\n    }\r\n\r\n    if (values) {\r\n      dispatch.current(addHistoryTransactions({ chainId, safeAddress: safeAddress.current, values }))\r\n    } else {\r\n      setHasMore(false)\r\n    }\r\n    setIsLoading(false)\r\n  }, [chainId])\r\n\r\n  return { count, transactions, hasMore, next, isLoading }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { historyTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\n\r\nexport const useHistoryTransactions = (): TransactionDetails => {\r\n  const historyTxs = useSelector(historyTransactions)\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const history = historyTxs\r\n      ? Object.entries(historyTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\r\n      : 0\r\n    setCount(history)\r\n  }, [historyTxs])\r\n\r\n  return {\r\n    count,\r\n    transactions: historyTxs ? Object.entries(historyTxs) : [],\r\n  }\r\n}\r\n","import { Text, Accordion, AccordionDetails, AccordionSummary, EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled, { css } from 'styled-components'\r\nimport { isDeeplinkedTx } from './utils'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  align-items: center;\r\n`\r\n\r\nexport const ColumnDisplayAccordionDetails = styled(AccordionDetails)`\r\n  flex-flow: column;\r\n`\r\n\r\nexport const NoPaddingAccordion = styled(Accordion).attrs((props) =>\r\n  isDeeplinkedTx() ? { expanded: true, ...props } : props,\r\n)`\r\n  &.MuiAccordion-root {\r\n    background-color: transparent;\r\n\r\n    .MuiAccordionDetails-root {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport const ActionAccordion = styled(Accordion)`\r\n  &.MuiAccordion-root {\r\n    &:first-child {\r\n      border-top: none;\r\n    }\r\n\r\n    &.Mui-expanded {\r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n    }\r\n\r\n    .MuiAccordionDetails-root {\r\n      padding: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledTransactionsGroup = styled.div`\r\n  align-items: flex-start;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  margin: 16px 8px;\r\n  width: 98%;\r\n`\r\n\r\nexport const H2 = styled.h2`\r\n  text-transform: uppercase;\r\n  font-size: smaller;\r\n`\r\n\r\nexport const SubTitle = styled(Text)`\r\n  margin-bottom: 8px;\r\n\r\n  font-size: 0.76em;\r\n  font-weight: 600;\r\n  line-height: 1.5;\r\n  letter-spacing: 1px;\r\n  color: ${({ theme }) => theme.colors.placeHolder};\r\n  text-transform: uppercase;\r\n`\r\n\r\nexport const StyledTransactions = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n  border-radius: 8px;\r\n  box-shadow: #00000026 0 4px 12px 0;\r\n  overflow: hidden;\r\n  width: 100%;\r\n\r\n  & > .MuiAccordion-root {\r\n    &:first-child {\r\n      border-top: none;\r\n    }\r\n\r\n    &:last-child {\r\n      border-bottom: none;\r\n    }\r\n\r\n    &:last-of-type {\r\n      div {\r\n        row-gap: 0px;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GroupedTransactionsCard = styled(StyledTransactions)`\r\n  transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  background-color: transparent;\r\n  border-radius: 0;\r\n  box-shadow: none;\r\n\r\n  &:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n  }\r\n\r\n  .MuiAccordion-root,\r\n  .MuiAccordionSummary-root,\r\n  .MuiAccordionDetails-root {\r\n    background-color: transparent;\r\n\r\n    &:hover,\r\n    &.Mui-expanded {\r\n      background-color: transparent;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    .MuiAccordionDetails-root {\r\n      div[class^='tx-'] {\r\n        background-color: ${({ theme }) => theme.colors.background};\r\n      }\r\n    }\r\n\r\n    .disclaimer-container {\r\n      background-color: ${({ theme }) => theme.colors.inputField};\r\n    }\r\n  }\r\n`\r\nconst gridColumns = {\r\n  nonce: '0.5fr',\r\n  type: '3fr',\r\n  info: '3fr',\r\n  time: '2.5fr',\r\n  votes: '1.5fr',\r\n  actions: '1fr',\r\n  status: '2.5fr',\r\n}\r\n\r\nconst willBeReplaced = css`\r\n  .will-be-replaced * {\r\n    color: gray !important;\r\n    text-decoration: line-through !important;\r\n    filter: grayscale(1) opacity(0.8) !important;\r\n  }\r\n`\r\n\r\nconst failedTransaction = css`\r\n  &.failed-transaction {\r\n    div[class^='tx-']:not(.tx-status):not(.tx-nonce) {\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n`\r\n\r\nconst onChainRejection = css`\r\n  &.on-chain-rejection {\r\n    background-color: ${({ theme }) => theme.colors.errorTooltip};\r\n    border-left: 4px solid ${({ theme }) => theme.colors.error};\r\n    border-radius: 4px;\r\n    padding-left: 7px;\r\n    height: 22px;\r\n    max-width: 165px;\r\n\r\n    > div {\r\n      height: 17px;\r\n      align-items: center;\r\n      padding-top: 3px;\r\n    }\r\n\r\n    p {\r\n      font-size: 11px;\r\n      line-height: 16px;\r\n      letter-spacing: 1px;\r\n      font-weight: bold;\r\n      text-transform: uppercase;\r\n      margin-left: -2px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledTransaction = styled.div`\r\n  ${willBeReplaced};\r\n  ${failedTransaction};\r\n\r\n  display: grid;\r\n  grid-template-columns: ${Object.values(gridColumns).join(' ')};\r\n  width: 100%;\r\n\r\n  & > div {\r\n    align-self: center;\r\n  }\r\n\r\n  .tx-type {\r\n    ${onChainRejection};\r\n  }\r\n\r\n  .tx-votes {\r\n    justify-self: center;\r\n  }\r\n\r\n  .tx-actions {\r\n    visibility: hidden;\r\n    justify-self: end;\r\n  }\r\n\r\n  .tx-status {\r\n    justify-self: end;\r\n    margin-right: 8px;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    align-items: center;\r\n    justify-content: end;\r\n\r\n    p {\r\n      margin-left: 8px;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    .tx-actions {\r\n      visibility: visible;\r\n\r\n      &.will-be-replaced {\r\n        visibility: hidden;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledGroupedTransactions = styled(StyledTransaction)`\r\n  // no \\`tx-nonce\\` column required\r\n  grid-template-columns: ${Object.values(gridColumns).slice(1).join(' ')};\r\n`\r\n\r\nexport const GroupedTransactions = styled(StyledTransaction)`\r\n  // add a bottom division line for all elements but the last\r\n  &:not(:last-of-type) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n  }\r\n\r\n  // builds the tree-view layout\r\n  .tree-lines {\r\n    height: 100%;\r\n    margin-left: 30px;\r\n    position: relative;\r\n    width: 30%;\r\n\r\n    // this is a special case, the first element in the list needs to have a block child component\r\n    // add tree lines line to the first item of the list\r\n    .first-node {\r\n      display: block;\r\n      position: absolute;\r\n      top: -16px;\r\n      width: 100%;\r\n\r\n      &::before {\r\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\r\n        content: '';\r\n        height: 22px;\r\n        position: absolute;\r\n        top: 8px;\r\n        width: 100%;\r\n      }\r\n    }\r\n\r\n    // add tree lines to all elements of the list (except for the last one)\r\n    // :last-of-type won't work with classes selector (HTML elements only)\r\n    // as we need block-level elements, we're using paragraphs for .tree-lines and .first-node\r\n    // given that divs are already being used for the transaction row, and both (p and div) are siblings\r\n    &:not(:last-of-type) {\r\n      &::before {\r\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\r\n        content: '';\r\n        height: 100%;\r\n        margin-top: 14px;\r\n        position: absolute;\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n\r\n  // overrides Accordion styles, as grouped txs behave differently\r\n  > .MuiAccordion-root {\r\n    transition: none;\r\n    border: 0;\r\n    grid-column-end: span 6;\r\n    grid-column-start: 2;\r\n\r\n    &:first-child {\r\n      border: 0;\r\n    }\r\n\r\n    &.Mui-expanded {\r\n      justify-self: center;\r\n      width: calc(100% - 32px);\r\n\r\n      &:not(:last-of-type) {\r\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n      }\r\n\r\n      &:not(:first-of-type) {\r\n        border-top: 2px solid ${({ theme }) => theme.colors.separator};\r\n        // if two consecutive accordions are expanded, borders will get duplicated\r\n        // this rule is to overlap them\r\n        margin-top: -2px;\r\n      }\r\n\r\n      > .MuiAccordionSummary-root {\r\n        padding: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const DisclaimerContainer = styled(StyledTransaction)`\r\n  background-color: ${({ theme }) => theme.colors.inputField} !important;\r\n  border-radius: 4px;\r\n  margin: 12px 8px 0 12px;\r\n  padding: 8px 12px;\r\n  width: calc(100% - 48px);\r\n\r\n  .nonce {\r\n    grid-column-start: 1;\r\n  }\r\n\r\n  .disclaimer {\r\n    grid-column-start: 2;\r\n    grid-column-end: span 6;\r\n  }\r\n`\r\n\r\nexport const TxDetailsContainer = styled.div<{ ownerRows?: number }>`\r\n  ${willBeReplaced};\r\n\r\n  background-color: ${({ theme }) => theme.colors.separator} !important;\r\n  column-gap: 2px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-auto-rows: minmax(min-content, max-content);\r\n  grid-template-rows: [tx-summary] minmax(min-content, max-content) [tx-details] minmax(min-content, 1fr);\r\n  row-gap: 2px;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    line-break: anywhere;\r\n    overflow: hidden;\r\n    padding: 20px 24px;\r\n    word-break: break-all;\r\n  }\r\n\r\n  .tx-summary {\r\n  }\r\n\r\n  .tx-share {\r\n    float: right;\r\n  }\r\n\r\n  .tx-details {\r\n    &.not-executed {\r\n      grid-row-end: span 2;\r\n    }\r\n\r\n    &.no-padding {\r\n      padding: 0;\r\n    }\r\n  }\r\n\r\n  .tx-owners {\r\n    padding: 24px;\r\n    grid-column-start: 2;\r\n    grid-row-end: span ${({ ownerRows }) => ownerRows || 2};\r\n    grid-row-start: 1;\r\n  }\r\n\r\n  .tx-details-actions {\r\n    align-items: center;\r\n    display: flex;\r\n    height: 60px;\r\n    justify-content: center;\r\n\r\n    button {\r\n      color: ${({ theme }) => theme.colors.white};\r\n      margin: 0 8px;\r\n\r\n      &:hover {\r\n        color: ${({ theme }) => theme.colors.white};\r\n      }\r\n\r\n      &.error {\r\n        background-color: ${({ theme }) => theme.colors.error};\r\n\r\n        &:hover {\r\n          background-color: ${({ theme }) => theme.colors.errorHover};\r\n        }\r\n      }\r\n\r\n      &.primary {\r\n        background-color: ${({ theme }) => theme.colors.primary};\r\n\r\n        &:hover {\r\n          background-color: ${({ theme }) => theme.colors.secondary};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const OwnerList = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding-left: 6px;\r\n\r\n  .legend {\r\n    left: 15px;\r\n    padding-bottom: 0.86em;\r\n    position: relative;\r\n    top: -3px;\r\n\r\n    .owner-info {\r\n      margin: 5px;\r\n    }\r\n\r\n    span::first-of-type {\r\n      color: #008c73;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  ul {\r\n    margin-top: 0;\r\n  }\r\n\r\n  .icon {\r\n    left: -7px;\r\n    position: absolute;\r\n    width: 16px;\r\n    z-index: 2;\r\n  }\r\n`\r\n\r\nexport const OwnerListItem = styled.li`\r\n  display: flex;\r\n  position: relative;\r\n\r\n  &::before {\r\n    border-left: 2px ${({ theme }) => theme.colors.icon} solid;\r\n    border-radius: 1px;\r\n    content: '';\r\n    height: calc(100% - 16px);\r\n    top: 16px;\r\n    left: 0;\r\n    position: absolute;\r\n    z-index: 1;\r\n  }\r\n\r\n  &:last-child::before {\r\n    border-left: none;\r\n  }\r\n`\r\n\r\nexport const InlineEthHashInfo = styled(EthHashInfo)`\r\n  display: inline-flex;\r\n\r\n  span {\r\n    font-weight: normal;\r\n  }\r\n`\r\n\r\nexport const StyledScrollableBar = styled.div`\r\n  &::-webkit-scrollbar {\r\n    width: 0.7em;\r\n    scroll-behavior: smooth;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    border-radius: 20px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: darkgrey;\r\n    outline: 1px solid #dadada;\r\n    border-radius: 20px;\r\n  }\r\n\r\n  // firefox experimental\r\n  scrollbar-color: darkgrey #dadada;\r\n  scrollbar-width: thin;\r\n`\r\n\r\nexport const ScrollableTransactionsContainer = styled(StyledScrollableBar)`\r\n  height: calc(100vh - 170px);\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  width: 100%;\r\n`\r\nexport const Centered = styled.div<{ padding?: number }>`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  padding: ${({ padding }) => `${padding}px`};\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const HorizontallyCentered = styled(Centered)<{ isVisible: boolean }>`\r\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\r\n  height: 100px;\r\n`\r\n\r\nexport const StyledAccordionSummary = styled(AccordionSummary).attrs((props) =>\r\n  isDeeplinkedTx() ? { expandIcon: null, ...props } : props,\r\n)`\r\n  height: 52px;\r\n  .tx-nonce {\r\n    margin: 0 16px 0 8px;\r\n  }\r\n`\r\nexport const AlignItemsWithMargin = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  span:first-child {\r\n    margin-right: 6px;\r\n  }\r\n`\r\nexport const NoTransactions = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 60px;\r\n`\r\n","import { createContext, forwardRef, MutableRefObject, ReactElement, ReactNode, useEffect, useState } from 'react'\r\nimport { InViewHookResponse, useInView } from 'react-intersection-observer'\r\n\r\nexport const INFINITE_SCROLL_CONTAINER = 'infinite-scroll-container'\r\n\r\nexport const InfiniteScrollContext = createContext<{\r\n  ref: MutableRefObject<HTMLDivElement | null> | ((instance: HTMLDivElement | null) => void) | null\r\n  lastItemId?: string\r\n  setLastItemId: (itemId?: string) => void\r\n}>({ setLastItemId: () => {}, ref: null })\r\n\r\nexport const InfiniteScrollProvider = forwardRef<HTMLDivElement, { children: ReactNode }>(\r\n  ({ children }, ref): ReactElement => {\r\n    const [lastItemId, _setLastItemId] = useState<string>()\r\n\r\n    const setLastItemId = (itemId?: string) => {\r\n      setTimeout(() => _setLastItemId(itemId), 0)\r\n    }\r\n\r\n    return (\r\n      <InfiniteScrollContext.Provider value={{ ref, lastItemId, setLastItemId }}>\r\n        {children}\r\n      </InfiniteScrollContext.Provider>\r\n    )\r\n  },\r\n)\r\n\r\nInfiniteScrollProvider.displayName = 'InfiniteScrollProvider'\r\n\r\ntype InfiniteScrollProps = {\r\n  children: ReactNode\r\n  hasMore: boolean\r\n  next: () => Promise<void>\r\n  config?: InViewHookResponse\r\n}\r\n\r\nexport const InfiniteScroll = ({ children, hasMore, next, config }: InfiniteScrollProps): ReactElement => {\r\n  const { ref, inView } = useInView({\r\n    threshold: 0,\r\n    root: document.querySelector(`#${INFINITE_SCROLL_CONTAINER}`),\r\n    rootMargin: '0px 0px 200px 0px',\r\n    triggerOnce: true,\r\n    ...config,\r\n  })\r\n\r\n  useEffect(() => {\r\n    // Avoid memory leak - queue/history have separate InfiniteScroll wrappers\r\n    let isMounted = true\r\n\r\n    if (isMounted && inView && hasMore) {\r\n      next()\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false\r\n    }\r\n  }, [inView, hasMore, next])\r\n\r\n  return <InfiniteScrollProvider ref={ref}>{children}</InfiniteScrollProvider>\r\n}\r\n","import { Loader } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement, ReactNode } from 'react'\r\n\r\nimport { INFINITE_SCROLL_CONTAINER, InfiniteScroll } from 'src/components/InfiniteScroll'\r\nimport { HorizontallyCentered, ScrollableTransactionsContainer } from './styled'\r\n\r\ntype TxsInfiniteScrollProps = {\r\n  children: ReactNode\r\n  next: () => Promise<void>\r\n  hasMore: boolean\r\n  isLoading: boolean\r\n}\r\n\r\nexport const TxsInfiniteScroll = ({ children, next, hasMore, isLoading }: TxsInfiniteScrollProps): ReactElement => {\r\n  return (\r\n    <InfiniteScroll next={next} hasMore={hasMore}>\r\n      <ScrollableTransactionsContainer id={INFINITE_SCROLL_CONTAINER}>\r\n        {children}\r\n        <HorizontallyCentered isVisible={isLoading}>\r\n          <Loader size=\"md\" />\r\n        </HorizontallyCentered>\r\n      </ScrollableTransactionsContainer>\r\n    </InfiniteScroll>\r\n  )\r\n}\r\n\r\nexport { InfiniteScrollContext as TxsInfiniteScrollContext } from 'src/components/InfiniteScroll'\r\n","import { Custom, SettingsChange, TransactionInfo, Transfer, TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport { getNativeCurrency } from 'src/config'\r\nimport { isCustomTxInfo, isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { getTxAmount, NOT_AVAILABLE } from 'src/routes/safe/components/Transactions/TxList/utils'\r\n\r\nexport type TokenTransferAsset = {\r\n  type: 'Transfer'\r\n  name: string\r\n  logoUri: string\r\n  directionSign: '+' | '-' | ''\r\n  amountWithSymbol: string\r\n  tokenType: string\r\n}\r\n\r\nexport type AssetInfo = TokenTransferAsset | SettingsChange | Custom\r\n\r\nexport const isTokenTransferAsset = (value: AssetInfo): value is TokenTransferAsset => {\r\n  return value.type === 'Transfer'\r\n}\r\n\r\nconst defaultTokenTransferAsset: TokenTransferAsset = {\r\n  type: 'Transfer',\r\n  name: NOT_AVAILABLE,\r\n  logoUri: NOT_AVAILABLE,\r\n  directionSign: '',\r\n  amountWithSymbol: NOT_AVAILABLE,\r\n  tokenType: 'UNKNOWN',\r\n}\r\n\r\nexport const useAssetInfo = (txInfo: TransactionInfo): AssetInfo | undefined => {\r\n  const [asset, setAsset] = useState<AssetInfo>()\r\n  const amountWithSymbol = getTxAmount(txInfo)\r\n\r\n  useEffect(() => {\r\n    if (isTransferTxInfo(txInfo)) {\r\n      const { direction, transferInfo } = txInfo as Transfer\r\n      const directionSign = direction === 'INCOMING' ? '+' : '-'\r\n\r\n      switch (transferInfo.type) {\r\n        case TokenType.ERC20: {\r\n          setAsset({\r\n            type: 'Transfer',\r\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\r\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\r\n            directionSign,\r\n            amountWithSymbol,\r\n            tokenType: transferInfo.type,\r\n          })\r\n          break\r\n        }\r\n        case TokenType.ERC721: {\r\n          setAsset({\r\n            type: 'Transfer',\r\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\r\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\r\n            directionSign: directionSign,\r\n            amountWithSymbol,\r\n            tokenType: transferInfo.type,\r\n          })\r\n          break\r\n        }\r\n        case TokenType.NATIVE_COIN: {\r\n          const nativeCurrency = getNativeCurrency()\r\n\r\n          setAsset({\r\n            type: 'Transfer',\r\n            name: nativeCurrency.name ?? defaultTokenTransferAsset.name,\r\n            logoUri: nativeCurrency.logoUri ?? defaultTokenTransferAsset.logoUri,\r\n            directionSign: directionSign,\r\n            amountWithSymbol,\r\n            tokenType: transferInfo.type,\r\n          })\r\n          break\r\n        }\r\n      }\r\n      return\r\n    }\r\n\r\n    if (isSettingsChangeTxInfo(txInfo)) {\r\n      setAsset(txInfo as SettingsChange)\r\n      return\r\n    }\r\n\r\n    if (isCustomTxInfo(txInfo)) {\r\n      setAsset(txInfo as Custom)\r\n    }\r\n  }, [txInfo, amountWithSymbol])\r\n\r\n  return asset\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport { TransactionStatus } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { AppReduxState } from 'src/store'\r\nimport { selectTxStatus } from 'src/logic/safe/store/selectors/txStatus'\r\nimport { useState } from 'react'\r\nimport { useDebounce } from './useDebounce'\r\n\r\nconst useLocalTxStatus = (transaction: Transaction): TransactionStatus => {\r\n  const storedStatus = useSelector((state: AppReduxState) => selectTxStatus(state, transaction))\r\n  const [localStatus, setLocalStatus] = useState(storedStatus)\r\n\r\n  useDebounce(() => {\r\n    if (storedStatus) {\r\n      setLocalStatus(storedStatus)\r\n    }\r\n  }, 100)\r\n\r\n  return localStatus\r\n}\r\n\r\nexport default useLocalTxStatus\r\n","import { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\r\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\n\r\nimport { LocalTransactionStatus, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\r\n\r\nexport type TransactionStatusProps = {\r\n  color: ThemeColors\r\n  text: string\r\n}\r\n\r\nexport const useTransactionStatus = (transaction: Transaction): TransactionStatusProps => {\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const [status, setStatus] = useState<TransactionStatusProps>({ color: 'primary', text: '' })\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const { executionInfo } = transaction\r\n\r\n  useEffect(() => {\r\n    switch (txStatus) {\r\n      case LocalTransactionStatus.SUCCESS:\r\n        setStatus({ color: 'primary', text: 'Success' })\r\n        break\r\n      case LocalTransactionStatus.FAILED:\r\n        setStatus({ color: 'error', text: 'Failed' })\r\n        break\r\n      case LocalTransactionStatus.CANCELLED:\r\n        setStatus({ color: 'error', text: 'Cancelled' })\r\n        break\r\n      case LocalTransactionStatus.WILL_BE_REPLACED:\r\n        setStatus({ color: 'placeHolder', text: 'Transaction will be replaced' })\r\n        break\r\n      case LocalTransactionStatus.AWAITING_CONFIRMATIONS:\r\n        const signaturePending = addressInList((executionInfo as MultisigExecutionInfo)?.missingSigners ?? undefined)\r\n        const text = signaturePending(currentUser) ? 'Needs your confirmation' : 'Needs confirmations'\r\n        setStatus({ color: 'rinkeby', text })\r\n        break\r\n      case LocalTransactionStatus.AWAITING_EXECUTION:\r\n      case LocalTransactionStatus.PENDING_FAILED:\r\n        setStatus({ color: 'rinkeby', text: 'Needs execution' })\r\n        break\r\n      case LocalTransactionStatus.PENDING:\r\n        setStatus({ color: 'rinkeby', text: 'Pending' })\r\n        break\r\n    }\r\n  }, [setStatus, txStatus, currentUser, executionInfo])\r\n\r\n  return status\r\n}\r\n","export default __webpack_public_path__ + \"static/media/circle-cross-red.856e4902.svg\";","export default __webpack_public_path__ + \"static/media/incoming.a3c7e671.svg\";","export default __webpack_public_path__ + \"static/media/outgoing.19c93aeb.svg\";","export default __webpack_public_path__ + \"static/media/settings.655e5d78.svg\";","import { useSelector } from 'react-redux'\r\n\r\nimport { sameString } from 'src/utils/strings'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\r\nimport { AddressEx } from '@gnosis.pm/safe-react-gateway-sdk'\r\n\r\nconst DEFAULT_PROPS: AddressEx = {\r\n  value: '',\r\n  name: null,\r\n  logoUri: null,\r\n}\r\nexport const useKnownAddress = (props: AddressEx | null = DEFAULT_PROPS): AddressEx & { isInAddressBook: boolean } => {\r\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address: props?.value || '' }))\r\n\r\n  // Undefined known address\r\n  if (!props) {\r\n    return {\r\n      ...DEFAULT_PROPS,\r\n      isInAddressBook: false,\r\n    }\r\n  }\r\n\r\n  // We have to check that the name returned is not UNKNOWN\r\n  const isInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\r\n  const name = isInAddressBook && recipientName ? recipientName : props?.name\r\n\r\n  return {\r\n    ...props,\r\n    name,\r\n    isInAddressBook,\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport CustomTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/custom.svg'\r\nimport CircleCrossRed from 'src/routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg'\r\nimport IncomingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/incoming.svg'\r\nimport OutgoingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/outgoing.svg'\r\nimport SettingsTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/settings.svg'\r\nimport { getTxTo } from 'src/routes/safe/components/Transactions/TxList/utils'\r\nimport { useKnownAddress } from './useKnownAddress'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\n\r\nexport type TxTypeProps = {\r\n  icon?: string\r\n  fallbackIcon?: string\r\n  text?: string\r\n}\r\n\r\nexport const useTransactionType = (tx: Transaction): TxTypeProps => {\r\n  const [type, setType] = useState<TxTypeProps>({ icon: CustomTxIcon, text: 'Contract interaction' })\r\n  const safeAddress = extractSafeAddress()\r\n  const toAddress = getTxTo(tx)\r\n  const knownAddressBookAddress = useKnownAddress(toAddress)\r\n\r\n  useEffect(() => {\r\n    switch (tx.txInfo.type) {\r\n      case 'Creation': {\r\n        setType({ icon: toAddress?.logoUri || SettingsTxIcon, text: 'Safe created' })\r\n        break\r\n      }\r\n      case 'Transfer': {\r\n        const isSendTx = tx.txInfo.direction === 'OUTGOING'\r\n\r\n        setType({\r\n          icon: isSendTx ? OutgoingTxIcon : IncomingTxIcon,\r\n          text: isSendTx ? 'Send' : 'Receive',\r\n        })\r\n        break\r\n      }\r\n      case 'SettingsChange': {\r\n        setType({ icon: SettingsTxIcon, text: tx.txInfo.dataDecoded.method })\r\n        break\r\n      }\r\n      case 'Custom': {\r\n        // TODO: is this the only way to identify a 'module' transaction?\r\n        if (!tx.executionInfo) {\r\n          setType({ icon: SettingsTxIcon, text: 'Module' })\r\n          break\r\n        }\r\n\r\n        if (tx.txInfo.isCancellation) {\r\n          setType({ icon: CircleCrossRed, text: 'On-chain rejection' })\r\n          break\r\n        }\r\n\r\n        if (tx.safeAppInfo) {\r\n          setType({ icon: tx.safeAppInfo.logoUri, text: tx.safeAppInfo.name })\r\n          break\r\n        }\r\n\r\n        setType({\r\n          icon: knownAddressBookAddress.isInAddressBook\r\n            ? CustomTxIcon\r\n            : knownAddressBookAddress.logoUri || toAddress?.logoUri || CustomTxIcon,\r\n          fallbackIcon: knownAddressBookAddress.isInAddressBook ? undefined : CustomTxIcon,\r\n          text: knownAddressBookAddress.name || toAddress?.name || 'Contract interaction',\r\n        })\r\n        break\r\n      }\r\n    }\r\n  }, [\r\n    tx,\r\n    safeAddress,\r\n    knownAddressBookAddress.name,\r\n    knownAddressBookAddress.logoUri,\r\n    knownAddressBookAddress.isInAddressBook,\r\n    toAddress?.logoUri,\r\n    toAddress?.name,\r\n  ])\r\n\r\n  return type\r\n}\r\n","import { ReactElement } from 'react'\r\nimport PrefixedEthHashInfo from '../PrefixedEthHashInfo'\r\n\r\ntype Props = {\r\n  address: string\r\n  iconUrl?: string\r\n  iconUrlFallback?: string\r\n  text?: string\r\n}\r\n\r\nexport const CustomIconText = ({ address, iconUrl, text, iconUrlFallback }: Props): ReactElement => (\r\n  <PrefixedEthHashInfo\r\n    hash={address}\r\n    showHash={false}\r\n    avatarSize=\"sm\"\r\n    showAvatar\r\n    customAvatar={iconUrl || undefined}\r\n    customAvatarFallback={iconUrlFallback}\r\n    name={text}\r\n    textSize=\"xl\"\r\n  />\r\n)\r\n","import { createContext, ReactElement, ReactNode, useState } from 'react'\r\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\r\n\r\nexport type TxLocationProps = {\r\n  txLocation: TxLocation\r\n  setTxLocation?: (txLocation: TxLocation) => void\r\n}\r\n\r\nexport const TxLocationContext = createContext<TxLocationProps>({\r\n  txLocation: 'history',\r\n  setTxLocation: () => {},\r\n})\r\n\r\nexport const TxLocationProvider = ({ children }: { children: ReactNode }): ReactElement => {\r\n  const [txLocation, setTxLocation] = useState<TxLocation>('history')\r\n\r\n  return <TxLocationContext.Provider value={{ txLocation, setTxLocation }}>{children}</TxLocationContext.Provider>\r\n}\r\n","import { createContext, ReactElement, ReactNode, useCallback, useRef, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\r\n\r\nexport type ActionType = 'cancel' | 'confirm' | 'execute' | 'none'\r\n\r\nexport type SelectedAction = {\r\n  selectedAction: {\r\n    actionSelected: ActionType\r\n    transactionId: string\r\n  }\r\n  selectAction: (args: SelectedAction['selectedAction']) => void\r\n}\r\n\r\nexport const TransactionActionStateContext = createContext<SelectedAction>({\r\n  selectedAction: {\r\n    actionSelected: 'none',\r\n    transactionId: '',\r\n  },\r\n  selectAction: () => {},\r\n})\r\n\r\nexport const TxActionProvider = ({ children }: { children: ReactNode }): ReactElement => {\r\n  const dispatch = useRef(useDispatch())\r\n  const [selectedAction, setSelectedAction] = useState<SelectedAction['selectedAction']>({\r\n    actionSelected: 'none',\r\n    transactionId: '',\r\n  })\r\n\r\n  const selectAction = useCallback(({ actionSelected, transactionId }: SelectedAction['selectedAction']) => {\r\n    if (transactionId) {\r\n      dispatch.current(fetchTransactionDetails({ transactionId }))\r\n    }\r\n\r\n    setSelectedAction({ actionSelected, transactionId })\r\n  }, [])\r\n\r\n  return (\r\n    <TransactionActionStateContext.Provider value={{ selectedAction, selectAction }}>\r\n      {children}\r\n    </TransactionActionStateContext.Provider>\r\n  )\r\n}\r\n","import { createContext, ReactElement, ReactNode, useState } from 'react'\r\n\r\nexport const TxHoverContext = createContext<{\r\n  activeHover?: string\r\n  setActiveHover: (activeHover?: string) => void\r\n}>({\r\n  activeHover: undefined,\r\n  setActiveHover: () => {},\r\n})\r\n\r\nexport const TxHoverProvider = ({ children }: { children: ReactNode }): ReactElement => {\r\n  const [activeHover, setActiveHover] = useState<string | undefined>()\r\n\r\n  return <TxHoverContext.Provider value={{ activeHover, setActiveHover }}>{children}</TxHoverContext.Provider>\r\n}\r\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { MouseEvent as ReactMouseEvent, useCallback, useContext, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {\r\n  isMultiSigExecutionDetails,\r\n  LocalTransactionStatus,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\r\nimport { useTransactionActions } from './useTransactionActions'\r\nimport { TransactionActionStateContext } from 'src/routes/safe/components/Transactions/TxList/TxActionProvider'\r\nimport { TxHoverContext } from 'src/routes/safe/components/Transactions/TxList/TxHoverProvider'\r\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\nimport { NOTIFICATIONS } from 'src/logic/notifications'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\n\r\ntype ActionButtonsHandlers = {\r\n  canCancel: boolean\r\n  handleConfirmButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n  handleCancelButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n  handleOnMouseEnter: () => void\r\n  handleOnMouseLeave: () => void\r\n  isPending: boolean\r\n  disabledActions: boolean\r\n}\r\n\r\nexport const useActionButtonsHandlers = (transaction: Transaction): ActionButtonsHandlers => {\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const actionContext = useRef(useContext(TransactionActionStateContext))\r\n  const hoverContext = useRef(useContext(TxHoverContext))\r\n  const locationContext = useContext(TxLocationContext)\r\n  const dispatch = useDispatch()\r\n  const { canCancel, canConfirmThenExecute, canExecute } = useTransactionActions(transaction)\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const isPending = txStatus === LocalTransactionStatus.PENDING\r\n\r\n  const handleConfirmButtonClick = useCallback(\r\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n      event.stopPropagation()\r\n      if (transaction.txDetails && isMultiSigExecutionDetails(transaction.txDetails.detailedExecutionInfo)) {\r\n        const details = transaction.txDetails.detailedExecutionInfo\r\n        if (\r\n          (canExecute && details.confirmationsRequired > details.confirmations.length) ||\r\n          (canConfirmThenExecute && details.confirmationsRequired - 1 > details.confirmations.length)\r\n        ) {\r\n          dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\r\n          return\r\n        }\r\n      }\r\n      actionContext.current.selectAction({\r\n        actionSelected: canExecute || canConfirmThenExecute ? 'execute' : 'confirm',\r\n        transactionId: transaction.id,\r\n      })\r\n    },\r\n    [canConfirmThenExecute, canExecute, dispatch, transaction.id, transaction.txDetails],\r\n  )\r\n\r\n  const handleCancelButtonClick = useCallback(\r\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n      event.stopPropagation()\r\n      actionContext.current.selectAction({\r\n        actionSelected: 'cancel',\r\n        transactionId: transaction.id,\r\n      })\r\n    },\r\n    [transaction.id],\r\n  )\r\n\r\n  const handleOnMouseEnter = useCallback(() => {\r\n    if (canExecute) {\r\n      hoverContext.current.setActiveHover(transaction.id)\r\n    }\r\n  }, [canExecute, transaction.id])\r\n\r\n  const handleOnMouseLeave = useCallback(() => {\r\n    hoverContext.current.setActiveHover()\r\n  }, [])\r\n\r\n  const signaturePending = addressInList(\r\n    (transaction.executionInfo as MultisigExecutionInfo)?.missingSigners ?? undefined,\r\n  )\r\n\r\n  const disabledActions =\r\n    !currentUser ||\r\n    isPending ||\r\n    (txStatus === LocalTransactionStatus.AWAITING_EXECUTION && locationContext.txLocation === 'queued.queued') ||\r\n    (txStatus === LocalTransactionStatus.AWAITING_CONFIRMATIONS && !signaturePending(currentUser))\r\n\r\n  return {\r\n    canCancel,\r\n    handleConfirmButtonClick,\r\n    handleCancelButtonClick,\r\n    handleOnMouseEnter,\r\n    handleOnMouseLeave,\r\n    isPending,\r\n    disabledActions,\r\n  }\r\n}\r\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { isCustomTxInfo, isMultisigExecutionInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { getTransactionsByNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { shouldSwitchWalletChain, userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\nimport { AppReduxState } from 'src/store'\r\nimport { TxLocationContext } from '../TxLocationProvider'\r\n\r\nexport const isThresholdReached = (executionInfo: MultisigExecutionInfo): boolean => {\r\n  const { confirmationsSubmitted, confirmationsRequired } = executionInfo\r\n  return confirmationsSubmitted >= confirmationsRequired\r\n}\r\n\r\nexport type TransactionActions = {\r\n  canConfirm: boolean\r\n  canConfirmThenExecute: boolean\r\n  canExecute: boolean\r\n  canCancel: boolean\r\n  isUserAnOwner: boolean\r\n}\r\n\r\nexport const useTransactionActions = (transaction: Transaction): TransactionActions => {\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const safeAddress = extractSafeAddress()\r\n  const isUserAnOwner = useSelector(grantedSelector)\r\n  const isWrongChain = useSelector(shouldSwitchWalletChain)\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const transactionsByNonce = useSelector((state: AppReduxState) =>\r\n    getTransactionsByNonce(state, (transaction.executionInfo as MultisigExecutionInfo)?.nonce ?? -1),\r\n  )\r\n  const canCancel =\r\n    !transactionsByNonce.some(({ txInfo }) => isCustomTxInfo(txInfo) && txInfo.isCancellation) &&\r\n    isUserAnOwner &&\r\n    !isWrongChain\r\n\r\n  const [state, setState] = useState<TransactionActions>({\r\n    canConfirm: false,\r\n    canConfirmThenExecute: false,\r\n    canExecute: false,\r\n    canCancel: false,\r\n    isUserAnOwner,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !!currentUser &&\r\n      txLocation !== 'history' &&\r\n      isMultisigExecutionInfo(transaction.executionInfo) &&\r\n      transaction.executionInfo\r\n    ) {\r\n      const { missingSigners, confirmationsSubmitted = 0, confirmationsRequired = 0 } = transaction.executionInfo || {}\r\n\r\n      const currentUserSigned = !missingSigners?.some((missingSigner) => sameAddress(missingSigner.value, currentUser))\r\n      const oneToGo = confirmationsSubmitted === confirmationsRequired - 1\r\n      const canConfirm =\r\n        ['queued.next', 'queued.queued'].includes(txLocation) && !currentUserSigned && isUserAnOwner && !isWrongChain\r\n      const thresholdReached = confirmationsSubmitted >= confirmationsRequired\r\n\r\n      setState({\r\n        canConfirm,\r\n        canConfirmThenExecute: txLocation === 'queued.next' && canConfirm && oneToGo,\r\n        canExecute: txLocation === 'queued.next' && thresholdReached && !!currentUser && !isWrongChain,\r\n        canCancel,\r\n        isUserAnOwner,\r\n      })\r\n    } else {\r\n      setState((prev) => ({ ...prev, isUserAnOwner }))\r\n    }\r\n  }, [currentUser, isUserAnOwner, safeAddress, transaction, txLocation, canCancel, isWrongChain])\r\n\r\n  return state\r\n}\r\n","import { Icon, Tooltip } from '@gnosis.pm/safe-react-components'\r\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { default as MuiIconButton } from '@material-ui/core/IconButton'\r\nimport { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useActionButtonsHandlers } from './hooks/useActionButtonsHandlers'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\nimport { isAwaitingExecution } from './utils'\r\n\r\nconst IconButton = styled(MuiIconButton)`\r\n  padding: 8px !important;\r\n\r\n  &.Mui-disabled {\r\n    opacity: 0.4;\r\n  }\r\n`\r\n\r\ntype TxCollapsedActionsProps = {\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxCollapsedActions = ({ transaction }: TxCollapsedActionsProps): ReactElement => {\r\n  const {\r\n    canCancel,\r\n    handleConfirmButtonClick,\r\n    handleCancelButtonClick,\r\n    handleOnMouseEnter,\r\n    handleOnMouseLeave,\r\n    isPending,\r\n    disabledActions,\r\n  } = useActionButtonsHandlers(transaction)\r\n  const nonce = useSelector(currentSafeNonce)\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const isAwaitingEx = isAwaitingExecution(txStatus)\r\n\r\n  const getTitle = () => {\r\n    if (isAwaitingEx) {\r\n      return (transaction.executionInfo as MultisigExecutionInfo)?.nonce === nonce\r\n        ? 'Execute'\r\n        : `Transaction with nonce ${nonce} needs to be executed first`\r\n    }\r\n    return 'Confirm'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title={getTitle()} placement=\"top\">\r\n        <span>\r\n          <IconButton\r\n            size=\"small\"\r\n            type=\"button\"\r\n            onClick={handleConfirmButtonClick}\r\n            disabled={disabledActions}\r\n            onMouseEnter={handleOnMouseEnter}\r\n            onMouseLeave={handleOnMouseLeave}\r\n          >\r\n            <Icon type={isAwaitingEx ? 'rocket' : 'check'} color=\"primary\" size=\"sm\" />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      {canCancel && (\r\n        <Tooltip title=\"Reject\" placement=\"top\">\r\n          <span>\r\n            <IconButton size=\"small\" type=\"button\" onClick={handleCancelButtonClick} disabled={isPending}>\r\n              <Icon type=\"circleCross\" color=\"error\" size=\"sm\" />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Img from 'src/components/layout/Img'\r\nimport NFTIcon from 'src/routes/safe/components/Balances/assets/nft_icon.png'\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\nimport { TokenTransferAsset } from './hooks/useAssetInfo'\r\n\r\nconst Amount = styled(Text)`\r\n  margin-left: 10px;\r\n  line-height: 16px;\r\n  max-width: 200px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst AmountWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport type TokenTransferAmountProps = {\r\n  assetInfo: TokenTransferAsset\r\n}\r\n\r\nexport const TokenTransferAmount = ({ assetInfo }: TokenTransferAmountProps): ReactElement => {\r\n  return (\r\n    <AmountWrapper>\r\n      <Img\r\n        alt={assetInfo.name}\r\n        height={26}\r\n        onError={(error) => {\r\n          error.currentTarget.onerror = null\r\n          error.currentTarget.src = assetInfo.tokenType === TokenType.ERC721 ? NFTIcon : TokenPlaceholder\r\n        }}\r\n        src={assetInfo.logoUri}\r\n      />\r\n      <Amount size=\"xl\">{`${assetInfo.directionSign}${assetInfo.amountWithSymbol}`}</Amount>\r\n    </AmountWrapper>\r\n  )\r\n}\r\n","import { Dot, IconText as IconTextSrc, Loader, Text, Tooltip } from '@gnosis.pm/safe-react-components'\r\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\r\nimport { ReactElement, useContext, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { MultiSend, Custom } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { CustomIconText } from 'src/components/CustomIconText'\r\nimport {\r\n  isCustomTxInfo,\r\n  isMultiSendTxInfo,\r\n  isSettingsChangeTxInfo,\r\n  LocalTransactionStatus,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TxCollapsedActions } from './TxCollapsedActions'\r\nimport { formatDateTime, formatTime, formatTimeInWords } from 'src/utils/date'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { AssetInfo, isTokenTransferAsset } from './hooks/useAssetInfo'\r\nimport { TransactionStatusProps } from './hooks/useTransactionStatus'\r\nimport { TxTypeProps } from './hooks/useTransactionType'\r\nimport { StyledGroupedTransactions, StyledTransaction } from './styled'\r\nimport { TokenTransferAmount } from './TokenTransferAmount'\r\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { CalculatedVotes } from './TxQueueCollapsed'\r\nimport { getTxTo, isAwaitingExecution, isCancelTxDetails } from './utils'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { useKnownAddress } from './hooks/useKnownAddress'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\n\r\nconst TxInfo = ({ info, name }: { info: AssetInfo; name?: string }) => {\r\n  if (isTokenTransferAsset(info)) {\r\n    return <TokenTransferAmount assetInfo={info} />\r\n  }\r\n\r\n  if (isSettingsChangeTxInfo(info) && !isCustomTxInfo(info)) {\r\n    const UNKNOWN_MODULE = 'Unknown module'\r\n\r\n    switch (info.settingsInfo?.type) {\r\n      case 'SET_FALLBACK_HANDLER':\r\n      case 'ADD_OWNER':\r\n      case 'REMOVE_OWNER':\r\n      case 'SWAP_OWNER':\r\n      case 'CHANGE_THRESHOLD':\r\n      case 'CHANGE_IMPLEMENTATION':\r\n        break\r\n      case 'ENABLE_MODULE':\r\n      case 'DISABLE_MODULE':\r\n        return (\r\n          <Text size=\"xl\" as=\"span\">\r\n            {name || UNKNOWN_MODULE}\r\n          </Text>\r\n        )\r\n    }\r\n  }\r\n\r\n  if (isCustomTxInfo(info)) {\r\n    if (isMultiSendTxInfo(info)) {\r\n      return (\r\n        <Text size=\"xl\" as=\"span\">\r\n          {info.actionCount} {`action${(info as MultiSend).actionCount > 1 ? 's' : ''}`}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Text size=\"xl\" as=\"span\">\r\n        {(info as Custom).methodName}\r\n      </Text>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nconst CircularProgressPainter = styled.div<{ color: ThemeColors }>`\r\n  color: ${({ theme, color }) => theme.colors[color]};\r\n`\r\n\r\nconst SmallDot = styled(Dot)`\r\n  height: 8px;\r\n  width: 8px;\r\n  background-color: ${({ theme, color }) => theme.colors[color]} !important;\r\n`\r\n\r\nconst IconText = styled(IconTextSrc)`\r\n  p {\r\n    font-weight: bold;\r\n  }\r\n`\r\n\r\nconst TooltipContent = styled.div`\r\n  width: max-content;\r\n`\r\n\r\ntype TxCollapsedProps = {\r\n  transaction: Transaction\r\n  isGrouped?: boolean\r\n  nonce?: number\r\n  type: TxTypeProps\r\n  info?: AssetInfo\r\n  time: number\r\n  votes?: CalculatedVotes\r\n  status: TransactionStatusProps\r\n}\r\n\r\nexport const TxCollapsed = ({\r\n  transaction,\r\n  isGrouped = false,\r\n  nonce,\r\n  type,\r\n  info,\r\n  time,\r\n  votes,\r\n  status,\r\n}: TxCollapsedProps): ReactElement => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const { ref, lastItemId } = useContext(TxsInfiniteScrollContext)\r\n  const userAddress = useSelector(userAccountSelector)\r\n  const toAddress = getTxTo(transaction)\r\n  const toInfo = useKnownAddress(toAddress)\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const isPending = txStatus === LocalTransactionStatus.PENDING\r\n  const willBeReplaced = txStatus === LocalTransactionStatus.WILL_BE_REPLACED ? ' will-be-replaced' : ''\r\n\r\n  const onChainRejection =\r\n    isCancelTxDetails(transaction.txInfo) && txLocation !== 'history' ? ' on-chain-rejection' : ''\r\n\r\n  const txCollapsedNonce = (\r\n    <div className={'tx-nonce' + willBeReplaced}>\r\n      <Text size=\"xl\">{nonce}</Text>\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedType = (\r\n    <div className={'tx-type' + willBeReplaced + onChainRejection}>\r\n      <CustomIconText\r\n        address={toAddress?.value || '0x'}\r\n        iconUrl={type.icon || toInfo?.logoUri || undefined}\r\n        iconUrlFallback={type.fallbackIcon}\r\n        text={type.text || toInfo?.name || undefined}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedInfo = (\r\n    <div className={'tx-info' + willBeReplaced}>{info && <TxInfo info={info} name={toInfo?.name || undefined} />}</div>\r\n  )\r\n\r\n  const timestamp = useRef<HTMLDivElement | null>(null)\r\n\r\n  const txCollapsedTime = (\r\n    <div className={'tx-time' + willBeReplaced}>\r\n      <Tooltip title={formatDateTime(time)} arrow backgroundColor=\"white\" size=\"lg\">\r\n        <TooltipContent ref={timestamp}>\r\n          <Text size=\"xl\">{txLocation === 'history' ? formatTime(time) : formatTimeInWords(time)}</Text>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedVotes = (\r\n    <div className={'tx-votes' + willBeReplaced}>\r\n      {votes && (\r\n        <IconText\r\n          color={votes.required > votes.submitted ? 'secondaryLight' : 'primary'}\r\n          iconType=\"owners\"\r\n          iconSize=\"sm\"\r\n          text={`${votes.votes}`}\r\n          textSize=\"md\"\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedActions = (\r\n    <div className={'tx-actions' + willBeReplaced}>\r\n      {!isPending && userAddress && txLocation !== 'history' && transaction && (\r\n        <TxCollapsedActions transaction={transaction} />\r\n      )}\r\n    </div>\r\n  )\r\n\r\n  // attaching ref to a div element as it was causing troubles to add a `ref` to a FunctionComponent\r\n  const txCollapsedStatus = (\r\n    <div className=\"tx-status\" ref={sameString(lastItemId, transaction.id) ? ref : null}>\r\n      {isPending ? (\r\n        <CircularProgressPainter color={status.color}>\r\n          <Loader size=\"xs\" color=\"pending\" />\r\n        </CircularProgressPainter>\r\n      ) : (\r\n        (isAwaitingExecution(txStatus) || txStatus === LocalTransactionStatus.AWAITING_CONFIRMATIONS) && (\r\n          <SmallDot color={status.color} />\r\n        )\r\n      )}\r\n      <Text size=\"md\" color={status.color} className=\"col\" strong>\r\n        {status.text}\r\n      </Text>\r\n    </div>\r\n  )\r\n\r\n  return isGrouped ? (\r\n    <StyledGroupedTransactions>\r\n      {/* no nonce */}\r\n      {txCollapsedType}\r\n      {txCollapsedInfo}\r\n      {txCollapsedTime}\r\n      {txCollapsedVotes}\r\n      {txCollapsedActions}\r\n      {txCollapsedStatus}\r\n    </StyledGroupedTransactions>\r\n  ) : (\r\n    <StyledTransaction className={sameString(status.text, 'Failed') ? 'failed-transaction' : ''}>\r\n      {txCollapsedNonce}\r\n      {txCollapsedType}\r\n      {txCollapsedInfo}\r\n      {txCollapsedTime}\r\n      {txCollapsedVotes}\r\n      {txCollapsedActions}\r\n      {txCollapsedStatus}\r\n    </StyledTransaction>\r\n  )\r\n}\r\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useAssetInfo } from './hooks/useAssetInfo'\r\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\r\nimport { useTransactionType } from './hooks/useTransactionType'\r\nimport { TxCollapsed } from './TxCollapsed'\r\n\r\nexport const TxHistoryCollapsed = ({ transaction }: { transaction: Transaction }): ReactElement => {\r\n  const nonce = (transaction.executionInfo as MultisigExecutionInfo)?.nonce\r\n  const type = useTransactionType(transaction)\r\n  const info = useAssetInfo(transaction.txInfo)\r\n  const status = useTransactionStatus(transaction)\r\n\r\n  return (\r\n    <TxCollapsed\r\n      nonce={nonce}\r\n      type={type}\r\n      info={info}\r\n      time={transaction.timestamp}\r\n      status={status}\r\n      transaction={transaction}\r\n    />\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport useTokenInfo from 'src/logic/safe/hooks/useTokenInfo'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { getResetTimeOptions } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime'\r\nimport { AddressInfo, ResetTimeInfo, TokenInfo } from 'src/routes/safe/components/Settings/SpendingLimit/InfoDisplay'\r\nimport { TransactionData, TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { getTxTo } from './utils'\r\n\r\nconst SET_ALLOWANCE = 'setAllowance'\r\nconst DELETE_ALLOWANCE = 'deleteAllowance'\r\n\r\nexport const isSetAllowance = (method?: string): boolean => {\r\n  return sameString(method, SET_ALLOWANCE)\r\n}\r\n\r\nexport const isDeleteAllowance = (method?: string): boolean => {\r\n  return sameString(method, DELETE_ALLOWANCE)\r\n}\r\n\r\nexport const isSpendingLimitMethod = (method?: string): boolean => {\r\n  return isSetAllowance(method) || isDeleteAllowance(method)\r\n}\r\n\r\nconst SpendingLimitRow = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\ntype SpendingLimitProps = {\r\n  txData: TransactionData\r\n  txInfo: TransactionInfo\r\n}\r\n\r\nexport const ModifySpendingLimitDetails = ({ txData, txInfo }: SpendingLimitProps): React.ReactElement => {\r\n  const { dataDecoded } = txData\r\n  const [beneficiary, tokenAddress, amount, resetTimeMin] = useMemo(\r\n    () => dataDecoded?.parameters?.map(({ value }) => value) ?? [],\r\n    [dataDecoded?.parameters],\r\n  )\r\n\r\n  const resetTimeLabel = useMemo(\r\n    () => getResetTimeOptions().find(({ value }) => +value === +resetTimeMin)?.label ?? '',\r\n    [resetTimeMin],\r\n  )\r\n\r\n  const tokenInfo = useTokenInfo(tokenAddress as string)\r\n  const txTo = getTxTo({ txInfo })\r\n\r\n  return (\r\n    <>\r\n      <SpendingLimitRow>\r\n        <Text size=\"xl\" strong>\r\n          Modify spending limit:\r\n        </Text>\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        <AddressInfo\r\n          title=\"Beneficiary\"\r\n          address={(beneficiary as string) || txTo?.value || '0x'}\r\n          name={txTo?.name || undefined}\r\n          logoUri={txTo?.logoUri || undefined}\r\n        />\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        {tokenInfo && (\r\n          <TokenInfo amount={fromTokenUnit(amount as string, tokenInfo.decimals)} title=\"Amount\" token={tokenInfo} />\r\n        )}\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        <ResetTimeInfo title=\"Reset Time\" label={resetTimeLabel} />\r\n      </SpendingLimitRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const DeleteSpendingLimitDetails = ({ txData, txInfo }: SpendingLimitProps): React.ReactElement => {\r\n  const { dataDecoded } = txData\r\n  const [beneficiary, tokenAddress] = useMemo(\r\n    () => dataDecoded?.parameters?.map(({ value }) => value) ?? [],\r\n    [dataDecoded?.parameters],\r\n  )\r\n  const tokenInfo = useTokenInfo(tokenAddress as string)\r\n  const txTo = getTxTo({ txInfo })\r\n\r\n  return (\r\n    <>\r\n      <SpendingLimitRow>\r\n        <Text size=\"xl\" strong>\r\n          Delete spending limit:\r\n        </Text>\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        <AddressInfo\r\n          title=\"Beneficiary\"\r\n          address={(beneficiary as string) || txTo?.value || '0x'}\r\n          name={txTo?.name || undefined}\r\n          logoUri={txTo?.logoUri || undefined}\r\n        />\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>{tokenInfo && <TokenInfo amount=\"\" title=\"Token\" token={tokenInfo} />}</SpendingLimitRow>\r\n    </>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\nimport { ClickAwayListener, createStyles, Divider } from '@material-ui/core'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { sameString } from 'src/utils/strings'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\r\nimport { xs } from 'src/theme/variables'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\nimport { SAFE_ROUTES, history, extractSafeAddress, generateSafeRoute } from 'src/routes/routes'\r\nimport { getShortName } from 'src/config'\r\n\r\nconst useStyles = makeStyles(\r\n  createStyles({\r\n    container: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      margin: `0 ${xs}`,\r\n      borderRadius: '50%',\r\n      transition: 'background-color .2s ease-in-out',\r\n      '&:hover': {\r\n        backgroundColor: '#F0EFEE',\r\n      },\r\n      outline: 'none',\r\n    },\r\n    increasedPopperZindex: {\r\n      zIndex: 2001,\r\n    },\r\n  }),\r\n)\r\n\r\ntype EllipsisTransactionDetailsProps = {\r\n  address: string\r\n  sendModalOpenHandler?: () => void\r\n}\r\n\r\nexport const EllipsisTransactionDetails = ({\r\n  address,\r\n  sendModalOpenHandler,\r\n}: EllipsisTransactionDetailsProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [anchorEl, setAnchorEl] = useState(null)\r\n\r\n  const isOwnerConnected = useSelector(grantedSelector)\r\n\r\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address }))\r\n  // We have to check that the name returned is not UNKNOWN\r\n  const isStoredInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\r\n\r\n  const handleClick = (event) => setAnchorEl(event.currentTarget)\r\n\r\n  const closeMenuHandler = () => setAnchorEl(null)\r\n\r\n  const addOrEditEntryHandler = () => {\r\n    history.push({\r\n      pathname: generateSafeRoute(SAFE_ROUTES.ADDRESS_BOOK, {\r\n        shortName: getShortName(),\r\n        safeAddress: extractSafeAddress(),\r\n      }),\r\n      search: `?entryAddress=${address}`,\r\n    })\r\n    closeMenuHandler()\r\n  }\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={closeMenuHandler}>\r\n      <div className={classes.container} role=\"menu\" tabIndex={0}>\r\n        <MoreHorizIcon onClick={handleClick} onKeyDown={handleClick} />\r\n        <Menu anchorEl={anchorEl} id=\"simple-menu\" keepMounted onClose={closeMenuHandler} open={Boolean(anchorEl)}>\r\n          {sendModalOpenHandler\r\n            ? [\r\n                <MenuItem key=\"send-again-button\" onClick={sendModalOpenHandler} disabled={!isOwnerConnected}>\r\n                  Send Again\r\n                </MenuItem>,\r\n                <Divider key=\"divider\" />,\r\n              ]\r\n            : null}\r\n          {isStoredInAddressBook ? (\r\n            <MenuItem onClick={addOrEditEntryHandler}>Edit Address book Entry</MenuItem>\r\n          ) : (\r\n            <MenuItem onClick={addOrEditEntryHandler}>Add to address book</MenuItem>\r\n          )}\r\n        </Menu>\r\n      </div>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { useKnownAddress } from './hooks/useKnownAddress'\r\n\r\ntype EthHashInfoRestProps = Omit<\r\n  Parameters<typeof PrefixedEthHashInfo>[0],\r\n  'hash' | 'name' | 'showAvatar' | 'customAvatar' | 'showCopyBtn' | 'explorerUrl'\r\n>\r\n\r\ntype Props = EthHashInfoRestProps & {\r\n  address: string\r\n  name?: string | undefined\r\n  avatarUrl?: string | undefined\r\n}\r\n\r\nexport const AddressInfo = ({ address, name, avatarUrl, ...rest }: Props): ReactElement | null => {\r\n  const toInfo = useKnownAddress({ value: address, name: name || null, logoUri: avatarUrl || null })\r\n\r\n  if (address === '') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <PrefixedEthHashInfo\r\n      hash={address}\r\n      name={toInfo.name || undefined}\r\n      showAvatar\r\n      customAvatar={toInfo.logoUri || undefined}\r\n      showCopyBtn\r\n      explorerUrl={getExplorerInfo(address)}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement, ReactNode } from 'react'\r\n\r\ntype InfoDetailsProps = {\r\n  children: ReactNode\r\n  title: string\r\n}\r\n\r\nexport const InfoDetails = ({ children, title }: InfoDetailsProps): ReactElement => (\r\n  <>\r\n    <Text size=\"xl\" strong>\r\n      {title}\r\n    </Text>\r\n    {children}\r\n  </>\r\n)\r\n","import { Erc721Transfer, Transfer, TokenType } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement, useContext, useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { EllipsisTransactionDetails } from 'src/routes/safe/components/AddressBook/EllipsisTransactionDetails'\r\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\r\nimport { AddressInfo } from './AddressInfo'\r\nimport { InfoDetails } from './InfoDetails'\r\nimport { TxLocationContext, TxLocationProps } from './TxLocationProvider'\r\nimport { getTxTokenData } from './utils'\r\n\r\nconst SingleRow = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n`\r\n\r\ntype TxInfoDetailsProps = {\r\n  title: string\r\n  address: string\r\n  name?: string | undefined\r\n  avatarUrl?: string | undefined\r\n  isTransferType?: boolean\r\n  txInfo?: Transfer\r\n}\r\n\r\nexport const TxInfoDetails = ({\r\n  title,\r\n  address,\r\n  isTransferType,\r\n  txInfo,\r\n  name,\r\n  avatarUrl,\r\n}: TxInfoDetailsProps): ReactElement => {\r\n  const { txLocation } = useContext<TxLocationProps>(TxLocationContext)\r\n  const canRepeatTransaction =\r\n    // is transfer type by context\r\n    isTransferType &&\r\n    // not a Collectible\r\n    txInfo?.transferInfo.type !== TokenType.ERC721 &&\r\n    // in history list\r\n    txLocation === 'history' &&\r\n    // it's outgoing\r\n    txInfo?.direction === 'OUTGOING'\r\n\r\n  const [sendModalOpen, setSendModalOpen] = useState(false)\r\n  const sendModalOpenHandler = () => {\r\n    setSendModalOpen(true)\r\n  }\r\n  const onClose = () => {\r\n    setSendModalOpen(false)\r\n  }\r\n\r\n  const [sendModalParams, setSendModalParams] = useState<{\r\n    activeScreenType: 'sendCollectible' | 'sendFunds'\r\n    recipientAddress: string\r\n    selectedToken: string | Erc721Transfer\r\n    tokenAmount: string\r\n  }>({\r\n    activeScreenType: 'sendFunds',\r\n    recipientAddress: address,\r\n    selectedToken: ZERO_ADDRESS,\r\n    tokenAmount: '0',\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (txInfo) {\r\n      const isCollectible = txInfo.transferInfo.type === TokenType.ERC721\r\n      const { address, value, decimals } = getTxTokenData(txInfo)\r\n\r\n      setSendModalParams((prev) => ({\r\n        ...prev,\r\n        activeScreenType: isCollectible ? 'sendCollectible' : 'sendFunds',\r\n        selectedToken: isCollectible ? (txInfo.transferInfo as Erc721Transfer) : address,\r\n        tokenAmount: isCollectible ? '1' : fromTokenUnit(value, Number(decimals)),\r\n      }))\r\n    }\r\n  }, [txInfo])\r\n\r\n  return (\r\n    <InfoDetails title={title}>\r\n      <SingleRow>\r\n        <AddressInfo address={address} name={name} avatarUrl={avatarUrl} />\r\n        <EllipsisTransactionDetails\r\n          address={address}\r\n          sendModalOpenHandler={canRepeatTransaction ? sendModalOpenHandler : undefined}\r\n        />\r\n      </SingleRow>\r\n      {canRepeatTransaction && <SendModal isOpen={sendModalOpen} onClose={onClose} {...sendModalParams} />}\r\n    </InfoDetails>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport { ReactElement, useState } from 'react'\r\n\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport LinkWithRef from 'src/components/layout/Link'\r\nimport { textShortener } from 'src/utils/strings'\r\n\r\nexport const styles = createStyles({\r\n  txDataParagraph: {\r\n    whiteSpace: 'normal',\r\n  },\r\n  linkTxData: {\r\n    textDecoration: 'underline',\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport const HexEncodedData = ({\r\n  hexData,\r\n  title,\r\n  limit = 20,\r\n}: {\r\n  hexData: string\r\n  title?: string\r\n  limit?: number\r\n}): ReactElement => {\r\n  const classes = useStyles()\r\n  const [showTxData, setShowTxData] = useState(false)\r\n  const showExpandBtn = hexData.length > limit\r\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\r\n\r\n  return (\r\n    <div className=\"tx-hexData\">\r\n      {title && (\r\n        <Text size=\"xl\" strong>\r\n          {title}:\r\n        </Text>\r\n      )}\r\n      <Paragraph className={classes.txDataParagraph} noMargin size=\"md\">\r\n        {showExpandBtn ? (\r\n          <>\r\n            {showTxData ? (\r\n              <>\r\n                {hexData}{' '}\r\n                <LinkWithRef\r\n                  aria-label=\"Hide details of the transaction\"\r\n                  className={classes.linkTxData}\r\n                  onClick={() => setShowTxData(false)}\r\n                  rel=\"noopener noreferrer\"\r\n                  target=\"_blank\"\r\n                >\r\n                  Show Less\r\n                </LinkWithRef>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {shortener(hexData)}{' '}\r\n                <LinkWithRef\r\n                  aria-label=\"Show details of the transaction\"\r\n                  className={classes.linkTxData}\r\n                  onClick={() => setShowTxData(true)}\r\n                  rel=\"noopener noreferrer\"\r\n                  target=\"_blank\"\r\n                >\r\n                  Show More\r\n                </LinkWithRef>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          hexData\r\n        )}\r\n      </Paragraph>\r\n    </div>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport {\r\n  isAddress,\r\n  isArrayParameter,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\nimport { HexEncodedData } from './HexEncodedData'\r\nimport { getExplorerInfo } from 'src/config'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nconst NestedWrapper = styled.div`\r\n  padding-left: 4px;\r\n`\r\n\r\ninterface RenderValueProps {\r\n  method: string\r\n  type: string\r\n  value: string | string[]\r\n}\r\n\r\nconst GenericValue = ({ method, type, value }: RenderValueProps): React.ReactElement => {\r\n  const getTextValue = (value: string) => <HexEncodedData limit={60} hexData={value} />\r\n\r\n  const getArrayValue = (parentId: string, value: string[] | string) => (\r\n    <div>\r\n      [\r\n      <NestedWrapper>\r\n        {(value as string[]).map((currentValue, index) => {\r\n          const key = `${parentId}-value-${index}`\r\n          return Array.isArray(currentValue) ? (\r\n            <Text key={key} size=\"xl\">\r\n              {getArrayValue(key, currentValue)}\r\n            </Text>\r\n          ) : (\r\n            getTextValue(currentValue)\r\n          )\r\n        })}\r\n      </NestedWrapper>\r\n      ]\r\n    </div>\r\n  )\r\n\r\n  if (isArrayParameter(type) || Array.isArray(value)) {\r\n    return getArrayValue(method, value)\r\n  }\r\n\r\n  return getTextValue(value as string)\r\n}\r\n\r\nconst Value = ({ type, ...props }: RenderValueProps): React.ReactElement => {\r\n  if (isArrayParameter(type) && isAddress(type)) {\r\n    return (\r\n      <div>\r\n        [\r\n        <NestedWrapper>\r\n          {(props.value as string[]).map((address) => {\r\n            const explorerUrl = getExplorerInfo(address)\r\n            return (\r\n              <PrefixedEthHashInfo key={address} textSize=\"xl\" hash={address} showCopyBtn explorerUrl={explorerUrl} />\r\n            )\r\n          })}\r\n        </NestedWrapper>\r\n        ]\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (isAddress(type)) {\r\n    const explorerUrl = getExplorerInfo(props.value as string)\r\n    return (\r\n      <PrefixedEthHashInfo\r\n        textSize=\"xl\"\r\n        hash={props.value as string}\r\n        showCopyBtn\r\n        explorerUrl={explorerUrl}\r\n        shortenHash={4}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <GenericValue type={type} {...props} />\r\n}\r\n\r\nexport default Value\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport { isArrayParameter } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\nimport Value from 'src/routes/safe/components/Transactions/TxList/MethodValue'\r\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\r\n\r\nconst TxDetailsMethodParam = styled.div<{ isArrayParameter: boolean }>`\r\n  padding-left: 24px;\r\n  display: ${({ isArrayParameter }) => (isArrayParameter ? 'block' : 'flex')};\r\n  align-items: center;\r\n\r\n  p:first-of-type {\r\n    margin-right: ${({ isArrayParameter }) => (isArrayParameter ? '0' : '4px')};\r\n  }\r\n`\r\n\r\nconst TxInfo = styled.div`\r\n  padding: 8px 0;\r\n`\r\n\r\nconst StyledMethodName = styled(Text)`\r\n  white-space: nowrap;\r\n`\r\n\r\nexport const MethodDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\r\n  return (\r\n    <TxInfo>\r\n      <Text size=\"xl\" strong>\r\n        {data.method}\r\n      </Text>\r\n\r\n      {data.parameters?.map((param, index) => (\r\n        <TxDetailsMethodParam key={`${data.method}_param-${index}`} isArrayParameter={isArrayParameter(param.type)}>\r\n          <StyledMethodName size=\"xl\" strong>\r\n            {param.name}({param.type}):\r\n          </StyledMethodName>\r\n          <Value method={data.method} type={param.type} value={param.value as string} />\r\n        </TxDetailsMethodParam>\r\n      ))}\r\n    </TxInfo>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\n\r\nconst DelegateCallWarning = ({ isKnown }: { isKnown: boolean }): ReactElement => {\r\n  if (!isKnown) {\r\n    return (\r\n      <Text size=\"xl\" strong as=\"span\" color=\"error\">\r\n        ⚠️ Unexpected Delegate Call\r\n      </Text>\r\n    )\r\n  }\r\n  return (\r\n    <Text size=\"xl\" strong as=\"span\">\r\n      Delegate Call\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default DelegateCallWarning\r\n","import { AccordionSummary, IconText } from '@gnosis.pm/safe-react-components'\r\nimport { DataDecoded, Operation, TransactionData } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement, ReactNode } from 'react'\r\n\r\nimport { getNativeCurrency } from 'src/config'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport DelegateCallWarning from './DelegateCallWarning'\r\nimport { HexEncodedData } from './HexEncodedData'\r\nimport { MethodDetails } from './MethodDetails'\r\nimport { isSpendingLimitMethod } from './SpendingLimitDetails'\r\nimport { ColumnDisplayAccordionDetails, ActionAccordion } from './styled'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\n\r\ntype MultiSendTxGroupProps = {\r\n  actionTitle: string\r\n  children: ReactNode\r\n  txDetails: {\r\n    title: string\r\n    address: string\r\n    name?: string | undefined\r\n    avatarUrl?: string | undefined\r\n    dataDecoded: DataDecoded | null\r\n    operation: Operation\r\n  }\r\n}\r\n\r\nconst MultiSendTxGroup = ({ actionTitle, children, txDetails }: MultiSendTxGroupProps): ReactElement => {\r\n  const isDelegateCall = txDetails.operation === Operation.DELEGATE\r\n  const isKnown = !!txDetails.name\r\n  return (\r\n    <ActionAccordion defaultExpanded={(isDelegateCall && !isKnown) || undefined}>\r\n      <AccordionSummary>\r\n        <IconText iconSize=\"sm\" iconType=\"code\" text={actionTitle} textSize=\"xl\" />\r\n      </AccordionSummary>\r\n      <ColumnDisplayAccordionDetails>\r\n        {isDelegateCall && <DelegateCallWarning isKnown={isKnown} />}\r\n        {!isSpendingLimitMethod(txDetails.dataDecoded?.method) && (\r\n          <TxInfoDetails\r\n            title={txDetails.title}\r\n            address={txDetails.address}\r\n            name={txDetails.name}\r\n            avatarUrl={txDetails.avatarUrl}\r\n          />\r\n        )}\r\n        {children}\r\n      </ColumnDisplayAccordionDetails>\r\n    </ActionAccordion>\r\n  )\r\n}\r\n\r\nexport const MultiSendDetails = ({ txData }: { txData: TransactionData }): ReactElement | null => {\r\n  const nativeCurrency = getNativeCurrency()\r\n  // no parameters for the `multiSend`\r\n  if (!txData.dataDecoded?.parameters) {\r\n    // we render the hex encoded data\r\n    if (txData.hexData) {\r\n      return <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // multiSend has one parameter `transactions` therefore `txData.dataDecoded.parameters[0]` is safe to be used here\r\n  return (\r\n    <>\r\n      {txData.dataDecoded.parameters[0].valueDecoded?.map(({ dataDecoded }, index, valuesDecoded) => {\r\n        let details\r\n        const { data, value, to, operation } = valuesDecoded[index]\r\n\r\n        const actionTitle = `Action ${index + 1} ${dataDecoded ? `(${dataDecoded.method})` : ''}`\r\n        const amount = value ? fromTokenUnit(value, nativeCurrency.decimals) : 0\r\n        const title = `Send ${amount} ${nativeCurrency.symbol} to:`\r\n\r\n        if (dataDecoded) {\r\n          // Backend decoded data\r\n          details = <MethodDetails data={dataDecoded} />\r\n        } else {\r\n          // We couldn't decode it but we have data\r\n          details = data && <HexEncodedData title=\"Data (hex encoded)\" hexData={data} />\r\n        }\r\n\r\n        const addressInfo = txData.addressInfoIndex?.[to]\r\n        const name = addressInfo?.name || undefined\r\n        const avatarUrl = addressInfo?.logoUri || undefined\r\n\r\n        return (\r\n          <MultiSendTxGroup\r\n            key={`${data ?? to}-${index}`}\r\n            actionTitle={actionTitle}\r\n            txDetails={{ title, address: to, dataDecoded, name, avatarUrl, operation }}\r\n          >\r\n            {details}\r\n          </MultiSendTxGroup>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n","import { TransactionData } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement, ReactNode } from 'react'\r\n\r\nimport { getNativeCurrency } from 'src/config'\r\nimport { ExpandedTxDetails, isCustomTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport {\r\n  DeleteSpendingLimitDetails,\r\n  isDeleteAllowance,\r\n  isSetAllowance,\r\n  ModifySpendingLimitDetails,\r\n} from './SpendingLimitDetails'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { HexEncodedData } from './HexEncodedData'\r\nimport { MethodDetails } from './MethodDetails'\r\nimport { MultiSendDetails } from './MultiSendDetails'\r\nimport { TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\n\r\ntype DetailsWithTxInfoProps = {\r\n  children: ReactNode\r\n  txData: TransactionData\r\n  txInfo: TransactionInfo\r\n}\r\n\r\nconst DetailsWithTxInfo = ({ children, txData, txInfo }: DetailsWithTxInfoProps): ReactElement => {\r\n  const nativeCurrency = getNativeCurrency()\r\n  const amount = txData.value ? fromTokenUnit(txData.value, nativeCurrency.decimals) : 'n/a'\r\n  let name\r\n  let avatarUrl\r\n\r\n  if (isCustomTxInfo(txInfo)) {\r\n    name = txInfo.to.name\r\n    avatarUrl = txInfo.to.logoUri\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TxInfoDetails\r\n        address={txData.to.value}\r\n        name={name}\r\n        avatarUrl={avatarUrl}\r\n        title={`Send ${amount} ${nativeCurrency.symbol} to:`}\r\n      />\r\n\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\ntype TxDataProps = {\r\n  txData: ExpandedTxDetails['txData']\r\n  txInfo: TransactionInfo\r\n}\r\n\r\nexport const TxData = ({ txData, txInfo }: TxDataProps): ReactElement | null => {\r\n  // nothing to render\r\n  if (!txData) {\r\n    return null\r\n  }\r\n\r\n  // unknown tx information\r\n  if (!txData.dataDecoded) {\r\n    // no hex data, nothing to render\r\n    if (!txData.hexData) {\r\n      return null\r\n    }\r\n\r\n    // we render the hex encoded data\r\n    return (\r\n      <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\r\n        <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\r\n      </DetailsWithTxInfo>\r\n    )\r\n  }\r\n\r\n  // known data and particularly `multiSend` data type\r\n  if (sameString(txData.dataDecoded.method, 'multiSend')) {\r\n    return <MultiSendDetails txData={txData} />\r\n  }\r\n\r\n  // FixMe: this way won't scale well\r\n  if (isSetAllowance(txData.dataDecoded.method)) {\r\n    return <ModifySpendingLimitDetails txData={txData} txInfo={txInfo} />\r\n  }\r\n\r\n  // FixMe: this way won't scale well\r\n  if (isDeleteAllowance(txData.dataDecoded.method)) {\r\n    return <DeleteSpendingLimitDetails txData={txData} txInfo={txInfo} />\r\n  }\r\n\r\n  // we render the decoded data\r\n  return (\r\n    <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\r\n      <MethodDetails data={txData.dataDecoded} />\r\n    </DetailsWithTxInfo>\r\n  )\r\n}\r\n","import { Button, Tooltip } from '@gnosis.pm/safe-react-components'\r\nimport { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useActionButtonsHandlers } from 'src/routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\nimport { isAwaitingExecution } from './utils'\r\n\r\ntype TxExpandedActionsProps = {\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxExpandedActions = ({ transaction }: TxExpandedActionsProps): ReactElement => {\r\n  const {\r\n    canCancel,\r\n    handleConfirmButtonClick,\r\n    handleCancelButtonClick,\r\n    handleOnMouseEnter,\r\n    handleOnMouseLeave,\r\n    isPending,\r\n    disabledActions,\r\n  } = useActionButtonsHandlers(transaction)\r\n  const nonce = useSelector(currentSafeNonce)\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const isAwaitingEx = isAwaitingExecution(txStatus)\r\n\r\n  const onExecuteOrConfirm = (event) => {\r\n    handleOnMouseLeave()\r\n    handleConfirmButtonClick(event)\r\n  }\r\n\r\n  const getConfirmTooltipTitle = () => {\r\n    if (isAwaitingEx) {\r\n      return (transaction.executionInfo as MultisigExecutionInfo)?.nonce === nonce\r\n        ? 'Execute'\r\n        : `Transaction with nonce ${nonce} needs to be executed first`\r\n    }\r\n    return 'Confirm'\r\n  }\r\n\r\n  // There is a problem in chrome that produces onMouseLeave event not being triggered properly.\r\n  // https://github.com/facebook/react/issues/4492\r\n  return (\r\n    <>\r\n      <Tooltip title={getConfirmTooltipTitle()} placement=\"top\">\r\n        <span>\r\n          <Button\r\n            size=\"md\"\r\n            color=\"primary\"\r\n            disabled={disabledActions}\r\n            onClick={onExecuteOrConfirm}\r\n            onMouseEnter={handleOnMouseEnter}\r\n            onMouseLeave={handleOnMouseLeave}\r\n            className=\"primary\"\r\n          >\r\n            {isAwaitingEx ? 'Execute' : 'Confirm'}\r\n          </Button>\r\n        </span>\r\n      </Tooltip>\r\n      {canCancel && (\r\n        <Button size=\"md\" color=\"error\" onClick={handleCancelButtonClick} className=\"error\" disabled={isPending}>\r\n          Reject\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { SettingsChange } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { AddressInfo } from './AddressInfo'\r\nimport { InfoDetails } from './InfoDetails'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\n\r\ntype TxInfoSettingsProps = {\r\n  settingsInfo: SettingsChange['settingsInfo']\r\n}\r\n\r\nexport const TxInfoSettings = ({ settingsInfo }: TxInfoSettingsProps): ReactElement | null => {\r\n  if (!settingsInfo) {\r\n    return null\r\n  }\r\n\r\n  switch (settingsInfo.type) {\r\n    case 'SET_FALLBACK_HANDLER': {\r\n      return (\r\n        <InfoDetails title=\"Set fallback handler:\">\r\n          <AddressInfo\r\n            address={settingsInfo.handler.value}\r\n            name={settingsInfo.handler?.name || undefined}\r\n            avatarUrl={settingsInfo.handler?.logoUri || undefined}\r\n          />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'ADD_OWNER':\r\n    case 'REMOVE_OWNER': {\r\n      const title = settingsInfo.type === 'ADD_OWNER' ? 'Add owner:' : 'Remove owner:'\r\n      return (\r\n        <InfoDetails title={title}>\r\n          <AddressInfo\r\n            address={settingsInfo.owner.value}\r\n            name={settingsInfo.owner?.name || undefined}\r\n            avatarUrl={settingsInfo.owner?.logoUri || undefined}\r\n          />\r\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'SWAP_OWNER': {\r\n      return (\r\n        <InfoDetails title=\"Swap owner:\">\r\n          <TxInfoDetails\r\n            title=\"Old owner\"\r\n            address={settingsInfo.oldOwner.value}\r\n            name={settingsInfo.oldOwner?.name || undefined}\r\n            avatarUrl={settingsInfo.oldOwner?.logoUri || undefined}\r\n          />\r\n          <TxInfoDetails\r\n            title=\"New owner\"\r\n            address={settingsInfo.newOwner.value}\r\n            name={settingsInfo.newOwner?.name || undefined}\r\n            avatarUrl={settingsInfo.newOwner?.logoUri || undefined}\r\n          />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'CHANGE_THRESHOLD': {\r\n      return <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\r\n    }\r\n    case 'CHANGE_IMPLEMENTATION': {\r\n      return (\r\n        <InfoDetails title=\"Change implementation:\">\r\n          <AddressInfo\r\n            address={settingsInfo.implementation.value}\r\n            name={settingsInfo.implementation?.name || undefined}\r\n            avatarUrl={settingsInfo.implementation?.logoUri || undefined}\r\n          />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'ENABLE_MODULE':\r\n    case 'DISABLE_MODULE': {\r\n      const title = settingsInfo.type === 'ENABLE_MODULE' ? 'Enable module:' : 'Disable module:'\r\n      return (\r\n        <InfoDetails title={title}>\r\n          <AddressInfo\r\n            address={settingsInfo.module.value}\r\n            name={settingsInfo.module?.name || undefined}\r\n            avatarUrl={settingsInfo.module?.logoUri || undefined}\r\n          />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","import { Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement, useEffect, useState } from 'react'\r\n\r\nimport { useAssetInfo } from './hooks/useAssetInfo'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\n\r\ntype Details = {\r\n  title: string\r\n  address: string\r\n  name: string | undefined // AddressEx returns null if unknown\r\n}\r\n\r\nexport const TxInfoTransfer = ({ txInfo }: { txInfo: Transfer }): ReactElement | null => {\r\n  const assetInfo = useAssetInfo(txInfo)\r\n  const [details, setDetails] = useState<Details | undefined>()\r\n\r\n  useEffect(() => {\r\n    if (assetInfo && assetInfo.type === 'Transfer') {\r\n      if (txInfo.direction.toUpperCase() === 'INCOMING') {\r\n        setDetails({\r\n          title: `Received ${assetInfo.amountWithSymbol} from:`,\r\n          address: txInfo.sender.value,\r\n          name: txInfo.sender.name || undefined,\r\n        })\r\n      } else {\r\n        setDetails({\r\n          title: `Send ${assetInfo.amountWithSymbol} to:`,\r\n          address: txInfo.recipient.value,\r\n          name: txInfo.recipient.name || undefined,\r\n        })\r\n      }\r\n    }\r\n  }, [assetInfo, txInfo.direction, txInfo.recipient, txInfo.sender])\r\n\r\n  return details ? <TxInfoDetails {...details} isTransferType txInfo={txInfo} /> : null\r\n}\r\n","import { SettingsChange, TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TxInfoSettings } from './TxInfoSettings'\r\nimport { TxInfoTransfer } from './TxInfoTransfer'\r\n\r\nexport const TxInfo = ({ txInfo }: { txInfo: TransactionInfo }): ReactElement | null => {\r\n  if (isSettingsChangeTxInfo(txInfo)) {\r\n    return <TxInfoSettings settingsInfo={(txInfo as SettingsChange).settingsInfo} />\r\n  }\r\n\r\n  if (isTransferTxInfo(txInfo)) {\r\n    return <TxInfoTransfer txInfo={txInfo} />\r\n  }\r\n\r\n  return null\r\n}\r\n","export default __webpack_public_path__ + \"static/media/transactions-list-active.307ee003.svg\";","export default __webpack_public_path__ + \"static/media/transactions-list-inactive.e5d49753.svg\";","import { Text, Icon } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Img from 'src/components/layout/Img'\r\nimport { ExpandedTxDetails, isModuleExecutionInfo } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport TransactionListActive from './assets/transactions-list-active.svg'\r\nimport TransactionListInactive from './assets/transactions-list-inactive.svg'\r\nimport { AddressInfo } from './AddressInfo'\r\nimport { OwnerList, OwnerListItem } from './styled'\r\nimport { isCancelTxDetails } from './utils'\r\n\r\nconst StyledImg = styled(Img)`\r\n  background-color: transparent;\r\n  border-radius: 50%;\r\n`\r\n\r\nexport const TxOwners = ({\r\n  txDetails,\r\n  isPending,\r\n}: {\r\n  txDetails: ExpandedTxDetails\r\n  isPending: boolean\r\n}): ReactElement | null => {\r\n  const { txInfo, detailedExecutionInfo } = txDetails\r\n\r\n  if (!detailedExecutionInfo || isModuleExecutionInfo(detailedExecutionInfo)) {\r\n    return null\r\n  }\r\n\r\n  const confirmationsNeeded = detailedExecutionInfo.confirmationsRequired - detailedExecutionInfo.confirmations.length\r\n\r\n  const CreationNode = isCancelTxDetails(txInfo) ? (\r\n    <OwnerListItem>\r\n      <span className=\"icon\">\r\n        <Icon size=\"sm\" type=\"circleCross\" color=\"error\" />\r\n      </span>\r\n      <div className=\"legend\">\r\n        <Text color=\"error\" size=\"xl\" strong>\r\n          On-chain rejection created\r\n        </Text>\r\n      </div>\r\n    </OwnerListItem>\r\n  ) : (\r\n    <OwnerListItem>\r\n      <span className=\"icon\">\r\n        <Icon size=\"sm\" type=\"add\" color=\"primary\" />\r\n      </span>\r\n      <div className=\"legend\">\r\n        <Text color=\"primary\" size=\"xl\" strong>\r\n          Created\r\n        </Text>\r\n      </div>\r\n    </OwnerListItem>\r\n  )\r\n\r\n  return (\r\n    <OwnerList>\r\n      {CreationNode}\r\n      {detailedExecutionInfo.confirmations.map(({ signer }) => (\r\n        <OwnerListItem key={signer.value}>\r\n          <span className=\"icon\">\r\n            <Icon size=\"sm\" type=\"circleCheck\" color=\"primary\" />\r\n          </span>\r\n          <div className=\"legend\">\r\n            <Text color=\"primary\" size=\"xl\" strong>\r\n              Confirmed\r\n            </Text>\r\n            <AddressInfo\r\n              address={signer.value}\r\n              name={signer?.name || undefined}\r\n              avatarUrl={signer?.logoUri || undefined}\r\n              shortenHash={4}\r\n            />\r\n          </div>\r\n        </OwnerListItem>\r\n      ))}\r\n      {isPending || confirmationsNeeded <= 0 ? (\r\n        <OwnerListItem>\r\n          <span className=\"icon\">\r\n            {detailedExecutionInfo.executor ? (\r\n              <Icon type=\"circleCheck\" size=\"sm\" color=\"primary\" />\r\n            ) : (\r\n              <StyledImg alt=\"\" src={TransactionListActive} />\r\n            )}\r\n          </span>\r\n          <div className=\"legend\">\r\n            <Text color=\"primary\" size=\"xl\" strong>\r\n              {detailedExecutionInfo.executor ? 'Executed' : isPending ? 'Executing' : 'Execute'}\r\n            </Text>\r\n            {detailedExecutionInfo.executor && (\r\n              <AddressInfo\r\n                address={detailedExecutionInfo.executor.value}\r\n                name={detailedExecutionInfo.executor?.name || undefined}\r\n                avatarUrl={detailedExecutionInfo.executor?.logoUri || undefined}\r\n                shortenHash={4}\r\n              />\r\n            )}\r\n          </div>\r\n        </OwnerListItem>\r\n      ) : (\r\n        <OwnerListItem>\r\n          <span className=\"icon\">\r\n            <StyledImg alt=\"\" src={TransactionListInactive} />\r\n          </span>\r\n          <div className=\"legend\">\r\n            <Text color=\"icon\" size=\"xl\" strong>\r\n              Execute ({confirmationsNeeded} more {confirmationsNeeded === 1 ? 'confirmation' : 'confirmations'} needed)\r\n            </Text>\r\n          </div>\r\n        </OwnerListItem>\r\n      )}\r\n    </OwnerList>\r\n  )\r\n}\r\n","import { CopyToClipboardBtn } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\nimport { generatePath } from 'react-router-dom'\r\n\r\nimport { getPrefixedSafeAddressSlug, SAFE_ADDRESS_SLUG, SAFE_ROUTES, TRANSACTION_ID_SLUG } from 'src/routes/routes'\r\nimport { PUBLIC_URL } from 'src/utils/constants'\r\n\r\ntype Props = {\r\n  safeTxHash: string\r\n}\r\n\r\nconst TxShareButton = ({ safeTxHash }: Props): ReactElement => {\r\n  const txDetailsPathname = generatePath(SAFE_ROUTES.TRANSACTIONS_SINGULAR, {\r\n    [SAFE_ADDRESS_SLUG]: getPrefixedSafeAddressSlug(),\r\n    [TRANSACTION_ID_SLUG]: safeTxHash,\r\n  })\r\n  const txDetailsLink = `${window.location.origin}${PUBLIC_URL}${txDetailsPathname}`\r\n\r\n  return <CopyToClipboardBtn textToCopy={txDetailsLink} iconType=\"share\" />\r\n}\r\n\r\nexport default TxShareButton\r\n","import { ReactElement } from 'react'\r\nimport { MultiSend } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { InfoDetails } from './InfoDetails'\r\n\r\n// Does not use AddressInfo as to not allow address book data display\r\n// as we use backend data to verify the deligate call\r\nconst TxInfoMultiSend = ({ txInfo }: { txInfo: MultiSend }): ReactElement => {\r\n  const hash = txInfo?.to.value\r\n  const name = txInfo.to?.name || undefined\r\n  const customAvatar = txInfo.to?.logoUri || undefined\r\n  return (\r\n    <InfoDetails title=\"MultiSend contract:\">\r\n      <PrefixedEthHashInfo\r\n        hash={hash}\r\n        name={name}\r\n        customAvatar={customAvatar}\r\n        showAvatar\r\n        showCopyBtn\r\n        explorerUrl={getExplorerInfo(hash)}\r\n      />\r\n    </InfoDetails>\r\n  )\r\n}\r\n\r\nexport default TxInfoMultiSend\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { formatDateTime } from 'src/utils/date'\r\nimport {\r\n  ExpandedTxDetails,\r\n  isCustomTxInfo,\r\n  isMultiSendTxInfo,\r\n  isMultiSigExecutionDetails,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { InlineEthHashInfo } from './styled'\r\nimport { NOT_AVAILABLE } from './utils'\r\nimport TxShareButton from './TxShareButton'\r\nimport TxInfoMultiSend from './TxInfoMultiSend'\r\nimport DelegateCallWarning from './DelegateCallWarning'\r\n\r\ntype Props = { txDetails: ExpandedTxDetails }\r\n\r\nexport const TxSummary = ({ txDetails }: Props): ReactElement => {\r\n  const { txHash, detailedExecutionInfo, executedAt, txData, txInfo } = txDetails\r\n  const explorerUrl = txHash ? getExplorerInfo(txHash) : undefined\r\n  const nonce = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.nonce : undefined\r\n  const created = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.submittedAt : undefined\r\n  const safeTxHash = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.safeTxHash : undefined\r\n\r\n  return (\r\n    <>\r\n      {isMultiSigExecutionDetails(txDetails.detailedExecutionInfo) && (\r\n        <div className=\"tx-share\">\r\n          <TxShareButton safeTxHash={txDetails.detailedExecutionInfo.safeTxHash} />\r\n        </div>\r\n      )}\r\n      <div className=\"tx-hash\">\r\n        <Text size=\"xl\" strong as=\"span\">\r\n          Transaction hash:{' '}\r\n        </Text>\r\n        {txHash ? (\r\n          <InlineEthHashInfo textSize=\"xl\" hash={txHash} shortenHash={8} showCopyBtn explorerUrl={explorerUrl} />\r\n        ) : (\r\n          <Text size=\"xl\" as=\"span\">\r\n            {NOT_AVAILABLE}\r\n          </Text>\r\n        )}\r\n      </div>\r\n      {safeTxHash !== undefined && (\r\n        <div className=\"tx-hash\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            SafeTxHash:{' '}\r\n          </Text>\r\n          <InlineEthHashInfo textSize=\"xl\" hash={safeTxHash} shortenHash={8} showCopyBtn />\r\n        </div>\r\n      )}\r\n      {nonce !== undefined && (\r\n        <div className=\"tx-nonce\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Nonce:{' '}\r\n          </Text>\r\n          <Text size=\"xl\" as=\"span\">\r\n            {nonce}\r\n          </Text>\r\n        </div>\r\n      )}\r\n      {created && (\r\n        <div className=\"tx-created\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Created:{' '}\r\n          </Text>\r\n          <Text size=\"xl\" as=\"span\">\r\n            {formatDateTime(created)}\r\n          </Text>\r\n        </div>\r\n      )}\r\n      <div className=\"tx-executed\">\r\n        <Text size=\"xl\" strong as=\"span\">\r\n          Executed:{' '}\r\n        </Text>\r\n        <Text size=\"xl\" as=\"span\">\r\n          {executedAt ? formatDateTime(executedAt) : NOT_AVAILABLE}\r\n        </Text>\r\n      </div>\r\n      {txData?.operation === Operation.DELEGATE && (\r\n        <div className=\"tx-operation\">\r\n          <DelegateCallWarning isKnown={isCustomTxInfo(txInfo) && !!txInfo?.to?.name} />\r\n        </div>\r\n      )}\r\n      {isMultiSendTxInfo(txInfo) && <TxInfoMultiSend txInfo={txInfo} />}\r\n    </>\r\n  )\r\n}\r\n","import { ReactElement } from 'react'\r\nimport { ModuleExecutionDetails } from '@gnosis.pm/safe-react-gateway-sdk'\r\n\r\nimport { AddressInfo } from './AddressInfo'\r\nimport { InfoDetails } from './InfoDetails'\r\n\r\nconst TxModuleInfo = ({ detailedExecutionInfo }: { detailedExecutionInfo: ModuleExecutionDetails }): ReactElement => {\r\n  const { value, name, logoUri } = detailedExecutionInfo.address\r\n\r\n  return (\r\n    <InfoDetails title=\"Module:\">\r\n      <AddressInfo address={value} name={name || undefined} avatarUrl={logoUri || undefined} />\r\n    </InfoDetails>\r\n  )\r\n}\r\n\r\nexport default TxModuleInfo\r\n","import { Icon, Link, Loader, Text } from '@gnosis.pm/safe-react-components'\r\nimport cn from 'classnames'\r\nimport { ReactElement, useContext } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport {\r\n  ExpandedTxDetails,\r\n  isModuleExecutionInfo,\r\n  isMultiSendTxInfo,\r\n  isMultiSigExecutionDetails,\r\n  isSettingsChangeTxInfo,\r\n  isTransferTxInfo,\r\n  LocalTransactionStatus,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useTransactionDetails } from './hooks/useTransactionDetails'\r\nimport { TxDetailsContainer, Centered, AlignItemsWithMargin } from './styled'\r\nimport { TxData } from './TxData'\r\nimport { TxExpandedActions } from './TxExpandedActions'\r\nimport { TxInfo } from './TxInfo'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { TxOwners } from './TxOwners'\r\nimport { TxSummary } from './TxSummary'\r\nimport { isCancelTxDetails, NOT_AVAILABLE } from './utils'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\nimport { useSelector } from 'react-redux'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport TxModuleInfo from './TxModuleInfo'\r\n\r\nconst NormalBreakingText = styled(Text)`\r\n  line-break: normal;\r\n  word-break: normal;\r\n`\r\n\r\nconst TxDataGroup = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\r\n  if (isTransferTxInfo(txDetails.txInfo) || isSettingsChangeTxInfo(txDetails.txInfo)) {\r\n    return <TxInfo txInfo={txDetails.txInfo} />\r\n  }\r\n\r\n  if (isCancelTxDetails(txDetails.txInfo) && isMultiSigExecutionDetails(txDetails.detailedExecutionInfo)) {\r\n    const txNonce = `${txDetails.detailedExecutionInfo.nonce ?? NOT_AVAILABLE}`\r\n    const isTxExecuted = txDetails.executedAt\r\n\r\n    // executed rejection transaction\r\n    let message = `This is an on-chain rejection that didn't send any funds.\r\n     This on-chain rejection replaced all transactions with nonce ${txNonce}.`\r\n\r\n    if (!isTxExecuted) {\r\n      // queued rejection transaction\r\n      message = `This is an on-chain rejection that doesn't send any funds.\r\n Executing this on-chain rejection will replace all currently awaiting transactions with nonce ${txNonce}.`\r\n    }\r\n    return (\r\n      <>\r\n        <NormalBreakingText size=\"xl\">{message}</NormalBreakingText>\r\n        {!isTxExecuted && (\r\n          <>\r\n            <br />\r\n            <Link\r\n              href=\"https://help.gnosis-safe.io/en/articles/4738501-why-do-i-need-to-pay-for-cancelling-a-transaction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title=\"Why do I need to pay for rejecting a transaction?\"\r\n            >\r\n              <AlignItemsWithMargin>\r\n                <Text size=\"xl\" as=\"span\" color=\"primary\">\r\n                  Why do I need to pay for rejecting a transaction?\r\n                </Text>\r\n                <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n              </AlignItemsWithMargin>\r\n            </Link>\r\n          </>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  if (!txDetails.txData) {\r\n    return null\r\n  }\r\n\r\n  return <TxData txData={txDetails.txData} txInfo={txDetails.txInfo} />\r\n}\r\n\r\ntype TxDetailsProps = {\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxDetails = ({ transaction }: TxDetailsProps): ReactElement => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const { data, loading } = useTransactionDetails(transaction.id)\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const willBeReplaced = txStatus === LocalTransactionStatus.WILL_BE_REPLACED\r\n  const isPending = txStatus === LocalTransactionStatus.PENDING\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const hasModule = transaction.txDetails && isModuleExecutionInfo(transaction.txDetails.detailedExecutionInfo)\r\n  const isMultiSend = data && isMultiSendTxInfo(data.txInfo)\r\n\r\n  // To avoid prop drilling into TxDataGroup, module details are positioned here accordingly\r\n  const getModuleDetails = () => {\r\n    if (!transaction.txDetails || !isModuleExecutionInfo(transaction.txDetails.detailedExecutionInfo)) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div className=\"tx-module\">\r\n        <TxModuleInfo detailedExecutionInfo={transaction.txDetails?.detailedExecutionInfo} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Centered padding={10}>\r\n        <Loader size=\"sm\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  if (!data) {\r\n    return (\r\n      <TxDetailsContainer>\r\n        <Text size=\"xl\" strong>\r\n          No data available\r\n        </Text>\r\n      </TxDetailsContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TxDetailsContainer ownerRows={hasModule ? 3 : 2}>\r\n      <div className={cn('tx-summary', { 'will-be-replaced': willBeReplaced })}>\r\n        <TxSummary txDetails={data} />\r\n      </div>\r\n      {isMultiSend && getModuleDetails()}\r\n      <div\r\n        className={cn('tx-details', {\r\n          'no-padding': isMultiSend,\r\n          'not-executed': !data.executedAt,\r\n          'will-be-replaced': willBeReplaced,\r\n        })}\r\n      >\r\n        <TxDataGroup txDetails={data} />\r\n      </div>\r\n      {!isMultiSend && getModuleDetails()}\r\n      <div\r\n        className={cn('tx-owners', {\r\n          'will-be-replaced': willBeReplaced,\r\n        })}\r\n      >\r\n        <TxOwners txDetails={data} isPending={isPending} />\r\n      </div>\r\n      {!isPending && !data.executedAt && txLocation !== 'history' && !!currentUser && (\r\n        <div className={cn('tx-details-actions', { 'will-be-replaced': willBeReplaced })}>\r\n          <TxExpandedActions transaction={transaction} />\r\n        </div>\r\n      )}\r\n    </TxDetailsContainer>\r\n  )\r\n}\r\n","import { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { ExpandedTxDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\r\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { AppReduxState } from 'src/store'\r\n\r\nexport type LoadTransactionDetails = {\r\n  data?: ExpandedTxDetails\r\n  loading: boolean\r\n}\r\n\r\nexport const useTransactionDetails = (transactionId: string): LoadTransactionDetails => {\r\n  const dispatch = useRef(useDispatch())\r\n  const [txDetails, setTxDetails] = useState<LoadTransactionDetails>({\r\n    loading: true,\r\n    data: undefined,\r\n  })\r\n  const data = useSelector((state: AppReduxState) =>\r\n    getTransactionByAttribute(state, { attributeValue: transactionId, attributeName: 'id' }),\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (data?.txDetails) {\r\n      setTxDetails({ loading: false, data: data?.txDetails })\r\n    } else {\r\n      // lookup tx details\r\n      dispatch.current(fetchTransactionDetails({ transactionId }))\r\n    }\r\n  }, [data?.txDetails, transactionId])\r\n\r\n  return txDetails\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { formatDateTime } from 'src/utils/date'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { NOT_AVAILABLE } from './utils'\r\nimport { InlineEthHashInfo, TxDetailsContainer } from './styled'\r\nimport { Creation } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useKnownAddress } from './hooks/useKnownAddress'\r\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\r\n\r\nexport const TxInfoCreation = ({ transaction }: { transaction: Transaction }): ReactElement => {\r\n  const txInfo = transaction.txInfo as Creation\r\n  const timestamp = transaction.timestamp\r\n\r\n  const creator = useKnownAddress(txInfo.creator)\r\n  const factory = useKnownAddress(txInfo.factory)\r\n  const implementation = useKnownAddress(txInfo.implementation)\r\n\r\n  return (\r\n    <TxDetailsContainer>\r\n      <div className=\"tx-summary\">\r\n        <div className=\"tx-hash\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Transaction hash:{' '}\r\n          </Text>\r\n          <InlineEthHashInfo\r\n            textSize=\"xl\"\r\n            hash={txInfo.transactionHash}\r\n            shortenHash={8}\r\n            showCopyBtn\r\n            explorerUrl={getExplorerInfo(txInfo.transactionHash)}\r\n          />\r\n        </div>\r\n        <div className=\"tx-created\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Created:{' '}\r\n          </Text>\r\n          <Text size=\"xl\" as=\"span\">\r\n            {formatDateTime(timestamp)}\r\n          </Text>\r\n        </div>\r\n      </div>\r\n      <div className=\"tx-details\">\r\n        <div className=\"tx-creator\">\r\n          <Text size=\"xl\" strong>\r\n            Creator:{' '}\r\n          </Text>\r\n          <PrefixedEthHashInfo\r\n            textSize=\"xl\"\r\n            hash={txInfo.creator.value}\r\n            showCopyBtn\r\n            explorerUrl={getExplorerInfo(txInfo.creator.value)}\r\n            name={creator.name || undefined}\r\n            customAvatar={creator.logoUri || undefined}\r\n            showAvatar\r\n          />\r\n        </div>\r\n        <div className=\"tx-factory\">\r\n          <Text size=\"xl\" strong>\r\n            Factory:{' '}\r\n          </Text>\r\n          {txInfo.factory ? (\r\n            <PrefixedEthHashInfo\r\n              textSize=\"xl\"\r\n              hash={txInfo.factory.value}\r\n              showCopyBtn\r\n              explorerUrl={getExplorerInfo(txInfo.factory.value)}\r\n              name={factory?.name || undefined}\r\n              customAvatar={factory?.logoUri || undefined}\r\n              showAvatar\r\n            />\r\n          ) : (\r\n            <Text size=\"xl\" as=\"span\">\r\n              {NOT_AVAILABLE}\r\n            </Text>\r\n          )}\r\n        </div>\r\n        <div className=\"tx-mastercopy\">\r\n          <Text size=\"xl\" strong>\r\n            Mastercopy:{' '}\r\n          </Text>\r\n          {txInfo.implementation ? (\r\n            <PrefixedEthHashInfo\r\n              textSize=\"xl\"\r\n              hash={txInfo.implementation.value}\r\n              showCopyBtn\r\n              explorerUrl={getExplorerInfo(txInfo.implementation.value)}\r\n              name={implementation?.name || undefined}\r\n              customAvatar={implementation?.logoUri || undefined}\r\n              showAvatar\r\n            />\r\n          ) : (\r\n            <Text size=\"xl\" as=\"span\">\r\n              {NOT_AVAILABLE}\r\n            </Text>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"tx-owners\" />\r\n    </TxDetailsContainer>\r\n  )\r\n}\r\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { isCreationTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\r\nimport { TxHistoryCollapsed } from './TxHistoryCollapsed'\r\nimport { TxDetails } from './TxDetails'\r\nimport { TxInfoCreation } from './TxInfoCreation'\r\n\r\nexport const TxHistoryRow = ({ transaction }: { transaction: Transaction }): ReactElement => (\r\n  <NoPaddingAccordion\r\n    TransitionProps={{\r\n      mountOnEnter: false,\r\n      unmountOnExit: true,\r\n      appear: true,\r\n    }}\r\n  >\r\n    <StyledAccordionSummary>\r\n      <TxHistoryCollapsed transaction={transaction} />\r\n    </StyledAccordionSummary>\r\n    <AccordionDetails>\r\n      {isCreationTxInfo(transaction.txInfo) ? (\r\n        <TxInfoCreation transaction={transaction} />\r\n      ) : (\r\n        <TxDetails transaction={transaction} />\r\n      )}\r\n    </AccordionDetails>\r\n  </NoPaddingAccordion>\r\n)\r\n","import { ReactElement, useContext } from 'react'\r\n\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TxsInfiniteScrollContext } from 'src/routes/safe/components/Transactions/TxList/TxsInfiniteScroll'\r\nimport { formatWithSchema } from 'src/utils/date'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { StyledTransactions, StyledTransactionsGroup, SubTitle } from './styled'\r\nimport { TxHistoryRow } from './TxHistoryRow'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\n\r\nexport const HistoryTxList = ({ transactions }: { transactions: TransactionDetails['transactions'] }): ReactElement => {\r\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\r\n\r\n  const [, lastTransactionsGroup] = transactions[transactions.length - 1]\r\n  const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\r\n\r\n  if (!sameString(lastItemId, lastTransaction.id)) {\r\n    setLastItemId(lastTransaction.id)\r\n  }\r\n\r\n  return (\r\n    <TxLocationContext.Provider value={{ txLocation: 'history' }}>\r\n      {transactions?.map(([timestamp, txs]) => (\r\n        <StyledTransactionsGroup key={timestamp}>\r\n          <SubTitle size=\"lg\">{formatWithSchema(Number(timestamp), 'MMM d, yyyy')}</SubTitle>\r\n          <StyledTransactions>\r\n            {txs.map((transaction) => (\r\n              <TxHistoryRow key={transaction.id} transaction={transaction} />\r\n            ))}\r\n          </StyledTransactions>\r\n        </StyledTransactionsGroup>\r\n      ))}\r\n    </TxLocationContext.Provider>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/no-transactions.34ad3291.svg\";","import { Loader, Title } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\n\r\nimport { usePagedHistoryTransactions } from './hooks/usePagedHistoryTransactions'\r\nimport { Centered, NoTransactions } from './styled'\r\nimport { HistoryTxList } from './HistoryTxList'\r\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\r\nimport Img from 'src/components/layout/Img'\r\nimport NoTransactionsImage from './assets/no-transactions.svg'\r\n\r\nexport const HistoryTransactions = (): ReactElement => {\r\n  const { count, hasMore, next, transactions, isLoading } = usePagedHistoryTransactions()\r\n\r\n  if (count === 0 && isLoading) {\r\n    return (\r\n      <Centered>\r\n        <Loader size=\"md\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  if (count === 0 || !transactions.length) {\r\n    return (\r\n      <NoTransactions>\r\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\r\n        <Title size=\"xs\">History transactions will appear here </Title>\r\n      </NoTransactions>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\r\n      <HistoryTxList transactions={transactions} />\r\n    </TxsInfiniteScroll>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadPagedQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\r\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { QueueTransactionsInfo, useQueueTransactions } from './useQueueTransactions'\r\nimport { Errors } from 'src/logic/exceptions/CodedException'\r\nimport { Await } from 'src/types/helpers'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\n\r\ntype PagedQueuedTransactions = {\r\n  count: number\r\n  isLoading: boolean\r\n  transactions?: QueueTransactionsInfo\r\n  hasMore: boolean\r\n  next: () => Promise<void>\r\n}\r\n\r\nexport const usePagedQueuedTransactions = (): PagedQueuedTransactions => {\r\n  const transactions = useQueueTransactions()\r\n  const chainId = useSelector(currentChainId)\r\n\r\n  const dispatch = useDispatch()\r\n  const safeAddress = extractSafeAddress()\r\n  const [hasMore, setHasMore] = useState(true)\r\n\r\n  const nextPage = async () => {\r\n    let results: Await<ReturnType<typeof loadPagedQueuedTransactions>>\r\n    try {\r\n      results = await loadPagedQueuedTransactions(safeAddress)\r\n    } catch (e) {\r\n      // No next page\r\n      if (e.content !== Errors._608) {\r\n        e.log()\r\n      }\r\n    }\r\n\r\n    if (!results) {\r\n      setHasMore(false)\r\n      return\r\n    }\r\n\r\n    const { values, next } = results\r\n\r\n    if (next === null) {\r\n      setHasMore(false)\r\n    }\r\n\r\n    if (values) {\r\n      dispatch(addQueuedTransactions({ chainId, safeAddress, values }))\r\n    } else {\r\n      setHasMore(false)\r\n    }\r\n  }\r\n\r\n  let count\r\n  if (transactions) {\r\n    count = transactions.next.count + transactions.queue.count\r\n  }\r\n\r\n  const isLoading = typeof transactions === 'undefined' || typeof count === 'undefined'\r\n\r\n  return { count, isLoading, transactions, hasMore, next: nextPage }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { _getChainId } from 'src/config'\r\nimport { loadQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\r\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\r\n\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { nextTransactions, queuedTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\n\r\nexport type QueueTransactionsInfo = {\r\n  next: TransactionDetails\r\n  queue: TransactionDetails\r\n}\r\n\r\n/**\r\n * Get transactions (next and queue) from nextTransactions and queuedTransactions selectors\r\n */\r\nexport const useQueueTransactions = (): QueueTransactionsInfo | undefined => {\r\n  const nextTxs = useSelector(nextTransactions)\r\n  const queuedTxs = useSelector(queuedTransactions)\r\n  const dispatch = useDispatch()\r\n  const [txsCount, setTxsCount] = useState<{ next: number; queued: number } | undefined>()\r\n\r\n  useEffect(() => {\r\n    const next = nextTxs\r\n      ? Object.entries(nextTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\r\n      : 0\r\n    const queued = queuedTxs\r\n      ? Object.entries(queuedTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\r\n      : 0\r\n\r\n    // If 'queued.queued' deeplinked tx was open then queue visited before next poll\r\n    const hasDeeplinkLoaded = next === 0 && queued === 1\r\n    if (hasDeeplinkLoaded) {\r\n      const getQueuedTxs = async () => {\r\n        const safeAddress = extractSafeAddress()\r\n        const values = await loadQueuedTransactions(safeAddress)\r\n        dispatch(addQueuedTransactions({ chainId: _getChainId(), safeAddress, values }))\r\n      }\r\n      getQueuedTxs()\r\n    }\r\n\r\n    setTxsCount({ next, queued })\r\n  }, [dispatch, nextTxs, queuedTxs])\r\n\r\n  // no data loaded to the store yet\r\n  if ((!nextTxs && !queuedTxs) || typeof txsCount === 'undefined') {\r\n    return\r\n  }\r\n\r\n  return {\r\n    next: {\r\n      count: txsCount.next,\r\n      transactions: nextTxs ? Object.entries(nextTxs) : [],\r\n    },\r\n    queue: {\r\n      count: txsCount.queued,\r\n      transactions: queuedTxs ? Object.entries(queuedTxs) : [],\r\n    },\r\n  }\r\n}\r\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { ReactElement } from 'react'\r\nimport useLocalTxStatus from 'src/logic/hooks/useLocalTxStatus'\r\n\r\nimport { LocalTransactionStatus, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useAssetInfo } from './hooks/useAssetInfo'\r\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\r\nimport { useTransactionType } from './hooks/useTransactionType'\r\nimport { TxCollapsed } from './TxCollapsed'\r\n\r\nexport type CalculatedVotes = { votes: string; submitted: number; required: number }\r\n\r\nconst calculateVotes = (executionInfo: MultisigExecutionInfo, isPending: boolean): CalculatedVotes | undefined => {\r\n  if (!executionInfo) return\r\n\r\n  const submitted = executionInfo.confirmationsSubmitted\r\n  const required = executionInfo.confirmationsRequired\r\n\r\n  if (isPending && submitted < required) return\r\n\r\n  return {\r\n    votes: `${submitted} out of ${required}`,\r\n    submitted,\r\n    required,\r\n  }\r\n}\r\n\r\ntype TxQueuedCollapsedProps = {\r\n  isGrouped?: boolean\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxQueueCollapsed = ({ isGrouped = false, transaction }: TxQueuedCollapsedProps): ReactElement => {\r\n  const executionInfo = transaction.executionInfo as MultisigExecutionInfo\r\n  const nonce = executionInfo?.nonce\r\n  const type = useTransactionType(transaction)\r\n  const info = useAssetInfo(transaction.txInfo)\r\n  const status = useTransactionStatus(transaction)\r\n  const txStatus = useLocalTxStatus(transaction)\r\n  const isPending = txStatus === LocalTransactionStatus.PENDING\r\n  const votes = calculateVotes(executionInfo, isPending)\r\n\r\n  return (\r\n    <TxCollapsed\r\n      transaction={transaction}\r\n      isGrouped={isGrouped}\r\n      nonce={nonce}\r\n      type={type}\r\n      info={info}\r\n      time={transaction.timestamp}\r\n      votes={votes}\r\n      status={status}\r\n    />\r\n  )\r\n}\r\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement, useContext, useEffect, useState } from 'react'\r\n\r\nimport { LocalTransactionStatus, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\r\nimport { TxDetails } from './TxDetails'\r\nimport { TxHoverContext } from './TxHoverProvider'\r\nimport { TxQueueCollapsed } from './TxQueueCollapsed'\r\n\r\ntype TxQueueRowProps = {\r\n  isGrouped?: boolean\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxQueueRow = ({ isGrouped = false, transaction }: TxQueueRowProps): ReactElement => {\r\n  const { activeHover } = useContext(TxHoverContext)\r\n  const [tx, setTx] = useState<Transaction>(transaction)\r\n\r\n  useEffect(() => {\r\n    if (activeHover && activeHover !== transaction.id) {\r\n      setTx((currTx) => ({ ...currTx, txStatus: LocalTransactionStatus.WILL_BE_REPLACED }))\r\n      return\r\n    }\r\n\r\n    setTx(transaction)\r\n  }, [activeHover, transaction])\r\n\r\n  return (\r\n    <NoPaddingAccordion\r\n      TransitionProps={{\r\n        mountOnEnter: false,\r\n        unmountOnExit: true,\r\n        appear: true,\r\n      }}\r\n    >\r\n      <StyledAccordionSummary>\r\n        <TxQueueCollapsed isGrouped={isGrouped} transaction={tx} />\r\n      </StyledAccordionSummary>\r\n      <AccordionDetails>\r\n        <TxDetails transaction={tx} />\r\n      </AccordionDetails>\r\n    </NoPaddingAccordion>\r\n  )\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\nimport { lg, md, sm } from 'src/theme/variables'\r\n\r\nexport const useStyles = makeStyles(\r\n  createStyles({\r\n    container: {\r\n      padding: `${md} ${lg}`,\r\n    },\r\n    nonceNumber: {\r\n      marginTop: sm,\r\n      fontSize: md,\r\n    },\r\n  }),\r\n)\r\n","import { Record } from 'immutable'\r\nimport { ConfirmationProps } from './types/confirmation'\r\n\r\nexport const makeConfirmation = Record<ConfirmationProps>({\r\n  owner: '',\r\n  type: 'initialised',\r\n  hash: '',\r\n  signature: null,\r\n})\r\n","import { List } from 'immutable'\r\nimport {\r\n  Erc20Transfer,\r\n  Erc721Transfer,\r\n  MultisigExecutionInfo,\r\n  Operation,\r\n  TokenType,\r\n} from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { useMemo, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { useStyles } from './style'\r\n\r\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\nimport Block from 'src/components/layout/Block'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { processTransaction } from 'src/logic/safe/store/actions/processTransaction'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { isThresholdReached } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\r\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\r\nimport { Overwrite } from 'src/types/helpers'\r\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { makeConfirmation } from 'src/logic/safe/store/models/confirmation'\r\nimport { NOTIFICATIONS } from 'src/logic/notifications'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\nimport { ExpandedTxDetails, isMultiSigExecutionDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\nimport ExecuteCheckbox from 'src/components/ExecuteCheckbox'\r\n\r\nexport const APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID = 'approve-tx-modal-submit-btn'\r\nexport const REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID = 'reject-tx-modal-submit-btn'\r\n\r\nconst getModalTitleAndDescription = (\r\n  thresholdReached: boolean,\r\n  isCancelTx: boolean,\r\n): { title: string; description: string } => {\r\n  const modalInfo = {\r\n    title: 'Execute transaction rejection',\r\n    description: 'This action will execute this transaction.',\r\n  }\r\n\r\n  if (isCancelTx) {\r\n    return modalInfo\r\n  }\r\n\r\n  if (thresholdReached) {\r\n    modalInfo.title = 'Execute transaction'\r\n    modalInfo.description = 'This action will execute this transaction.'\r\n  } else {\r\n    modalInfo.title = 'Approve Transaction'\r\n    modalInfo.description =\r\n      'This action will approve this transaction. A separate Transaction will be performed to submit the approval.'\r\n  }\r\n\r\n  return modalInfo\r\n}\r\n\r\nconst useTxInfo = (transaction: Props['transaction']) => {\r\n  const t = useRef(transaction)\r\n  const safeAddress = extractSafeAddress()\r\n\r\n  const confirmations = useMemo(\r\n    () =>\r\n      t.current.txDetails.detailedExecutionInfo && isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? List(\r\n            t.current.txDetails.detailedExecutionInfo.confirmations.map(({ signer, signature }) =>\r\n              makeConfirmation({ owner: signer.value, signature }),\r\n            ),\r\n          )\r\n        : List([]),\r\n    [],\r\n  )\r\n\r\n  const data = useMemo(() => t.current.txDetails.txData?.hexData ?? EMPTY_DATA, [])\r\n\r\n  const baseGas = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.baseGas\r\n        : '0',\r\n    [],\r\n  )\r\n\r\n  const gasPrice = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.gasPrice\r\n        : '0',\r\n    [],\r\n  )\r\n\r\n  const safeTxGas = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.safeTxGas\r\n        : '0',\r\n    [],\r\n  )\r\n\r\n  const gasToken = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.gasToken\r\n        : ZERO_ADDRESS,\r\n    [],\r\n  )\r\n\r\n  const nonce = useMemo(() => (t.current.executionInfo as MultisigExecutionInfo)?.nonce ?? 0, [])\r\n\r\n  const refundReceiver = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.refundReceiver.value\r\n        : ZERO_ADDRESS,\r\n    [],\r\n  )\r\n\r\n  const safeTxHash = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.safeTxHash\r\n        : EMPTY_DATA,\r\n    [],\r\n  )\r\n\r\n  const value = useMemo(() => {\r\n    switch (t.current.txInfo.type) {\r\n      case 'Transfer':\r\n        if (t.current.txInfo.transferInfo.type === TokenType.NATIVE_COIN) {\r\n          return t.current.txInfo.transferInfo.value\r\n        } else {\r\n          return t.current.txDetails.txData?.value ?? '0'\r\n        }\r\n      case 'Custom':\r\n        return t.current.txInfo.value\r\n      case 'Creation':\r\n      case 'SettingsChange':\r\n      default:\r\n        return '0'\r\n    }\r\n  }, [])\r\n\r\n  const to = useMemo(() => {\r\n    switch (t.current.txInfo.type) {\r\n      case 'Transfer':\r\n        if (t.current.txInfo.transferInfo.type === TokenType.NATIVE_COIN) {\r\n          return t.current.txInfo.recipient.value\r\n        } else {\r\n          return (t.current.txInfo.transferInfo as Erc20Transfer | Erc721Transfer).tokenAddress\r\n        }\r\n      case 'Custom':\r\n        return t.current.txInfo.to.value\r\n      case 'Creation':\r\n      case 'SettingsChange':\r\n      default:\r\n        return safeAddress\r\n    }\r\n  }, [safeAddress])\r\n\r\n  const operation = useMemo(() => t.current.txDetails.txData?.operation ?? Operation.CALL, [])\r\n\r\n  const origin = useMemo(\r\n    () =>\r\n      t.current.safeAppInfo ? JSON.stringify({ name: t.current.safeAppInfo.name, url: t.current.safeAppInfo.url }) : '',\r\n    [],\r\n  )\r\n\r\n  const id = useMemo(() => t.current.id, [])\r\n\r\n  return {\r\n    confirmations,\r\n    data,\r\n    baseGas,\r\n    gasPrice,\r\n    safeTxGas,\r\n    gasToken,\r\n    nonce,\r\n    refundReceiver,\r\n    safeTxHash,\r\n    value,\r\n    to,\r\n    operation,\r\n    origin,\r\n    id,\r\n  }\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  canExecute?: boolean\r\n  isCancelTx?: boolean\r\n  isOpen: boolean\r\n  transaction: Overwrite<Transaction, { txDetails: ExpandedTxDetails }>\r\n  txParameters: TxParameters\r\n}\r\n\r\nexport const ApproveTxModal = ({\r\n  onClose,\r\n  canExecute = false,\r\n  isCancelTx = false,\r\n  isOpen,\r\n  transaction,\r\n}: Props): React.ReactElement => {\r\n  const dispatch = useDispatch()\r\n  const userAddress = useSelector(userAccountSelector)\r\n  const classes = useStyles()\r\n  const safeAddress = extractSafeAddress()\r\n  const [approveAndExecute, setApproveAndExecute] = useState(canExecute)\r\n  const executionInfo = transaction.executionInfo as MultisigExecutionInfo\r\n  const thresholdReached = !!(transaction.executionInfo && isThresholdReached(executionInfo))\r\n  const _threshold = executionInfo?.confirmationsRequired ?? 0\r\n  const _countingCurrentConfirmation = (executionInfo?.confirmationsSubmitted ?? 0) + 1\r\n  const { description, title } = getModalTitleAndDescription(thresholdReached, isCancelTx)\r\n  const oneConfirmationLeft = !thresholdReached && _countingCurrentConfirmation === _threshold\r\n  const isTheTxReadyToBeExecuted = oneConfirmationLeft ? true : thresholdReached\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n  const {\r\n    confirmations,\r\n    data,\r\n    baseGas,\r\n    gasPrice,\r\n    safeTxGas,\r\n    gasToken,\r\n    nonce,\r\n    refundReceiver,\r\n    safeTxHash,\r\n    value,\r\n    to,\r\n    operation,\r\n    origin,\r\n    id,\r\n  } = useTxInfo(transaction)\r\n  const {\r\n    gasLimit,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n  } = useEstimateTransactionGas({\r\n    txRecipient: to,\r\n    txData: data,\r\n    txConfirmations: confirmations,\r\n    txAmount: value,\r\n    preApprovingOwner: approveAndExecute ? userAddress : undefined,\r\n    safeTxGas,\r\n    operation,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n  const doExecute = isExecution && approveAndExecute\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  const approveTx = (txParameters: TxParameters) => {\r\n    if (thresholdReached && confirmations.size < _threshold) {\r\n      dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\r\n    } else {\r\n      dispatch(\r\n        processTransaction({\r\n          safeAddress,\r\n          tx: {\r\n            id,\r\n            baseGas,\r\n            confirmations,\r\n            data,\r\n            gasPrice,\r\n            gasToken,\r\n            nonce,\r\n            operation,\r\n            origin,\r\n            refundReceiver,\r\n            safeTxGas,\r\n            safeTxHash,\r\n            to,\r\n            value,\r\n          },\r\n          userAddress,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.CONFIRMATION_TX,\r\n          approveAndExecute: canExecute && approveAndExecute && isTheTxReadyToBeExecuted,\r\n          ethParameters: txParameters,\r\n          thresholdReached,\r\n        }),\r\n      )\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  const getParametersStatus = () => {\r\n    if (canExecute || approveAndExecute) {\r\n      return 'SAFE_DISABLED'\r\n    }\r\n\r\n    return 'DISABLED'\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = gasPriceFormatted\r\n    const newGasPrice = txParameters.ethGasPrice\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description={description} handleClose={onClose} open={isOpen} title={title}>\r\n      <EditableTxParameters\r\n        isOffChainSignature={isOffChainSignature}\r\n        isExecution={doExecute}\r\n        parametersStatus={getParametersStatus()}\r\n        ethGasLimit={gasLimit}\r\n        ethGasPrice={gasPriceFormatted}\r\n        safeNonce={nonce.toString()}\r\n        safeTxGas={safeTxGas}\r\n        closeEditModalCallback={closeEditModalCallback}\r\n      >\r\n        {(txParameters, toggleEditMode) => {\r\n          return (\r\n            <>\r\n              <ModalHeader onClose={onClose} title={title} />\r\n\r\n              <Hairline />\r\n\r\n              {/* Tx info */}\r\n              <Block className={classes.container}>\r\n                <Row style={{ flexDirection: 'column' }}>\r\n                  <Paragraph>{description}</Paragraph>\r\n                  <Paragraph color=\"medium\" size=\"sm\">\r\n                    Transaction nonce:\r\n                    <br />\r\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\r\n                  </Paragraph>\r\n\r\n                  {oneConfirmationLeft && canExecute && !isCancelTx && (\r\n                    <ExecuteCheckbox onChange={setApproveAndExecute} />\r\n                  )}\r\n\r\n                  {/* Tx Parameters */}\r\n                  {(approveAndExecute || !isOffChainSignature) && (\r\n                    <TxParametersDetail\r\n                      txParameters={txParameters}\r\n                      onEdit={toggleEditMode}\r\n                      parametersStatus={getParametersStatus()}\r\n                      isTransactionCreation={isCreation}\r\n                      isTransactionExecution={doExecute}\r\n                      isOffChainSignature={isOffChainSignature}\r\n                    />\r\n                  )}\r\n                </Row>\r\n              </Block>\r\n\r\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\r\n                <ReviewInfoText\r\n                  gasCostFormatted={gasCostFormatted}\r\n                  isCreation={isCreation}\r\n                  isExecution={doExecute}\r\n                  isOffChainSignature={isOffChainSignature}\r\n                  safeNonce={txParameters.safeNonce}\r\n                  txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n                />\r\n              )}\r\n\r\n              {/* Footer */}\r\n              <GenericModal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n                <GenericModal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\r\n                  confirmButtonProps={{\r\n                    onClick: () => approveTx(txParameters),\r\n                    type: 'submit',\r\n                    status: buttonStatus,\r\n                    text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                    testId: isCancelTx ? REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID : APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID,\r\n                  }}\r\n                />\r\n              </GenericModal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </EditableTxParameters>\r\n    </Modal>\r\n  )\r\n}\r\n","import { List } from 'immutable'\r\nimport { AnyAction } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\r\nimport { getNotificationsFromTxType, NOTIFICATIONS } from 'src/logic/notifications'\r\nimport {\r\n  checkIfOffChainSignatureIsPossible,\r\n  generateSignaturesFromTxConfirmations,\r\n  getPreValidatedSignatures,\r\n} from 'src/logic/safe/safeTxSigner'\r\nimport { getApprovalTransaction, getExecutionTransaction, saveTxToHistory } from 'src/logic/safe/transactions'\r\nimport { tryOffChainSigning } from 'src/logic/safe/transactions/offchainSigner'\r\nimport * as aboutToExecuteTx from 'src/logic/safe/utils/aboutToExecuteTx'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\nimport closeSnackbarAction from 'src/logic/notifications/store/actions/closeSnackbar'\r\nimport { fetchSafe } from 'src/logic/safe/store/actions/fetchSafe'\r\nimport fetchTransactions from 'src/logic/safe/store/actions/transactions/fetchTransactions'\r\nimport { shouldExecuteTransaction } from 'src/logic/safe/store/actions/utils'\r\nimport { AppReduxState } from 'src/store'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { Dispatch, DispatchReturn } from './types'\r\nimport { PayableTx } from 'src/types/contracts/types'\r\nimport { updateTransactionStatus } from 'src/logic/safe/store/actions/updateTransactionStatus'\r\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\r\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { onboardUser } from 'src/components/ConnectButton'\r\nimport { getGasParam } from '../../transactions/gas'\r\nimport { getLastTransaction } from '../selectors/gatewayTransactions'\r\nimport { getRecommendedNonce } from '../../api/fetchSafeTxGasEstimation'\r\nimport { LocalTransactionStatus } from '../models/types/gateway.d'\r\nimport { isTxPendingError } from 'src/logic/wallets/getWeb3'\r\n\r\ninterface ProcessTransactionArgs {\r\n  approveAndExecute: boolean\r\n  notifiedTransaction: string\r\n  safeAddress: string\r\n  tx: {\r\n    id: string\r\n    confirmations: List<Confirmation>\r\n    origin: string // json.stringified url, name\r\n    to: string\r\n    value: string\r\n    data: string\r\n    operation: Operation\r\n    nonce: number\r\n    safeTxGas: string\r\n    safeTxHash: string\r\n    baseGas: string\r\n    gasPrice: string\r\n    gasToken: string\r\n    refundReceiver: string\r\n  }\r\n  userAddress: string\r\n  ethParameters?: Pick<TxParameters, 'ethNonce' | 'ethGasLimit' | 'ethGasPriceInGWei'>\r\n  thresholdReached: boolean\r\n}\r\n\r\ntype ProcessTransactionAction = ThunkAction<Promise<void | string>, AppReduxState, DispatchReturn, AnyAction>\r\n\r\nexport const processTransaction =\r\n  ({\r\n    approveAndExecute,\r\n    notifiedTransaction,\r\n    safeAddress,\r\n    tx,\r\n    userAddress,\r\n    ethParameters,\r\n    thresholdReached,\r\n  }: ProcessTransactionArgs): ProcessTransactionAction =>\r\n  async (dispatch: Dispatch, getState: () => AppReduxState): Promise<DispatchReturn> => {\r\n    const ready = await onboardUser()\r\n    if (!ready) return\r\n\r\n    const state = getState()\r\n\r\n    const { account: from, hardwareWallet, smartContractWallet } = providerSelector(state)\r\n    const chainId = currentChainId(state)\r\n    const safeVersion = currentSafeCurrentVersion(state) as string\r\n    const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\r\n\r\n    const lastTx = getLastTransaction(state)\r\n    let nonce: string\r\n    try {\r\n      nonce = (await getRecommendedNonce(safeAddress)).toString()\r\n    } catch (e) {\r\n      logError(Errors._616, e.message)\r\n      nonce = await safeInstance.methods.nonce().call()\r\n    }\r\n    const isExecution = approveAndExecute || (await shouldExecuteTransaction(safeInstance, nonce, lastTx))\r\n\r\n    const preApprovingOwner = approveAndExecute && !thresholdReached ? userAddress : undefined\r\n    let sigs = generateSignaturesFromTxConfirmations(tx.confirmations, preApprovingOwner)\r\n\r\n    if (!sigs) {\r\n      sigs = getPreValidatedSignatures(from)\r\n    }\r\n\r\n    const notificationsQueue = getNotificationsFromTxType(notifiedTransaction, tx.origin)\r\n    const beforeExecutionKey = dispatch(enqueueSnackbar(notificationsQueue.beforeExecution))\r\n\r\n    let txHash\r\n    let transaction\r\n    const txArgs = {\r\n      ...tx, // merge the previous tx with new data\r\n      safeInstance,\r\n      to: tx.to,\r\n      valueInWei: tx.value,\r\n      data: tx.data ?? EMPTY_DATA,\r\n      operation: tx.operation,\r\n      nonce: tx.nonce,\r\n      safeTxGas: tx.safeTxGas,\r\n      baseGas: tx.baseGas,\r\n      gasPrice: tx.gasPrice || '0',\r\n      gasToken: tx.gasToken,\r\n      refundReceiver: tx.refundReceiver,\r\n      sender: from,\r\n      sigs,\r\n    }\r\n\r\n    try {\r\n      if (checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)) {\r\n        const signature = await tryOffChainSigning(\r\n          tx.safeTxHash,\r\n          { ...txArgs, safeAddress },\r\n          hardwareWallet,\r\n          safeVersion,\r\n        )\r\n\r\n        if (signature) {\r\n          dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\r\n\r\n          await saveTxToHistory({ ...txArgs, signature })\r\n\r\n          dispatch(fetchTransactions(chainId, safeAddress))\r\n          return\r\n        }\r\n      }\r\n\r\n      transaction = isExecution ? getExecutionTransaction(txArgs) : getApprovalTransaction(safeInstance, tx.safeTxHash)\r\n\r\n      const sendParams: PayableTx = {\r\n        from,\r\n        value: 0,\r\n        gas: ethParameters?.ethGasLimit,\r\n        [getGasParam()]: ethParameters?.ethGasPriceInGWei,\r\n        nonce: ethParameters?.ethNonce,\r\n      }\r\n\r\n      await transaction\r\n        .send(sendParams)\r\n        .once('transactionHash', async (hash: string) => {\r\n          txHash = hash\r\n          dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\r\n\r\n          if (isExecution) {\r\n            dispatch(updateTransactionStatus({ safeTxHash: tx.safeTxHash, status: LocalTransactionStatus.PENDING }))\r\n            aboutToExecuteTx.setNonce(txArgs.nonce)\r\n          }\r\n\r\n          if (!isExecution) {\r\n            try {\r\n              await saveTxToHistory({ ...txArgs })\r\n            } catch (e) {\r\n              logError(Errors._804, e.message)\r\n            }\r\n          }\r\n        })\r\n        .then(async (receipt) => {\r\n          dispatch(fetchTransactions(chainId, safeAddress))\r\n\r\n          if (isExecution) {\r\n            dispatch(fetchSafe(safeAddress))\r\n          }\r\n\r\n          return receipt.transactionHash\r\n        })\r\n    } catch (err) {\r\n      logError(Errors._804, err.message)\r\n\r\n      dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\r\n\r\n      if (isExecution) {\r\n        dispatch(updateTransactionStatus({ safeTxHash: tx.safeTxHash, status: LocalTransactionStatus.PENDING_FAILED }))\r\n      }\r\n\r\n      const notification = isTxPendingError(err)\r\n        ? NOTIFICATIONS.TX_PENDING_MSG\r\n        : {\r\n            ...notificationsQueue.afterExecutionError,\r\n            message: `${notificationsQueue.afterExecutionError.message} - ${err.message}`,\r\n          }\r\n\r\n      dispatch(enqueueSnackbar({ key: err.code, ...notification }))\r\n    }\r\n\r\n    return txHash\r\n  }\r\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { useStyles } from './style'\r\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\nimport Block from 'src/components/layout/Block'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\r\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\r\nimport { extractSafeAddress } from 'src/routes/routes'\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  gwTransaction: Transaction\r\n}\r\n\r\nexport const RejectTxModal = ({ isOpen, onClose, gwTransaction }: Props): React.ReactElement => {\r\n  const dispatch = useDispatch()\r\n  const safeAddress = extractSafeAddress()\r\n  const classes = useStyles()\r\n\r\n  const {\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n    gasLimit,\r\n    gasPriceFormatted,\r\n  } = useEstimateTransactionGas({\r\n    txData: EMPTY_DATA,\r\n    txRecipient: safeAddress,\r\n  })\r\n\r\n  const origin = gwTransaction.safeAppInfo\r\n    ? JSON.stringify({ name: gwTransaction.safeAppInfo.name, url: gwTransaction.safeAppInfo.url })\r\n    : ''\r\n\r\n  const nonce = (gwTransaction.executionInfo as MultisigExecutionInfo)?.nonce ?? 0\r\n\r\n  const sendReplacementTransaction = (txParameters: TxParameters) => {\r\n    dispatch(\r\n      createTransaction({\r\n        safeAddress,\r\n        to: safeAddress,\r\n        valueInWei: '0',\r\n        txNonce: nonce,\r\n        origin,\r\n        safeTxGas: txParameters.safeTxGas,\r\n        ethParameters: txParameters,\r\n        notifiedTransaction: TX_NOTIFICATION_TYPES.CANCELLATION_TX,\r\n      }),\r\n    )\r\n    onClose()\r\n  }\r\n\r\n  const getParametersStatus = (): ParametersStatus => {\r\n    return 'CANCEL_TRANSACTION'\r\n  }\r\n\r\n  let confirmButtonStatus: ButtonStatus = ButtonStatus.READY\r\n  let confirmButtonText = 'Reject transaction'\r\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\r\n    confirmButtonStatus = ButtonStatus.LOADING\r\n    confirmButtonText = 'Estimating'\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Reject transaction\" handleClose={onClose} open={isOpen} title=\"Reject Transaction\">\r\n      <EditableTxParameters\r\n        isOffChainSignature={isOffChainSignature}\r\n        isExecution={isExecution}\r\n        ethGasLimit={gasLimit}\r\n        ethGasPrice={gasPriceFormatted}\r\n        safeTxGas={'0'}\r\n        safeNonce={nonce.toString()}\r\n        parametersStatus={getParametersStatus()}\r\n      >\r\n        {(txParameters, toggleEditMode) => {\r\n          return (\r\n            <>\r\n              <ModalHeader onClose={onClose} title=\"Reject transaction\" />\r\n              <Hairline />\r\n              <Block className={classes.container}>\r\n                <Row>\r\n                  <Paragraph>\r\n                    This action will reject this transaction. A separate transaction will be performed to submit the\r\n                    rejection.\r\n                  </Paragraph>\r\n                  <Paragraph color=\"medium\" size=\"sm\">\r\n                    Transaction nonce:\r\n                    <br />\r\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\r\n                  </Paragraph>\r\n                </Row>\r\n                {/* Tx Parameters */}\r\n                <TxParametersDetail\r\n                  txParameters={txParameters}\r\n                  onEdit={toggleEditMode}\r\n                  parametersStatus={getParametersStatus()}\r\n                  isTransactionCreation={isCreation}\r\n                  isTransactionExecution={isExecution}\r\n                  isOffChainSignature={isOffChainSignature}\r\n                />\r\n              </Block>\r\n\r\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\r\n                <ReviewInfoText\r\n                  gasCostFormatted={gasCostFormatted}\r\n                  isCreation={isCreation}\r\n                  isExecution={isExecution}\r\n                  isOffChainSignature={isOffChainSignature}\r\n                  safeNonce={txParameters.safeNonce}\r\n                  txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n                />\r\n              )}\r\n              <GenericModal.Footer withoutBorder={confirmButtonStatus !== ButtonStatus.LOADING}>\r\n                <GenericModal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\r\n                  confirmButtonProps={{\r\n                    onClick: () => sendReplacementTransaction(txParameters),\r\n                    color: 'error',\r\n                    type: 'submit',\r\n                    status: confirmButtonStatus,\r\n                    text: confirmButtonText,\r\n                  }}\r\n                />\r\n              </GenericModal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </EditableTxParameters>\r\n    </Modal>\r\n  )\r\n}\r\n","import { ReactElement, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { ExpandedTxDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { AppReduxState } from 'src/store'\r\nimport { ApproveTxModal } from './modals/ApproveTxModal'\r\nimport { RejectTxModal } from './modals/RejectTxModal'\r\nimport { TransactionActionStateContext } from './TxActionProvider'\r\nimport { Overwrite } from 'src/types/helpers'\r\n\r\nexport const ActionModal = (): ReactElement | null => {\r\n  const { selectedAction, selectAction } = useContext(TransactionActionStateContext)\r\n  const txParameters = useTransactionParameters()\r\n\r\n  const transaction = useSelector((state: AppReduxState) =>\r\n    getTransactionByAttribute(state, {\r\n      attributeValue: selectedAction.transactionId,\r\n      attributeName: 'id',\r\n    }),\r\n  )\r\n\r\n  const onClose = () => selectAction({ actionSelected: 'none', transactionId: '' })\r\n\r\n  if (!transaction?.txDetails) {\r\n    return null\r\n  }\r\n\r\n  switch (selectedAction.actionSelected) {\r\n    case 'cancel':\r\n      return <RejectTxModal isOpen onClose={onClose} gwTransaction={transaction} />\r\n\r\n    case 'confirm':\r\n      return (\r\n        <ApproveTxModal\r\n          isOpen\r\n          onClose={onClose}\r\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\r\n          txParameters={txParameters}\r\n        />\r\n      )\r\n\r\n    case 'execute':\r\n      return (\r\n        <ApproveTxModal\r\n          canExecute\r\n          isOpen\r\n          onClose={onClose}\r\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\r\n          txParameters={txParameters}\r\n        />\r\n      )\r\n\r\n    case 'none':\r\n      return null\r\n  }\r\n}\r\n","import { Icon, Link, Text } from '@gnosis.pm/safe-react-components'\r\nimport { Fragment, ReactElement, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Transaction, TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\r\n\r\nimport {\r\n  DisclaimerContainer,\r\n  GroupedTransactions,\r\n  GroupedTransactionsCard,\r\n  SubTitle,\r\n  StyledTransactions,\r\n  StyledTransactionsGroup,\r\n  AlignItemsWithMargin,\r\n} from './styled'\r\nimport { TxHoverProvider } from './TxHoverProvider'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { TxQueueRow } from './TxQueueRow'\r\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\r\nimport { TxActionProvider } from './TxActionProvider'\r\nimport { ActionModal } from './ActionModal'\r\n\r\nconst TreeView = ({ firstElement }: { firstElement: boolean }): ReactElement => {\r\n  return <p className=\"tree-lines\">{firstElement ? <span className=\"first-node\" /> : null}</p>\r\n}\r\n\r\nconst Disclaimer = ({ nonce }: { nonce: string }): ReactElement => {\r\n  return (\r\n    <DisclaimerContainer className=\"disclaimer-container\">\r\n      <Text size=\"xl\" className=\"nonce\">\r\n        {nonce}\r\n      </Text>\r\n      <AlignItemsWithMargin className=\"disclaimer\">\r\n        <Text as=\"span\" size=\"xl\">\r\n          These transactions conflict as they use the same nonce. Executing one will automatically replace the other(s).{' '}\r\n        </Text>\r\n        <Link\r\n          href=\"https://help.gnosis-safe.io/en/articles/4730252-why-are-transactions-with-the-same-nonce-conflicting-with-each-other\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          title=\"Why are transactions with the same nonce conflicting with each other?\"\r\n        >\r\n          <AlignItemsWithMargin>\r\n            <Text size=\"xl\" as=\"span\" color=\"primary\">\r\n              Learn more\r\n            </Text>\r\n            <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n          </AlignItemsWithMargin>\r\n        </Link>\r\n      </AlignItemsWithMargin>\r\n    </DisclaimerContainer>\r\n  )\r\n}\r\n\r\ntype QueueTransactionProps = {\r\n  nonce: string\r\n  transactions: Transaction[]\r\n}\r\n\r\nconst QueueTransaction = ({ nonce, transactions }: QueueTransactionProps): ReactElement =>\r\n  transactions.length > 1 ? (\r\n    <GroupedTransactionsCard>\r\n      <TxHoverProvider>\r\n        <Disclaimer nonce={nonce} />\r\n        <GroupedTransactions>\r\n          {transactions.map((transaction, index) => (\r\n            <Fragment key={`${nonce}-${transaction.id}`}>\r\n              <TreeView firstElement={!index} />\r\n              <TxQueueRow isGrouped transaction={transaction} />\r\n            </Fragment>\r\n          ))}\r\n        </GroupedTransactions>\r\n      </TxHoverProvider>\r\n    </GroupedTransactionsCard>\r\n  ) : (\r\n    <TxQueueRow transaction={transactions[0]} />\r\n  )\r\n\r\ntype QueueTxListProps = {\r\n  transactions: TransactionDetails['transactions']\r\n}\r\n\r\nexport const QueueTxList = ({ transactions }: QueueTxListProps): ReactElement => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const nonce = useSelector(currentSafeNonce)\r\n\r\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\r\n  if (transactions.length) {\r\n    const [, lastTransactionsGroup] = transactions[transactions.length - 1]\r\n    const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\r\n\r\n    if (txLocation === 'queued.queued' && !sameString(lastItemId, lastTransaction.id)) {\r\n      setLastItemId(lastTransaction.id)\r\n    }\r\n  }\r\n\r\n  const title =\r\n    txLocation === 'queued.next'\r\n      ? 'NEXT TRANSACTION'\r\n      : `QUEUE - Transaction with nonce ${nonce} needs to be executed first`\r\n\r\n  return (\r\n    <TxActionProvider>\r\n      <StyledTransactionsGroup>\r\n        <SubTitle size=\"lg\">{title}</SubTitle>\r\n        <StyledTransactions>\r\n          {transactions.map(([nonce, txs]) => (\r\n            <QueueTransaction key={nonce} nonce={nonce} transactions={txs} />\r\n          ))}\r\n        </StyledTransactions>\r\n      </StyledTransactionsGroup>\r\n      <ActionModal />\r\n    </TxActionProvider>\r\n  )\r\n}\r\n","import { Loader, Title } from '@gnosis.pm/safe-react-components'\r\nimport { ReactElement } from 'react'\r\n\r\nimport Img from 'src/components/layout/Img'\r\nimport NoTransactionsImage from './assets/no-transactions.svg'\r\nimport { usePagedQueuedTransactions } from './hooks/usePagedQueuedTransactions'\r\nimport { QueueTxList } from './QueueTxList'\r\nimport { Centered, NoTransactions } from './styled'\r\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\n\r\nexport const QueueTransactions = (): ReactElement => {\r\n  const { count, isLoading, hasMore, next, transactions } = usePagedQueuedTransactions()\r\n\r\n  if (count === 0 && isLoading) {\r\n    return (\r\n      <Centered>\r\n        <Loader size=\"md\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  // `loading` is, actually `!transactions`\r\n  // added the `transaction` verification to prevent `Object is possibly 'undefined'` error\r\n  if (count === 0 || !transactions) {\r\n    return (\r\n      <NoTransactions>\r\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\r\n        <Title size=\"xs\">Queue transactions will appear here </Title>\r\n      </NoTransactions>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\r\n      {/* Next list */}\r\n      <TxLocationContext.Provider value={{ txLocation: 'queued.next' }}>\r\n        {transactions.next.count !== 0 && <QueueTxList transactions={transactions.next.transactions} />}\r\n      </TxLocationContext.Provider>\r\n\r\n      {/* Queue list */}\r\n      <TxLocationContext.Provider value={{ txLocation: 'queued.queued' }}>\r\n        {transactions.queue.count !== 0 && <QueueTxList transactions={transactions.queue.transactions} />}\r\n      </TxLocationContext.Provider>\r\n    </TxsInfiniteScroll>\r\n  )\r\n}\r\n","import { ReactElement, useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Loader } from '@gnosis.pm/safe-react-components'\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\r\nimport { TransactionDetails } from '@gnosis.pm/safe-react-gateway-sdk'\r\n\r\nimport { isTxQueued, TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport {\r\n  extractPrefixedSafeAddress,\r\n  extractSafeAddress,\r\n  generateSafeRoute,\r\n  SafeRouteSlugs,\r\n  SAFE_ROUTES,\r\n  TRANSACTION_ID_SLUG,\r\n  history,\r\n} from 'src/routes/routes'\r\nimport { Centered } from './styled'\r\nimport { getTransactionWithLocationByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { AppReduxState } from 'src/store'\r\nimport { logError, Errors } from 'src/logic/exceptions/CodedException'\r\nimport { fetchSafeTransaction } from 'src/logic/safe/transactions/api/fetchSafeTransaction'\r\nimport { makeTxFromDetails } from './utils'\r\nimport {\r\n  addQueuedTransactions,\r\n  addHistoryTransactions,\r\n} from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\r\nimport { HistoryPayload, QueuedPayload } from 'src/logic/safe/store/reducer/gatewayTransactions'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { currentChainId } from 'src/logic/config/store/selectors'\r\nimport { QueueTxList } from './QueueTxList'\r\nimport { HistoryTxList } from './HistoryTxList'\r\n\r\nconst TxSingularDetails = (): ReactElement => {\r\n  const { [TRANSACTION_ID_SLUG]: safeTxHash = '' } = useParams<SafeRouteSlugs>()\r\n  const [fetchedTx, setFetchedTx] = useState<TransactionDetails>()\r\n  const [liveTx, setLiveTx] = useState<{ txLocation: TxLocation; transaction: Transaction }>()\r\n  const dispatch = useDispatch()\r\n  const chainId = useSelector(currentChainId)\r\n\r\n  // We must use the tx from the store as the queue actions alter the tx\r\n  const indexedTx = useSelector(\r\n    (state: AppReduxState) =>\r\n      fetchedTx\r\n        ? getTransactionWithLocationByAttribute(state, { attributeName: 'id', attributeValue: fetchedTx.txId })\r\n        : null,\r\n    shallowEqual,\r\n  )\r\n\r\n  // The indexedTx can be temporailiy not found when re-fetching the queue\r\n  // To avoid showing a loader, we use a locally cached version of it\r\n  useEffect(() => {\r\n    if (indexedTx != null) {\r\n      setLiveTx(indexedTx)\r\n    }\r\n  }, [indexedTx])\r\n\r\n  // When safeTxHash changes, we fetch tx details for this hash\r\n  useEffect(() => {\r\n    let isCurrent = true\r\n\r\n    setFetchedTx(undefined)\r\n\r\n    if (!safeTxHash) {\r\n      const txsRoute = generateSafeRoute(SAFE_ROUTES.TRANSACTIONS, extractPrefixedSafeAddress())\r\n      history.replace(txsRoute)\r\n      return\r\n    }\r\n\r\n    const getTransaction = async (): Promise<void> => {\r\n      // Remove the previously loaded tx (when making a new tx from the single tx route)\r\n      setLiveTx(undefined)\r\n\r\n      let txDetails: TransactionDetails\r\n      try {\r\n        txDetails = await fetchSafeTransaction(safeTxHash)\r\n      } catch (e) {\r\n        logError(Errors._614, e.message)\r\n        return\r\n      }\r\n\r\n      if (isCurrent) {\r\n        setFetchedTx(txDetails)\r\n      }\r\n    }\r\n\r\n    getTransaction()\r\n\r\n    return () => {\r\n      isCurrent = false\r\n    }\r\n  }, [safeTxHash, setFetchedTx, setLiveTx])\r\n\r\n  // Add the tx to the store\r\n  useEffect(() => {\r\n    if (!fetchedTx) return\r\n\r\n    // Format the tx details into a History or Queue-like tx item\r\n    const listItemTx = makeTxFromDetails(fetchedTx)\r\n    const payload: HistoryPayload | QueuedPayload = {\r\n      chainId,\r\n      safeAddress: extractSafeAddress(),\r\n      values: [\r\n        {\r\n          transaction: listItemTx,\r\n          type: 'TRANSACTION', // Other types are discarded in reducer\r\n          conflictType: 'None', // Not used in reducer\r\n        },\r\n      ],\r\n    }\r\n    // And add it to the corresponding list in the store\r\n    dispatch(isTxQueued(listItemTx.txStatus) ? addQueuedTransactions(payload) : addHistoryTransactions(payload))\r\n  }, [fetchedTx, chainId, dispatch])\r\n\r\n  if (!liveTx) {\r\n    return (\r\n      <Centered padding={10}>\r\n        <Loader size=\"sm\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  const { transaction, txLocation } = liveTx\r\n  const TxList = isTxQueued(transaction.txStatus) ? QueueTxList : HistoryTxList\r\n\r\n  return (\r\n    <TxLocationContext.Provider value={{ txLocation }}>\r\n      <TxList transactions={[[transaction.timestamp.toString(), [transaction]]]} />\r\n    </TxLocationContext.Provider>\r\n  )\r\n}\r\n\r\nexport default TxSingularDetails\r\n","import { Menu, Breadcrumb, BreadcrumbElement, Tab } from '@gnosis.pm/safe-react-components'\r\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab'\r\nimport { ReactElement, useEffect } from 'react'\r\nimport { Redirect, Route, Switch, useHistory, useRouteMatch } from 'react-router-dom'\r\n\r\nimport Col from 'src/components/layout/Col'\r\nimport { extractPrefixedSafeAddress, generateSafeRoute, SAFE_ROUTES } from 'src/routes/routes'\r\nimport { SAFE_EVENTS, useAnalytics } from 'src/utils/googleAnalytics'\r\nimport { HistoryTransactions } from './HistoryTransactions'\r\nimport { QueueTransactions } from './QueueTransactions'\r\nimport { ContentWrapper, Wrapper } from './styled'\r\nimport TxSingularDetails from './TxSingularDetails'\r\nimport { isDeeplinkedTx } from './utils'\r\n\r\nconst TRANSACTION_TABS: Item[] = [\r\n  { label: 'Queue', id: SAFE_ROUTES.TRANSACTIONS_QUEUE },\r\n  { label: 'History', id: SAFE_ROUTES.TRANSACTIONS_HISTORY },\r\n]\r\n\r\nconst GatewayTransactions = (): ReactElement => {\r\n  const history = useHistory()\r\n  const { path } = useRouteMatch()\r\n\r\n  const { trackEvent } = useAnalytics()\r\n\r\n  useEffect(() => {\r\n    trackEvent(SAFE_EVENTS.TRANSACTIONS)\r\n  }, [trackEvent])\r\n\r\n  const onTabChange = (path: string) => history.replace(generateSafeRoute(path, extractPrefixedSafeAddress()))\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Menu>\r\n        <Col start=\"sm\" xs={12}>\r\n          <Breadcrumb>\r\n            <BreadcrumbElement iconType=\"transactionsInactive\" text=\"TRANSACTIONS\" />\r\n            {isDeeplinkedTx() && <BreadcrumbElement text=\"DETAILS\" color=\"placeHolder\" />}\r\n          </Breadcrumb>\r\n        </Col>\r\n      </Menu>\r\n      {!isDeeplinkedTx() && <Tab onChange={onTabChange} items={TRANSACTION_TABS} selectedTab={path} />}\r\n      <ContentWrapper>\r\n        <Switch>\r\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_QUEUE} render={() => <QueueTransactions />} />\r\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_HISTORY} render={() => <HistoryTransactions />} />\r\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_SINGULAR} render={() => <TxSingularDetails />} />\r\n          <Redirect to={SAFE_ROUTES.TRANSACTIONS_HISTORY} />\r\n        </Switch>\r\n      </ContentWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default GatewayTransactions\r\n"],"sourceRoot":""}