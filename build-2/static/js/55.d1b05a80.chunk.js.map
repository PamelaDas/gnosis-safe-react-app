{"version":3,"sources":["components/layout/Bold/index.tsx","components/forms/SelectField/index.tsx","components/layout/Heading/index.tsx","components/layout/Heading/index.module.scss","routes/safe/components/Settings/ThresholdSettings/ChangeThreshold/style.ts","routes/safe/components/Settings/ThresholdSettings/ChangeThreshold/index.tsx","routes/safe/components/Settings/ThresholdSettings/style.ts","routes/safe/components/Settings/ThresholdSettings/index.tsx"],"names":["Bold","this","props","children","React","style","minWidth","SelectInput","classes","disableError","formControlProps","input","name","onChange","value","restInput","label","meta","renderValue","rest","showError","submitError","dirtySinceLastSubmit","error","touched","inputProps","htmlFor","cx","classNames","bind","styles","Heading","align","className","color","margin","tag","testId","truncate","capitalize","undefined","module","exports","useStyles","makeStyles","createStyles","modalContent","padding","md","lg","ownersText","marginLeft","sm","inputRow","position","ChangeThresholdModal","onClose","ownersCount","safeAddress","threshold","dispatch","useDispatch","safeVersion","useSelector","currentSafeCurrentVersion","useState","data","setData","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","editedThreshold","setEditedThreshold","disabledSubmitForm","setDisabledSubmitForm","useEstimateTransactionGas","txData","txRecipient","safeTxGas","gasCostFormatted","txEstimationExecutionStatus","isCreation","isExecution","isOffChainSignature","gasLimit","gasPriceFormatted","gasEstimation","useEstimationStatus","buttonStatus","useEffect","isCurrent","getGnosisSafeInstanceAt","methods","changeThreshold","encodeABI","calculateChangeThresholdData","handleThreshold","target","parseInt","handleSubmit","txParameters","createTransaction","to","valueInWei","txNonce","safeNonce","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","SETTINGS_CHANGE_TX","EditableTxParameters","ethGasLimit","ethGasPrice","closeEditModalCallback","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","ModalHeader","title","Hairline","GnoForm","initialValues","toString","onSubmit","Block","Row","Paragraph","weight","Col","xs","Field","render","SelectField","Array","Number","map","x","index","MenuItem","validate","composeValidators","required","mustBeInteger","minValue","differentFrom","noMargin","size","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","ReviewInfoText","Modal","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","onClick","confirmButtonProps","disabled","status","text","secondaryText","fontColor","container","buttonRow","left","bottom","boxSizing","width","justifyContent","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","ThresholdSettings","isModalOpen","setModalOpen","currentSafe","address","owners","granted","grantedSelector","toggleModal","prevOpen","trackEvent","useAnalytics","SETTINGS_EVENTS","OWNERS","length","Button","variant","description","handleClose","open"],"mappings":"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","file":"static/js/55.d1b05a80.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render(): React.ReactElement {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","import FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\n\r\nconst style = {\r\n  minWidth: '100%',\r\n}\r\n\r\nconst SelectInput = ({\r\n  classes,\r\n  disableError,\r\n  formControlProps,\r\n  input: { name, onChange, value, ...restInput },\r\n  label,\r\n  meta,\r\n  renderValue,\r\n  ...rest\r\n}) => {\r\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\r\n  const inputProps = {\r\n    ...restInput,\r\n    name,\r\n  }\r\n\r\n  return (\r\n    <FormControl {...formControlProps} error={showError} style={style}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Select\r\n        classes={classes}\r\n        inputProps={inputProps}\r\n        onChange={onChange}\r\n        renderValue={renderValue}\r\n        value={value}\r\n        {...rest}\r\n      />\r\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default SelectInput\r\n","import classNames from 'classnames/bind'\r\nimport * as React from 'react'\r\n\r\nimport styles from './index.module.scss'\r\n\r\nimport { capitalize } from 'src/utils/css'\r\n\r\nconst cx = classNames.bind(styles)\r\n\r\nconst Heading = (props) => {\r\n  const { align, children, className = '', color, margin, tag, testId, truncate, ...rest } = props\r\n\r\n  const classes = cx(className, 'heading', align, tag, margin ? capitalize(margin, 'margin') : undefined, color, {\r\n    truncate,\r\n  })\r\n\r\n  return React.createElement(tag, { ...rest, className: classes, 'data-testid': testId || '' }, children)\r\n}\r\n\r\nexport default Heading\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Heading_heading__ZbcQo\",\"h1\":\"Heading_h1__-wMHl\",\"h2\":\"Heading_h2__3MQ2g\",\"h3\":\"Heading_h3__2Eii5\",\"h4\":\"Heading_h4__36iJN\",\"center\":\"Heading_center__Rnu47\",\"right\":\"Heading_right__nV1Cb\",\"truncate\":\"Heading_truncate__18Axc\",\"marginSm\":\"Heading_marginSm__3RRHh\",\"marginMd\":\"Heading_marginMd__2NmMz\",\"marginLg\":\"Heading_marginLg__2n10_\",\"marginXl\":\"Heading_marginXl__39Nag\",\"soft\":\"Heading_soft__3dfbK\",\"medium\":\"Heading_medium__XLAVh\",\"dark\":\"Heading_dark__36nFk\",\"fancy\":\"Heading_fancy__2yEZW\",\"warning\":\"Heading_warning__3tDQF\",\"primary\":\"Heading_primary__mUy5R\",\"secondary\":\"Heading_secondary__2YzXF\",\"disabled\":\"Heading_disabled__3ODVW\",\"error\":\"Heading_error__39ITf\",\"white\":\"Heading_white__2fXVW\"};","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nimport { lg, md, sm } from 'src/theme/variables'\r\n\r\nexport const useStyles = makeStyles(\r\n  createStyles({\r\n    modalContent: {\r\n      padding: `${md} ${lg}`,\r\n    },\r\n    ownersText: {\r\n      marginLeft: sm,\r\n    },\r\n    inputRow: {\r\n      position: 'relative',\r\n    },\r\n  }),\r\n)\r\n","import MenuItem from '@material-ui/core/MenuItem'\r\nimport { ReactElement, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { composeValidators, differentFrom, minValue, mustBeInteger, required } from 'src/components/forms/validator'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\r\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\n\r\nimport { useStyles } from './style'\r\n\r\nconst THRESHOLD_FIELD_NAME = 'threshold'\r\n\r\ntype ChangeThresholdModalProps = {\r\n  onClose: () => void\r\n  ownersCount?: number\r\n  safeAddress: string\r\n  threshold?: number\r\n}\r\n\r\nexport const ChangeThresholdModal = ({\r\n  onClose,\r\n  ownersCount = 0,\r\n  safeAddress,\r\n  threshold = 1,\r\n}: ChangeThresholdModalProps): ReactElement => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\r\n  const [data, setData] = useState('')\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState('0')\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n  const [editedThreshold, setEditedThreshold] = useState<number>(threshold)\r\n  const [disabledSubmitForm, setDisabledSubmitForm] = useState<boolean>(true)\r\n\r\n  const {\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isCreation,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    gasLimit,\r\n    gasPriceFormatted,\r\n    gasEstimation,\r\n  } = useEstimateTransactionGas({\r\n    txData: data,\r\n    txRecipient: safeAddress,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  useEffect(() => {\r\n    let isCurrent = true\r\n    const calculateChangeThresholdData = () => {\r\n      const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\r\n      const txData = safeInstance.methods.changeThreshold(editedThreshold).encodeABI()\r\n      if (isCurrent) {\r\n        setData(txData)\r\n      }\r\n    }\r\n\r\n    calculateChangeThresholdData()\r\n    return () => {\r\n      isCurrent = false\r\n    }\r\n  }, [safeAddress, safeVersion, editedThreshold])\r\n\r\n  const handleThreshold = ({ target }) => {\r\n    const value = parseInt(target.value)\r\n    setDisabledSubmitForm(value === editedThreshold || value === threshold)\r\n    setEditedThreshold(value)\r\n  }\r\n\r\n  const handleSubmit = ({ txParameters }) => {\r\n    dispatch(\r\n      createTransaction({\r\n        safeAddress,\r\n        to: safeAddress,\r\n        valueInWei: '0',\r\n        txData: data,\r\n        txNonce: txParameters.safeNonce,\r\n        safeTxGas: txParameters.safeTxGas,\r\n        ethParameters: txParameters,\r\n        notifiedTransaction: TX_NOTIFICATION_TYPES.SETTINGS_CHANGE_TX,\r\n      }),\r\n    )\r\n    onClose()\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = gasPriceFormatted\r\n    const newGasPrice = txParameters.ethGasPrice\r\n    const oldSafeTxGas = gasEstimation\r\n    const newSafeTxGas = txParameters.safeTxGas\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={isExecution}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <ModalHeader onClose={onClose} title=\"Change threshold\" />\r\n          <Hairline />\r\n          <GnoForm initialValues={{ threshold: editedThreshold.toString(), txParameters }} onSubmit={handleSubmit}>\r\n            {() => (\r\n              <>\r\n                <Block className={classes.modalContent}>\r\n                  <Row>\r\n                    <Paragraph weight=\"bolder\">Any transaction requires the confirmation of:</Paragraph>\r\n                  </Row>\r\n                  <Row align=\"center\" className={classes.inputRow} margin=\"xl\">\r\n                    <Col xs={2}>\r\n                      <Field\r\n                        data-testid=\"threshold-select-input\"\r\n                        name={THRESHOLD_FIELD_NAME}\r\n                        onChange={handleThreshold}\r\n                        render={(props) => (\r\n                          <>\r\n                            <SelectField {...props} disableError>\r\n                              {[...Array(Number(ownersCount))].map((x, index) => (\r\n                                <MenuItem key={index} value={`${index + 1}`}>\r\n                                  {index + 1}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </SelectField>\r\n                          </>\r\n                        )}\r\n                        validate={composeValidators(required, mustBeInteger, minValue(1), differentFrom(threshold))}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={10}>\r\n                      <Paragraph className={classes.ownersText} color=\"primary\" noMargin size=\"lg\">\r\n                        {`out of ${ownersCount} owner(s)`}\r\n                      </Paragraph>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  {/* Tx Parameters */}\r\n                  <TxParametersDetail\r\n                    txParameters={txParameters}\r\n                    onEdit={toggleEditMode}\r\n                    isTransactionCreation={isCreation}\r\n                    isTransactionExecution={isExecution}\r\n                    isOffChainSignature={isOffChainSignature}\r\n                  />\r\n                </Block>\r\n                {txEstimationExecutionStatus !== EstimationStatus.LOADING && (\r\n                  <ReviewInfoText\r\n                    gasCostFormatted={gasCostFormatted}\r\n                    isCreation={isCreation}\r\n                    isExecution={isExecution}\r\n                    isOffChainSignature={isOffChainSignature}\r\n                    safeNonce={txParameters.safeNonce}\r\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n                  />\r\n                )}\r\n\r\n                <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n                  <Modal.Footer.Buttons\r\n                    cancelButtonProps={{ onClick: onClose }}\r\n                    confirmButtonProps={{\r\n                      disabled: disabledSubmitForm,\r\n                      status: buttonStatus,\r\n                      text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                    }}\r\n                  />\r\n                </Modal.Footer>\r\n              </>\r\n            )}\r\n          </GnoForm>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n","import { createStyles } from '@material-ui/core/styles'\r\nimport { border, fontColor, lg, secondaryText, smallFontSize, xl } from 'src/theme/variables'\r\n\r\nexport const styles = createStyles({\r\n  ownersText: {\r\n    color: secondaryText,\r\n    '& b': {\r\n      color: fontColor,\r\n    },\r\n  },\r\n  container: {\r\n    padding: lg,\r\n  },\r\n  buttonRow: {\r\n    padding: lg,\r\n    position: 'absolute',\r\n    left: 0,\r\n    bottom: 0,\r\n    boxSizing: 'border-box',\r\n    width: '100%',\r\n    justifyContent: 'flex-end',\r\n    borderTop: `2px solid ${border}`,\r\n  },\r\n  modifyBtn: {\r\n    height: xl,\r\n    fontSize: smallFontSize,\r\n  },\r\n})\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport Button from 'src/components/layout/Button'\r\nimport Heading from 'src/components/layout/Heading'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\nimport { currentSafe } from 'src/logic/safe/store/selectors'\r\nimport { useAnalytics, SETTINGS_EVENTS } from 'src/utils/googleAnalytics'\r\n\r\nimport { ChangeThresholdModal } from './ChangeThreshold'\r\nimport { styles } from './style'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst ThresholdSettings = (): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [isModalOpen, setModalOpen] = useState(false)\r\n  const { address: safeAddress = '', owners, threshold = 1 } = useSelector(currentSafe) ?? {}\r\n  const granted = useSelector(grantedSelector)\r\n\r\n  const toggleModal = () => {\r\n    setModalOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const { trackEvent } = useAnalytics()\r\n\r\n  useEffect(() => {\r\n    trackEvent(SETTINGS_EVENTS.OWNERS)\r\n  }, [trackEvent])\r\n\r\n  return (\r\n    <>\r\n      <Block className={classes.container}>\r\n        <Heading tag=\"h2\">Required Confirmations</Heading>\r\n        <Paragraph>Any transaction requires the confirmation of:</Paragraph>\r\n        <Paragraph className={classes.ownersText} size=\"lg\">\r\n          <Bold>{threshold}</Bold> out of <Bold>{owners?.length || 0}</Bold> owners\r\n        </Paragraph>\r\n        {owners && owners.length > 1 && granted && (\r\n          <Row className={classes.buttonRow}>\r\n            <Button\r\n              className={classes.modifyBtn}\r\n              color=\"primary\"\r\n              minWidth={120}\r\n              onClick={toggleModal}\r\n              variant=\"contained\"\r\n            >\r\n              Change\r\n            </Button>\r\n          </Row>\r\n        )}\r\n      </Block>\r\n      <Modal\r\n        description=\"Change Required Confirmations Form\"\r\n        handleClose={toggleModal}\r\n        open={isModalOpen}\r\n        title=\"Change Required Confirmations\"\r\n      >\r\n        <ChangeThresholdModal\r\n          onClose={toggleModal}\r\n          ownersCount={owners?.length}\r\n          safeAddress={safeAddress}\r\n          threshold={threshold}\r\n        />\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ThresholdSettings\r\n"],"sourceRoot":""}